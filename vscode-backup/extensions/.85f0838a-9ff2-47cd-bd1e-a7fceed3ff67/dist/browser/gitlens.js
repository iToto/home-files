(()=>{var e={5640:(e,t,i)=>{i.d(t,{QO:()=>r,qb:()=>n});var r=(e=>(e[e.Force=0]="Force",e[e.ForceWithLease=1]="ForceWithLease",e))(r||{}),n=(e=>(e[e.INDEX_MODIFIED=0]="INDEX_MODIFIED",e[e.INDEX_ADDED=1]="INDEX_ADDED",e[e.INDEX_DELETED=2]="INDEX_DELETED",e[e.INDEX_RENAMED=3]="INDEX_RENAMED",e[e.INDEX_COPIED=4]="INDEX_COPIED",e[e.MODIFIED=5]="MODIFIED",e[e.DELETED=6]="DELETED",e[e.UNTRACKED=7]="UNTRACKED",e[e.IGNORED=8]="IGNORED",e[e.INTENT_TO_ADD=9]="INTENT_TO_ADD",e[e.ADDED_BY_US=10]="ADDED_BY_US",e[e.ADDED_BY_THEM=11]="ADDED_BY_THEM",e[e.DELETED_BY_US=12]="DELETED_BY_US",e[e.DELETED_BY_THEM=13]="DELETED_BY_THEM",e[e.BOTH_ADDED=14]="BOTH_ADDED",e[e.BOTH_DELETED=15]="BOTH_DELETED",e[e.BOTH_MODIFIED=16]="BOTH_MODIFIED",e))(n||{})},4398:(e,t,i)=>{i.d(t,{h:()=>n});var r=i(5255);function n(e){if(e.scheme===r.sN.Git)try{return JSON.parse(e.query)}catch{}}},2022:(e,t,i)=>{i.d(t,{H:()=>AnnotationProviderBase,m:()=>o});var r=i(9496),n=i(2061),s=i(4336);function o(e){return`${e?.document.uri.toString()}|${e?.viewColumn}`}class AnnotationProviderBase{constructor(e,t,i){this.annotationType=e,this.editor=t,this.trackedDocument=i,this.correlationKey=o(this.editor),this.document=this.editor.document,this.disposable=r.Disposable.from(r.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this))}annotationContext;correlationKey;document;status;decorations;disposable;dispose(){this.clear(),this.disposable.dispose()}onTextEditorSelectionChanged(e){this.document===e.textEditor.document&&this.selection({line:e.selections[0].active.line})}get editorUri(){return this.editor?.document?.uri}clear(){if(this.annotationContext=void 0,this.status=void 0,null!=this.editor&&this.decorations?.length){for(const e of this.decorations)try{this.editor.setDecorations(e.decorationType,[])}catch{}this.decorations=void 0}}mustReopen(e){return!1}refresh(e){if(null==this.editor||!this.decorations?.length)return;const t=[];for(const i of this.decorations){const r=e.get(i.decorationType);null!==r&&(null!=r&&(i.decorationType=r),t.push(i))}this.setDecorations(this.decorations)}async restore(e){if(!1!==this.editor._disposed){if(this.status="computing",e===r.window.activeTextEditor&&await(0,n.v)("gitlens:annotationStatus",this.status),this.editor=e,this.correlationKey=o(e),this.document=e.document,this.decorations?.length)for(const e of this.decorations)this.editor.setDecorations(e.decorationType,e.rangesOrOptions);this.status="computed",e===r.window.activeTextEditor&&await(0,n.v)("gitlens:annotationStatus",this.status)}}async provideAnnotation(e){this.status="computing";try{if(await this.onProvideAnnotation(e))return this.status="computed",!0}catch(e){s.Yd.error(e)}return this.status=void 0,!1}setDecorations(e){if(this.decorations?.length&&this.clear(),this.decorations=e,this.decorations?.length)for(const e of this.decorations)this.editor.setDecorations(e.decorationType,e.rangesOrOptions)}}},248:(e,t,i)=>{i.d(t,{Lx:()=>S,iF:()=>A,U5:()=>P,Vz:()=>k,HM:()=>C,sV:()=>R});var r=i(9496),n=i(5255),s=i(9338);function o(e){const t=d(e);return null==t?null:[t.rgba.r,t.rgba.g,t.rgba.b,t.rgba.a]}function a(e,t){const i=Math.pow(10,t);return Math.round(e*i)/i}class RGBA{_rgbaBrand=void 0;r;g;b;a;constructor(e,t,i,r=1){this.r=0|Math.min(255,Math.max(0,e)),this.g=0|Math.min(255,Math.max(0,t)),this.b=0|Math.min(255,Math.max(0,i)),this.a=a(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.r===t.r&&e.g===t.g&&e.b===t.b&&e.a===t.a}}class HSLA{_hslaBrand=void 0;h;s;l;a;constructor(e,t,i,r){this.h=0|Math.max(Math.min(360,e),0),this.s=a(Math.max(Math.min(1,t),0),3),this.l=a(Math.max(Math.min(1,i),0),3),this.a=a(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.l===t.l&&e.a===t.a}static fromRGBA(e){const t=e.r/255,i=e.g/255,r=e.b/255,n=e.a,s=Math.max(t,i,r),o=Math.min(t,i,r);let a=0,c=0;const l=(o+s)/2,h=s-o;if(h>0){switch(c=Math.min(l<=.5?h/(2*l):h/(2-2*l),1),s){case t:a=(i-r)/h+(i<r?6:0);break;case i:a=(r-t)/h+2;break;case r:a=(t-i)/h+4}a*=60,a=Math.round(a)}return new HSLA(a,c,l,n)}static _hue2rgb(e,t,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?e+6*(t-e)*i:i<.5?t:i<2/3?e+(t-e)*(2/3-i)*6:e}static toRGBA(e){const t=e.h/360,{s:i,l:r,a:n}=e;let s,o,a;if(0===i)s=o=a=r;else{const e=r<.5?r*(1+i):r+i-r*i,n=2*r-e;s=HSLA._hue2rgb(n,e,t+1/3),o=HSLA._hue2rgb(n,e,t),a=HSLA._hue2rgb(n,e,t-1/3)}return new RGBA(Math.round(255*s),Math.round(255*o),Math.round(255*a),n)}}class HSVA{_hsvaBrand=void 0;h;s;v;a;constructor(e,t,i,r){this.h=0|Math.max(Math.min(360,e),0),this.s=a(Math.max(Math.min(1,t),0),3),this.v=a(Math.max(Math.min(1,i),0),3),this.a=a(Math.max(Math.min(1,r),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.v===t.v&&e.a===t.a}static fromRGBA(e){const t=e.r/255,i=e.g/255,r=e.b/255,n=Math.max(t,i,r),s=n-Math.min(t,i,r),o=0===n?0:s/n;let a;return a=0===s?0:n===t?((i-r)/s%6+6)%6:n===i?(r-t)/s+2:(t-i)/s+4,new HSVA(Math.round(60*a),o,n,e.a)}static toRGBA(e){const{h:t,s:i,v:r,a:n}=e,s=r*i,o=s*(1-Math.abs(t/60%2-1)),a=r-s;let[c,l,h]=[0,0,0];return t<60?(c=s,l=o):t<120?(c=o,l=s):t<180?(l=s,h=o):t<240?(l=o,h=s):t<300?(c=o,h=s):t<=360&&(c=s,h=o),c=Math.round(255*(c+a)),l=Math.round(255*(l+a)),h=Math.round(255*(h+a)),new RGBA(c,l,h,n)}}class Color{static from(e){return e instanceof Color?e:d(e)||Color.red}static fromCssVariable(e,t){return d(function(e,t){return t.getPropertyValue(e).trim()}(e,t))||Color.red}static fromHex(e){return p(e)||Color.red}static equals(e,t){return!e&&!t||!(!e||!t)&&e.equals(t)}rgba;_hsla;get hsla(){return this._hsla?this._hsla:HSLA.fromRGBA(this.rgba)}_hsva;get hsva(){return this._hsva?this._hsva:HSVA.fromRGBA(this.rgba)}constructor(e){if(!e)throw new Error("Color needs a value");if(e instanceof RGBA)this.rgba=e;else if(e instanceof HSLA)this._hsla=e,this.rgba=HSLA.toRGBA(e);else{if(!(e instanceof HSVA))throw new Error("Invalid color ctor argument");this._hsva=e,this.rgba=HSVA.toRGBA(e)}}equals(e){return null!=e&&(Boolean(e)&&RGBA.equals(this.rgba,e.rgba)&&HSLA.equals(this.hsla,e.hsla)&&HSVA.equals(this.hsva,e.hsva))}getRelativeLuminance(){return a(.2126*Color._relativeLuminanceForComponent(this.rgba.r)+.7152*Color._relativeLuminanceForComponent(this.rgba.g)+.0722*Color._relativeLuminanceForComponent(this.rgba.b),4)}static _relativeLuminanceForComponent(e){const t=e/255;return t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)}luminance(e){return function(e,t){if(0===t)return new Color(new RGBA(0,0,0,e.rgba.a));if(1===t)return new Color(new RGBA(255,255,255,e.rgba.a));const i=e.getRelativeLuminance();let r=20;const n=(e,i)=>{const s=e.mix(i,.5),o=s.getRelativeLuminance();return Math.abs(t-o)<1e-7||!r--?s:o>t?n(e,s):n(s,i)},s=(i>t?n(Color.black,e):n(e,Color.white)).rgba;return new Color(new RGBA(s.r,s.g,s.b,e.rgba.a))}(this,e)}getContrastRatio(e){const t=this.getRelativeLuminance(),i=e.getRelativeLuminance();return t>i?(t+.05)/(i+.05):(i+.05)/(t+.05)}isDarker(){return(299*this.rgba.r+587*this.rgba.g+114*this.rgba.b)/1e3<128}isLighter(){return(299*this.rgba.r+587*this.rgba.g+114*this.rgba.b)/1e3>=128}isLighterThan(e){return this.getRelativeLuminance()>e.getRelativeLuminance()}isDarkerThan(e){return this.getRelativeLuminance()<e.getRelativeLuminance()}lighten(e){return new Color(new HSLA(this.hsla.h,this.hsla.s,this.hsla.l+this.hsla.l*e,this.hsla.a))}darken(e){return new Color(new HSLA(this.hsla.h,this.hsla.s,this.hsla.l-this.hsla.l*e,this.hsla.a))}transparent(e){const{r:t,g:i,b:r,a:n}=this.rgba;return new Color(new RGBA(t,i,r,n*e))}isTransparent(){return 0===this.rgba.a}isOpaque(){return 1===this.rgba.a}opposite(){return new Color(new RGBA(255-this.rgba.r,255-this.rgba.g,255-this.rgba.b,this.rgba.a))}blend(e){const t=e.rgba,i=this.rgba.a,r=t.a,n=i+r*(1-i);if(n<1e-6)return Color.transparent;const s=this.rgba.r*i/n+t.r*r*(1-i)/n,o=this.rgba.g*i/n+t.g*r*(1-i)/n,a=this.rgba.b*i/n+t.b*r*(1-i)/n;return new Color(new RGBA(s,o,a,n))}mix(e,t){return function(e,t,i){const r=e.rgba,n=t.rgba;return new Color(new RGBA(r.r+i*(n.r-r.r),r.g+i*(n.g-r.g),r.b+i*(n.b-r.b),r.a+i*(n.a-r.a)))}(this,e,t)}makeOpaque(e){if(this.isOpaque()||1!==e.rgba.a)return this;const{r:t,g:i,b:r,a:n}=this.rgba;return new Color(new RGBA(e.rgba.r-n*(e.rgba.r-t),e.rgba.g-n*(e.rgba.g-i),e.rgba.b-n*(e.rgba.b-r),1))}flatten(...e){const t=e.reduceRight(((e,t)=>Color._flatten(t,e)));return Color._flatten(this,t)}static _flatten(e,t){const i=1-e.rgba.a;return new Color(new RGBA(i*t.rgba.r+e.rgba.a*e.rgba.r,i*t.rgba.g+e.rgba.a*e.rgba.g,i*t.rgba.b+e.rgba.a*e.rgba.b))}_toString;toString(){return this._toString||(this._toString=function(e){if(e.isOpaque())return h(e);return c(e)}(this)),this._toString}static getLighterColor(e,t,i){if(e.isLighterThan(t))return e;i=i||.5;const r=e.getRelativeLuminance(),n=t.getRelativeLuminance();return i=i*(n-r)/n,e.lighten(i)}static getDarkerColor(e,t,i){if(e.isDarkerThan(t))return e;i=i||.5;const r=e.getRelativeLuminance();return i=i*(r-t.getRelativeLuminance())/r,e.darken(i)}static white=new Color(new RGBA(255,255,255,1));static black=new Color(new RGBA(0,0,0,1));static red=new Color(new RGBA(255,0,0,1));static blue=new Color(new RGBA(0,0,255,1));static green=new Color(new RGBA(0,255,0,1));static cyan=new Color(new RGBA(0,255,255,1));static lightgrey=new Color(new RGBA(211,211,211,1));static transparent=new Color(new RGBA(0,0,0,0))}function c(e){return`rgba(${e.rgba.r}, ${e.rgba.g}, ${e.rgba.b}, ${Number(e.rgba.a.toFixed(2))})`}function l(e){const t=e.toString(16);return 2!==t.length?`0${t}`:t}function h(e){return`#${l(e.rgba.r)}${l(e.rgba.g)}${l(e.rgba.b)}`}const u=/^((?:rgb|hsl)a?)\((-?\d+%?)[,\s]+(-?\d+%?)[,\s]+(-?\d+%?)[,\s]*(-?[\d.]+%?)?\)$/i;function d(e){if(0===(e=e.trim()).length)return null;if(e.charCodeAt(0)===n.mN.Hash)return p(e);const t=u.exec(e);if(null==t)return null;const i=t[1];let r;switch(i){case"rgb":case"hsl":r=[parseInt(t[2],10),parseInt(t[3],10),parseInt(t[4],10),1];break;case"rgba":case"hsla":r=[parseInt(t[2],10),parseInt(t[3],10),parseInt(t[4],10),parseFloat(t[5])];break;default:return null}switch(i){case"rgb":case"rgba":return new Color(new RGBA(r[0],r[1],r[2],r[3]));case"hsl":case"hsla":return new Color(new HSLA(r[0],r[1],r[2],r[3]))}return Color.red}function p(e){const t=(e=e.trim()).length;if(0===t)return null;if(e.charCodeAt(0)!==n.mN.Hash)return null;switch(t){case 7:{const t=16*m(e.charCodeAt(1))+m(e.charCodeAt(2)),i=16*m(e.charCodeAt(3))+m(e.charCodeAt(4)),r=16*m(e.charCodeAt(5))+m(e.charCodeAt(6));return new Color(new RGBA(t,i,r,1))}case 9:{const t=16*m(e.charCodeAt(1))+m(e.charCodeAt(2)),i=16*m(e.charCodeAt(3))+m(e.charCodeAt(4)),r=16*m(e.charCodeAt(5))+m(e.charCodeAt(6)),n=16*m(e.charCodeAt(7))+m(e.charCodeAt(8));return new Color(new RGBA(t,i,r,n/255))}case 4:{const t=m(e.charCodeAt(1)),i=m(e.charCodeAt(2)),r=m(e.charCodeAt(3));return new Color(new RGBA(16*t+t,16*i+i,16*r+r))}case 5:{const t=m(e.charCodeAt(1)),i=m(e.charCodeAt(2)),r=m(e.charCodeAt(3)),n=m(e.charCodeAt(4));return new Color(new RGBA(16*t+t,16*i+i,16*r+r,(16*n+n)/255))}default:return null}}function m(e){switch(e){case n.mN.Digit0:return 0;case n.mN.Digit1:return 1;case n.mN.Digit2:return 2;case n.mN.Digit3:return 3;case n.mN.Digit4:return 4;case n.mN.Digit5:return 5;case n.mN.Digit6:return 6;case n.mN.Digit7:return 7;case n.mN.Digit8:return 8;case n.mN.Digit9:return 9;case n.mN.a:case n.mN.A:return 10;case n.mN.b:case n.mN.B:return 11;case n.mN.c:case n.mN.C:return 12;case n.mN.d:case n.mN.D:return 13;case n.mN.e:case n.mN.E:return 14;case n.mN.f:case n.mN.F:return 15}return 0}var g=i(5148),f=i(3620);const w="#f66a0a",v="#0a60f6",y=["#f66a0a","#ef6939","#e96950","#e26862","#db6871","#d3677e","#cc678a","#c46696","#bb66a0","#b365a9","#a965b3","#a064bb","#9664c4","#8a63cc","#7e63d3","#7162db","#6262e2","#5061e9","#3961ef","#0a60f6"];let b;function C(){if(null==b){const{coldColor:e,hotColor:t}=g.D.get("heatmap");let i;i=e===v&&t===w?y:function(e,t,i){const r=[],n=Color.from(e),s=Color.from(t);r.push(n.toString());const o=i-1;for(let e=1;e<o;e++){const t=n.mix(s,e/o);r.push(t.toString())}return r.push(s.toString()),r}(t,e,20),b={hot:i.slice(0,10),cold:i.slice(10,20)};const r=g.D.onDidChange((e=>{g.D.changed(e,["heatmap.ageThreshold","heatmap.hotColor","heatmap.coldColor"])&&(r.dispose(),b=void 0)}))}return b}function A(e,t,i){const[r,n,s,o]=D(t,i);e.renderOptions.before.borderColor=`rgba(${r},${n},${s},${o})`}function S(e,t,i,n){const[s,o,a,c]=D(e,t),{fadeLines:l,locations:h}=g.D.get("heatmap"),u=h.includes("gutter"),d=h.includes("line"),p=h.includes("overview"),m=`${s},${o},${a},${c}`;let f=n.get(m);return null==f?(f={decorationType:r.window.createTextEditorDecorationType({backgroundColor:d?`rgba(${s},${o},${a},${.15*c})`:void 0,opacity:l?`${t.computeOpacity(e).toFixed(2)} !important`:void 0,isWholeLine:!(!d&&!l)||void 0,gutterIconPath:u?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${s},${o},${a})' fill-opacity='${c}' x='15' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:u?"contain":void 0,overviewRulerLane:p?r.OverviewRulerLane.Center:void 0,overviewRulerColor:p?`rgba(${s},${o},${a},${.7*c})`:void 0}),rangesOrOptions:[i]},n.set(m,f)):f.rangesOrOptions.push(i),f.decorationType}function P(e,t,i,r){const o={renderOptions:{before:{...r}}};e.isUncommitted&&(o.renderOptions.before.color=r.uncommittedColor);const a=s.i.fromTemplate(t,e,i);return o.renderOptions.before.contentText=(0,f.vk)(a.replace(/ /g,n.NE.Space),1,1),o}function k(e,t,i,n,s){let o,a,c,l=0;for(const e of Object.values(s.tokenOptions))if(void 0!==e){if(null==e.truncateTo){l=-1;break}l+=e.truncateTo}if(l>=0&&(l+=(0,f.dz)((0,f.sX)(n,void 0)),l>0&&(l+=3)),t.enabled&&(o="solid",a="left"===t.location?"0 0 0 2px":"0 2px 0 0"),l>=0){const e=g.D.getAny("editor.letterSpacing");c=null!=e&&0!==e?`calc(${l}ch + ${Math.round(l*e)+(i?13:-6)}px)`:`calc(${l}ch ${i?"+ 13px":"- 6px"})`}return{backgroundColor:new r.ThemeColor("gitlens.gutterBackgroundColor"),borderStyle:o,borderWidth:a,color:new r.ThemeColor("gitlens.gutterForegroundColor"),fontWeight:"normal",fontStyle:"normal",height:"100%",margin:"0 26px -1px 0",textDecoration:`${e?"overline solid rgba(0, 0, 0, .2)":"none"};box-sizing: border-box${i?";padding: 0 0 0 18px":""}`,width:c,uncommittedColor:new r.ThemeColor("gitlens.gutterUncommittedForegroundColor")}}function R(e,t,i,o=!0){const a=s.i.fromTemplate(t,e,{...i,messageTruncateAtNewLine:!0});return{renderOptions:{after:{backgroundColor:new r.ThemeColor("gitlens.trailingLineBackgroundColor"),color:new r.ThemeColor("gitlens.trailingLineForegroundColor"),contentText:(0,f.vk)(a.replace(/ /g,n.NE.Space),1,1),fontWeight:"normal",fontStyle:"normal",textDecoration:"none;"+(o?"":" position: absolute;")}}}}function D(e,t){const i=t.computeRelativeAge(e),r=o((e.getTime()<t.coldThresholdTimestamp?t.colors.cold:t.colors.hot)[i]);return[...r??[0,0,0],null==r?0:0===i?1:i<=5?.8:.6]}},3139:(e,t,i)=>{i.d(t,{G:()=>v,P:()=>Autolinks});var r=i(9496),n=i(5255),s=i(8452),o=i(5148),a=i(7512),c=i(1219),l=i(8786),h=i(3105),u=i(4336),d=i(3620),p=Object.defineProperty,m=Object.getOwnPropertyDescriptor,g=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?m(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&p(t,i,s),s};const f=Object.freeze(new Map),w=/<num>/g;function v(e){return{provider:e.provider?{id:e.provider.id,name:e.provider.name,domain:e.provider.domain,icon:e.provider.icon}:void 0,id:e.id,prefix:e.prefix,title:e.title,url:e.url,type:e.type,description:e.description}}function y(e){return!("prefix"in e)&&!("url"in e)}function b(e){return"prefix"in e&&null!=e.prefix&&"url"in e&&null!=e.url}class Autolinks{constructor(e){this.container=e,this._disposable=r.Disposable.from(o.D.onDidChange(this.onConfigurationChanged,this)),this.onConfigurationChanged()}_disposable;_references=[];dispose(){this._disposable?.dispose()}onConfigurationChanged(e){if(o.D.changed(e,"autolinks")){const e=o.D.get("autolinks");this._references=e?.filter((e=>e.prefix&&e.url))?.map((e=>({prefix:e.prefix,url:e.url,title:e.title,alphanumeric:e.alphanumeric,ignoreCase:e.ignoreCase,type:e.type,description:e.description})))??[]}}getAutolinks(e,t,i){const r=[];if(t?.provider?.autolinks?.length&&r.push([t.provider,t.provider.autolinks]),!this._references.length||null!=t?.provider&&i?.excludeCustom||r.push([void 0,this._references]),0===r.length)return f;const n=new Map;let s,o;for(const[t,i]of r)for(const r of i)if(b(r))for(C(r,"plaintext");;){if(s=r.messageRegex.exec(e),null==s)break;[,,,o]=s,n.set(o,{provider:t,id:o,prefix:r.prefix,url:r.url?.replace(w,o),title:r.title?.replace(w,o),type:r.type,description:r.description?.replace(w,o)})}else y(r)&&r.parse(e,n);return n}async getEnrichedAutolinks(e,t){if("string"==typeof e&&(e=this.getAutolinks(e,t)),0===e.size)return;let i;if(t?.hasRichIntegration()){({provider:i}=t);(t.provider.maybeConnected??await t.provider.isConnected())||(i=void 0)}return new Map((0,h.UI)(e,(([e,t])=>[e,[null!=i&&t.provider?.id===i.id&&t.provider?.domain===i.domain?i.getIssueOrPullRequest(e):void 0,t]])))}linkify(e,t,i,r,s,o){const a="plaintext"===t&&null==o;a&&(o=new Map);const c=new Map;for(const i of this._references)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,c,r,s,o));if(null!=i&&0!==i.length){i=[...i].sort(((e,t)=>{const i=e.provider?.maybeConnected,r=t.provider?.maybeConnected;return i!==r?i?-1:r?1:0:0}));for(const n of i)if(null!=n.provider)for(const i of n.provider.autolinks)this.ensureAutolinkCached(i)&&null!=i.tokenize&&(e=i.tokenize(e,t,c,r,s,o))}return 0!==c.size&&(e=e.replace(/(\x00\d+\x00)/g,((e,t)=>c.get(t)??t))),a&&o?.size&&(e+=`\n${n.NE.Dash.repeat(2)}\n${(0,h.v_)((0,h.UI)(o,(([e,t])=>`${(0,d.sC)(e)} ${t}`)),"\n")}`),e}ensureAutolinkCached(e){if(y(e))return!0;if(!e.prefix||!e.url)return!1;if(void 0!==e.tokenize||null===e.tokenize)return!0;try{e.tokenize=(t,i,r,o,c,h)=>{let u;switch(i){case"markdown":return C(e,i),t.replace(e.messageMarkdownRegex,((t,i,p,m)=>{const g=(0,l.M)(e.url.replace(w,m));let f="";if(e.title){f=` "${e.title.replace(w,m)}`;const t=o?.get(m)?.[0];if(null!=t?.value)if(t.paused){if(null!=h&&!c?.has(m)){let t=e.description?.replace(w,m);null==t&&(t=`Custom Autolink ${e.prefix}${m}`),u=h.size+1,h.set(u,`[${(0,s.sy)()} ${t} $(loading~spin)](${g}${f}")`)}f+=`\n${n.NE.Dash.repeat(2)}\nLoading...`}else{const e=t.value,i=(0,d.ry)(e.title.trim()),r=i.replace(/"/g,'\\"');null==h||c?.has(m)||(u=h.size+1,h.set(u,`[${(0,s.sy)(e)} **${i}**](${g}${f}")\\\n${n.NE.Space.repeat(5)}${p} ${e.state} ${(0,a.Zh)(e.closedDate??e.date)}`)),f+=`\n${n.NE.Dash.repeat(2)}\n${r}\n${(0,d.kC)(e.state)}, ${(0,a.Zh)(e.closedDate??e.date)}`}else if(null!=h&&!c?.has(m)){let t=e.description?.replace(w,m);null==t&&(t=`Custom Autolink ${e.prefix}${m}`),u=h.size+1,h.set(u,`[${(0,s.sy)()} ${t}](${g}${f}")`)}f+='"'}const v=`\0${r.size}\0`;return r.set(v,`[${p}](${g}${f})`),`${i}${v}`}));case"html":return C(e,i),t.replace(e.messageHtmlRegex,((t,i,p,m)=>{const g=(0,l.M)(e.url.replace(w,m));let f="";if(e.title){f=`"${(0,d.se)(e.title.replace(w,m))}`;const t=o?.get(m)?.[0];if(null!=t?.value)if(t.paused){if(null!=h&&!c?.has(m)){let t=e.description?.replace(w,m);null==t&&(t=`Custom Autolink ${e.prefix}${m}`),u=h.size+1,h.set(u,`<a href="${g}" title=${f}>${(0,s.Ty)()} ${t}</a>`)}f+=`\n${n.NE.Dash.repeat(2)}\nLoading...`}else{const e=t.value,i=(0,d.se)(e.title.trim()),r=i.replace(/"/g,"&quot;");null==h||c?.has(m)||(u=h.size+1,h.set(u,`<a href="${g}" title=${f}>${(0,s.Ty)(e)} <b>${i}</b></a><br /><span>${n.NE.Space.repeat(5)}${p} ${e.state} ${(0,a.Zh)(e.closedDate??e.date)}</span>`)),f+=`\n${n.NE.Dash.repeat(2)}\n${r}\n${(0,d.kC)(e.state)}, ${(0,a.Zh)(e.closedDate??e.date)}`}else if(null!=h&&!c?.has(m)){let t=e.description?.replace(w,m);null==t&&(t=`Custom Autolink ${e.prefix}${m}`),u=h.size+1,h.set(u,`<a href="${g}" title=${f}>${(0,s.Ty)()} ${t}</a>`)}f+='"'}const v=`\0${r.size}\0`;return r.set(v,`<a href="${g}" title=${f}>${p}</a>`),`${i}${v}`}));default:return C(e,i),t.replace(e.messageRegex,((e,t,i,s)=>{const l=o?.get(s)?.[0];if(null==l?.value)return i;null==h||c?.has(s)||(u=h.size+1,h.set(u,`${i}: ${l.paused?"Loading...":`${l.value.title}  ${n.NE.Dot}  ${(0,d.kC)(l.value.state)}, ${(0,a.Zh)(l.value.closedDate??l.value.date)}`}`));const p=`\0${r.size}\0`;return r.set(p,`${i}${(0,d.sC)(u)}`),`${t}${p}`}))}}}catch(t){u.Yd.error(t,`Failed to create autolink generator: prefix=${e.prefix}, url=${e.url}, title=${e.title}`),e.tokenize=null}return!0}}function C(e,t){return"markdown"===t&&null==e.messageMarkdownRegex?e.messageMarkdownRegex=new RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,d.yI)((0,d.se)((0,d.ry)(e.prefix)))}(${e.alphanumeric?"\\w":"\\d"}+))\\b`,e.ignoreCase?"gi":"g"):"html"===t&&null==e.messageHtmlRegex?e.messageHtmlRegex=new RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,d.yI)((0,d.se)(e.prefix))}(${e.alphanumeric?"\\w":"\\d"}+))\\b`,e.ignoreCase?"gi":"g"):null==e.messageRegex&&(e.messageRegex=new RegExp(`(^|\\s|\\(|\\[|\\{)(${(0,d.yI)(e.prefix)}(${e.alphanumeric?"\\w":"\\d"}+))\\b`,e.ignoreCase?"gi":"g")),!0}g([(0,c.fF)({args:{0:"<message>",1:!1}})],Autolinks.prototype,"getAutolinks",1),g([(0,c.fF)({args:{0:e=>"string"==typeof e?"<message>":`autolinks=${e.size}`,1:e=>e?.remoteKey}})],Autolinks.prototype,"getEnrichedAutolinks",1),g([(0,c.fF)({args:{0:"<text>",2:e=>e?.length,3:e=>e?.size,4:e=>e?.size}})],Autolinks.prototype,"linkify",1)},8178:(e,t,i)=>{i.d(t,{d:()=>BlameAnnotationProviderBase});var r=i(9496),n=i(7462),s=i(1062),o=i(5148),a=i(1219),c=i(2022),l=i(248),h=Object.defineProperty,u=Object.getOwnPropertyDescriptor;class BlameAnnotationProviderBase extends c.H{constructor(e,t,i,r){super(e,t,i),this.container=r,this.blame=this.container.git.getBlame(this.trackedDocument.uri,t.document),t.document.isDirty&&i.setForceDirtyStateChangeOnNextDocumentChange()}blame;hoverProviderDisposable;clear(){null!=this.hoverProviderDisposable&&(this.hoverProviderDisposable.dispose(),this.hoverProviderDisposable=void 0),super.clear()}async validate(){const e=await this.blame;return null!=e&&0!==e.lines.length}async getBlame(){const e=await this.blame;if(null!=e&&0!==e.lines.length)return e}getComputedHeatmap(e){const t=[];let i,r;for(const n of e.lines)r!==n.sha&&(r=n.sha,i=e.commits.get(n.sha),null!=i&&t.push(i.date));t.sort(((e,t)=>e.getTime()-t.getTime()));const n=new Date;n.setDate(n.getDate()-(o.D.get("heatmap.ageThreshold")||90));const s=n.getTime(),a=[],c=[];for(const e of t)e.getTime()<s?c.push(e):a.push(e);let h;h=a.length&&c.length?{hot:d(a),cold:d(c)}:d(t);const u=(e,t)=>Array.isArray(h)?h:t?h.hot.concat(h.cold):e.getTime()<s?h.cold:h.hot,p=(e,t)=>{const i=e.getTime();let r=0;for(let e=0;e<t.length&&(r=e,!(i>=t[e]));e++);return r};return{coldThresholdTimestamp:s,colors:(0,l.HM)(),computeRelativeAge:e=>p(e,u(e)),computeOpacity:e=>{const t=u(e,!0),i=p(e,t);return Math.max(.2,Math.round(100*(1-i/t.length))/100)}}}registerHoverProviders(e){const t=o.D.get("hovers");t.enabled&&t.annotations.enabled&&(e.details||e.changes)&&(this.hoverProviderDisposable=r.languages.registerHoverProvider({pattern:this.document.uri.fsPath},{provideHover:(t,i,r)=>this.provideHover(e,t,i,r)}))}async provideHover(e,t,i,a){if("line"!==o.D.get("hovers.annotations.over")&&0!==i.character)return;if(this.document.uri.toString()!==t.uri.toString())return;const c=await this.getBlame();if(null==c)return;const l=c.lines[i.line],h=c.commits.get(l.sha);if(null==h)return;const u=(await Promise.all([e.details?this.getDetailsHoverMessage(h,t):void 0,e.changes?(0,s.jw)(this.container,h,await n.YY.fromUri(t.uri),i.line,t):void 0])).filter((e=>Boolean(e)));return new r.Hover(u,t.validateRange(new r.Range(i.line,0,i.line,1073741824)))}async getDetailsHoverMessage(e,t){let i=this.editor.selection.active.line;const r=i+1;i=(e.lines.find((e=>e.line===r))??e.lines[0]).originalLine-1;const a=o.D.get("hovers");return(0,s.nN)(this.container,e,await n.YY.fromUri(t.uri),i,{autolinks:a.autolinks.enabled,dateFormat:o.D.get("defaultDateFormat"),format:a.detailsMarkdownFormat,pullRequests:a.pullRequests.enabled,timeout:250})}}function d(e){const t=[],i=Math.floor(e.length/2),r=e.length%2?e[i].getTime():(e[i-1].getTime()+e[i].getTime())/2;let n=(e[e.length-1].getTime()-r)/5;for(let e=5;e>0;e--)t.push(r+n*e);t.push(r);n=(r-e[0].getTime())/4;for(let e=1;e<=4;e++)t.push(r-n*e);return t}((e,t,i,r)=>{for(var n,s=r>1?void 0:r?u(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);r&&s&&h(t,i,s)})([(0,a.cM)({args:!1})],BlameAnnotationProviderBase.prototype,"getComputedHeatmap",1)},623:(e,t,i)=>{i.d(t,{I:()=>p,f:()=>FileAnnotationController});var r=i(9496),n=i(5148),s=i(2061),o=i(2185),a=i(9796),c=i(3105),l=i(4336),h=i(3700),u=i(2509),d=i(2022);const p={gutterBlameAnnotation:r.window.createTextEditorDecorationType({rangeBehavior:r.DecorationRangeBehavior.ClosedOpen,textDecoration:"none"}),gutterBlameHighlight:void 0,changesLineChangedAnnotation:void 0,changesLineAddedAnnotation:void 0,changesLineDeletedAnnotation:void 0};class FileAnnotationController{constructor(e){this.container=e,this._disposable=r.Disposable.from((0,o.IH)(e.onReady)(this.onReady,this),n.D.onDidChange(this.onConfigurationChanged,this),r.window.onDidChangeActiveColorTheme(this.onThemeChanged,this)),this._toggleModes=new Map}_onDidToggleAnnotations=new r.EventEmitter;get onDidToggleAnnotations(){return this._onDidToggleAnnotations.event}_annotationsDisposable;_annotationProviders=new Map;_disposable;_editor;_keyboardScope=void 0;_toggleModes;_windowAnnotationType=void 0;dispose(){this.clearAll(),p.gutterBlameAnnotation?.dispose(),p.gutterBlameHighlight?.dispose(),p.changesLineChangedAnnotation?.dispose(),p.changesLineAddedAnnotation?.dispose(),p.changesLineDeletedAnnotation?.dispose(),this._annotationsDisposable?.dispose(),this._disposable?.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){const t=null==e;let i;if(n.D.changed(e,["blame.highlight","changes.locations"])&&this.updateDecorations(!1),n.D.changed(e,"blame.toggleMode")&&(i=n.D.get("blame.toggleMode"),this._toggleModes.set("blame",i),t||"file"!==i||this.clearAll()),n.D.changed(e,"changes.toggleMode")&&(i=n.D.get("changes.toggleMode"),this._toggleModes.set("changes",i),t||"file"!==i||this.clearAll()),n.D.changed(e,"heatmap.toggleMode")&&(i=n.D.get("heatmap.toggleMode"),this._toggleModes.set("heatmap",i),t||"file"!==i||this.clearAll()),!t&&n.D.changed(e,["blame","changes","heatmap","hovers","defaultDateFormat","defaultDateSource","defaultDateStyle","defaultGravatarsStyle"]))for(const e of this._annotationProviders.values())null!=e&&this.show(e.editor,e.annotationType??"blame")}onThemeChanged(e){this.updateDecorations(!0)}async onActiveTextEditorChanged(e){if(null!=e&&!(0,u.PH)(e))return;if(this._editor=e,this.isInWindowToggle())return void await this.show(e,this._windowAnnotationType);const t=this.getProvider(e);null==t?((0,s.v)("gitlens:annotationStatus",void 0),this.detachKeyboardHook()):((0,s.v)("gitlens:annotationStatus",t.status),this.attachKeyboardHook())}onBlameStateChanged(e){if(e.blameable)return;const t=r.window.activeTextEditor;null!=t&&this.clear(t,"BlameabilityChanged")}onDirtyStateChanged(e){for(const[t,i]of this._annotationProviders)e.document.is(i.document)&&this.clearCore(t,"DocumentChanged")}onTextDocumentClosed(e){if(this.container.git.isTrackable(e.uri))for(const[t,i]of this._annotationProviders)i.document===e&&this.clearCore(t,"DocumentClosed")}onTextEditorViewColumnChanged(e){const t=this.getProvider(e.textEditor);if(null!=t)t.restore(e.textEditor);else{const t=(0,c.sE)(this._annotationProviders.values(),(t=>t.editor.document===e.textEditor.document));if(null==t)return;this.clearCore(t.correlationKey,"ColumnChanged")}}onVisibleTextEditorsChanged(e){for(const t of e)this.getProvider(t)?.restore(t)}isInWindowToggle(){return"window"===this.getToggleMode(this._windowAnnotationType)}getToggleMode(e){return null==e?"file":this._toggleModes.get(e)??"file"}clear(e,t="User"){return this.isInWindowToggle()?this.clearAll():this.clearCore((0,d.m)(e),t)}async clearAll(){this._windowAnnotationType=void 0;for(const[e]of this._annotationProviders)await this.clearCore(e,"Disposing")}async getAnnotationType(e){const t=this.getProvider(e);if(null==t)return;const i=await this.container.tracker.get(e.document);return null!=i&&i.isBlameable?t.annotationType:void 0}getProvider(e){if(null!=e?.document)return this._annotationProviders.get((0,d.m)(e))}async show(e,t,i){if("window"===this.getToggleMode(t)){let i=null==this._windowAnnotationType;const n=!i&&this._windowAnnotationType!==t;if(this._windowAnnotationType=t,n&&(await this.clearAll(),i=!0),i)for(const i of r.window.visibleTextEditors)i!==e&&this.show(i,t)}if(null==e)return!1;this._editor=e;if(!(await this.container.tracker.getOrAdd(e.document)).isBlameable)return!1;const n=this.getProvider(e);if(n?.annotationType===t)return await n.provideAnnotation(i),await n.selection(i?.selection),!0;return null!=await r.window.withProgress({location:r.ProgressLocation.Window},(async r=>{await(0,s.v)("gitlens:annotationStatus","computing");const o=this.showAnnotationsCore(n,e,t,i,r),a=await o;return e===this._editor&&await(0,s.v)("gitlens:annotationStatus",a?.status),o}))}async toggle(e,t,i,r){if(null!=e&&"file"===this._toggleModes.get(t)){const i=await this.container.tracker.getOrAdd(e.document);if("changes"===t&&!i.isTracked||!i.isBlameable)return!1}const n=this.getProvider(e);if(null==n)return this.show(e,t,i);const s=n.annotationType!==t||n.mustReopen(i);return!0===r&&!s||(this.isInWindowToggle()?await this.clearAll():await this.clearCore(n.correlationKey,"User"),!!s&&this.show(e,t,i))}async attachKeyboardHook(){null==this._keyboardScope&&(this._keyboardScope=await this.container.keyboard.beginScope({escape:{onDidPressKey:async()=>{const e=this._editor;null!=e&&await this.clear(e,"User")}}}))}async clearCore(e,t){const i=this._annotationProviders.get(e);null!=i&&(l.Yd.log(`${t}:`,`Clear annotations for ${e}`),this._annotationProviders.delete(e),i.dispose(),0!==this._annotationProviders.size&&e!==(0,d.m)(this._editor)||(await(0,s.v)("gitlens:annotationStatus",void 0),await this.detachKeyboardHook()),0===this._annotationProviders.size&&(l.Yd.log("Remove all listener registrations for annotations"),this._annotationsDisposable?.dispose(),this._annotationsDisposable=void 0),this._onDidToggleAnnotations.fire())}async detachKeyboardHook(){null!=this._keyboardScope&&(await this._keyboardScope.dispose(),this._keyboardScope=void 0)}async showAnnotationsCore(e,t,n,s,o){if(null!=o){let e="annotations";switch(n){case"blame":e="blame annotations";break;case"changes":e="changes annotations";break;case"heatmap":e="heatmap annotations"}o.report({message:`Computing ${e} for ${(0,h.EZ)(t.document.fileName)}`})}await this.attachKeyboardHook();const c=await this.container.tracker.getOrAdd(t.document);let u;switch(n){case"blame":{const{GutterBlameAnnotationProvider:e}=await Promise.resolve().then(i.bind(i,4455));u=new e(t,c,this.container);break}case"changes":{const{GutterChangesAnnotationProvider:e}=await Promise.resolve().then(i.bind(i,34));u=new e(t,c,this.container);break}case"heatmap":{const{GutterHeatmapBlameAnnotationProvider:e}=await Promise.resolve().then(i.bind(i,79));u=new e(t,c,this.container);break}}if(null!=u&&await u.validate()){if(null!=e&&await this.clearCore(e.correlationKey,"User"),null==this._annotationsDisposable&&0===this._annotationProviders.size&&(l.Yd.log("Add listener registrations for annotations"),this._annotationsDisposable=r.Disposable.from(r.window.onDidChangeActiveTextEditor((0,a.Ds)(this.onActiveTextEditorChanged,50),this),r.window.onDidChangeTextEditorViewColumn(this.onTextEditorViewColumnChanged,this),r.window.onDidChangeVisibleTextEditors((0,a.Ds)(this.onVisibleTextEditorsChanged,50),this),r.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),this.container.tracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.tracker.onDidChangeDirtyState(this.onDirtyStateChanged,this))),this._annotationProviders.set(u.correlationKey,u),await u.provideAnnotation(s))return this._onDidToggleAnnotations.fire(),u;await this.clearCore(u.correlationKey,"Disposing")}}updateDecorations(e){const t=e?Object.entries(p):void 0;if(this.updateHighlightDecoration(),this.updateChangedDecorations(),!e)return;const i=new Map;for(const[e,r]of t){if(null==r)continue;r!==(p[e]??null)&&i.set(r,p[e]??null)}if(0!==i.size)for(const e of r.window.visibleTextEditors)this.getProvider(e)?.refresh(i)}updateChangedDecorations(){p.changesLineAddedAnnotation?.dispose(),p.changesLineChangedAnnotation?.dispose(),p.changesLineDeletedAnnotation?.dispose();const e=n.D.get("changes.locations");let t,i,s;switch(r.window.activeColorTheme.kind){case r.ColorThemeKind.Light:t=[72,152,93],i=[32,144,211],s=[229,20,0];break;case r.ColorThemeKind.HighContrast:default:t=[72,126,2],i=[27,129,168],s=[241,76,76]}p.changesLineAddedAnnotation=r.window.createTextEditorDecorationType({backgroundColor:e.includes("line")?`rgba(${t.join(",")},0.4)`:void 0,isWholeLine:!!e.includes("line")||void 0,gutterIconPath:e.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${t.join(",")})' x='15' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:e.includes("overview")?new r.ThemeColor("editorOverviewRuler.addedForeground"):void 0}),p.changesLineChangedAnnotation=r.window.createTextEditorDecorationType({backgroundColor:e.includes("line")?`rgba(${i.join(",")},0.4)`:void 0,isWholeLine:!!e.includes("line")||void 0,gutterIconPath:e.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='rgb(${i.join(",")})' x='15' y='0' width='3' height='18'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:e.includes("overview")?new r.ThemeColor("editorOverviewRuler.modifiedForeground"):void 0}),p.changesLineDeletedAnnotation=r.window.createTextEditorDecorationType({gutterIconPath:e.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><polygon fill='rgb(${s.join(",")})' points='13,10 13,18 17,14'/></svg>`)}`):void 0,gutterIconSize:"contain",overviewRulerLane:r.OverviewRulerLane.Left,overviewRulerColor:e.includes("overview")?new r.ThemeColor("editorOverviewRuler.deletedForeground"):void 0})}updateHighlightDecoration(){p.gutterBlameHighlight?.dispose(),p.gutterBlameHighlight=void 0;const e=n.D.get("blame.highlight");if(e.enabled){const{locations:t}=e,i="#00bcf2",n=t.includes("gutter")?r.Uri.parse(`data:image/svg+xml,${encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18'><rect fill='${i}' fill-opacity='0.6' x='7' y='0' width='3' height='18'/></svg>`)}`):void 0;p.gutterBlameHighlight=r.window.createTextEditorDecorationType({gutterIconPath:n,gutterIconSize:"contain",isWholeLine:!0,overviewRulerLane:r.OverviewRulerLane.Right,backgroundColor:t.includes("line")?new r.ThemeColor("gitlens.lineHighlightBackgroundColor"):void 0,overviewRulerColor:t.includes("overview")?new r.ThemeColor("gitlens.lineHighlightOverviewRulerColor"):void 0})}}}},4455:(e,t,i)=>{i.d(t,{GutterBlameAnnotationProvider:()=>GutterBlameAnnotationProvider});var r=i(9496),n=i(5255),s=i(9338),o=i(2800),a=i(5148),c=i(1219),l=i(3105),h=i(6004),u=i(6398),d=i(3620),p=i(248),m=i(8178),g=i(623),f=Object.defineProperty,w=Object.getOwnPropertyDescriptor,v=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?w(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&f(t,i,s),s};class GutterBlameAnnotationProvider extends m.d{constructor(e,t,i){super("blame",e,t,i)}clear(){if(super.clear(),null!=g.I.gutterBlameHighlight)try{this.editor.setDecorations(g.I.gutterBlameHighlight,[])}catch{}}async onProvideAnnotation(e,t){const i=(0,h.UH)();this.annotationContext=e;const o=await this.getBlame();if(null==o)return!1;const c=(0,u.k)(i),l=a.D.get("blame"),m=(0,d.Gg)(l.format).reduce(((e,t)=>(e[t.key]=t.options,e)),Object.create(null));let f;s.i.has(l.format,"tips")&&(f=await this.container.git.getBranchesAndTagsTipsFn(o.repoPath));const w={dateFormat:null===l.dateFormat?a.D.get("defaultDateFormat"):l.dateFormat,getBranchAndTagTips:f,tokenOptions:m},v=l.avatars,y=a.D.get("defaultGravatarsStyle"),b=l.separateLines,C=(0,p.Vz)(b,l.heatmap,l.avatars,l.format,w),A=[],S=new Map,P=v?new Map:void 0;let k,R,D,_,T=!1;l.heatmap.enabled&&(_=this.getComputedHeatmap(o));for(const e of o.lines){const t=e.line-1;if(D!==e.sha)T=!1,D=e.sha,k=o.commits.get(e.sha),null!=k&&(R=S.get(e.sha),null==R?(R=(0,p.U5)(k,l.format,w,C),null!=_&&(0,p.iF)(R,k.date,_),R.range=new r.Range(t,0,t,0),A.push(R),v&&null!=k.author.email&&await this.applyAvatarDecoration(k,R,y,P),S.set(e.sha,R)):(R={...R,range:new r.Range(t,0,t,0)},A.push(R)));else{if(null==R)continue;R={...R},l.compact&&!T&&(R.renderOptions={before:{...R.renderOptions.before,contentText:n.NE.Space.repeat((0,d.dz)(R.renderOptions.before.contentText))}},b&&(R.renderOptions.before.textDecoration="none;box-sizing: border-box"+(v?";padding: 0 0 0 18px":"")),T=!0),R.range=new r.Range(t,0,t,0),A.push(R)}}return c?.restart({suffix:" to compute gutter blame annotations"}),A.length&&(this.setDecorations([{decorationType:g.I.gutterBlameAnnotation,rangesOrOptions:A}]),c?.stop({suffix:" to apply all gutter blame annotations"})),this.registerHoverProviders(a.D.get("hovers.annotations")),!0}async selection(e,t){if(!1===e||null==g.I.gutterBlameHighlight)return;if(null==t&&(t=await this.blame,!t?.lines.length))return;let i;if(null!=e?.sha)i=e.sha;else if(null!=e?.line){if(e.line>=0){const r=t.lines[e.line];i=r?.sha}}else i=(0,l.Ps)(t.commits.values())?.sha;if(!i)return void this.editor.setDecorations(g.I.gutterBlameHighlight,[]);const n=(0,o.DZ)(t.lines,(e=>e.sha===i?this.editor.document.validateRange(new r.Range(e.line-1,0,e.line-1,1073741824)):void 0));this.editor.setDecorations(g.I.gutterBlameHighlight,n)}async applyAvatarDecoration(e,t,i,r){let n=r.get(e.author.email??"");if(null==n){const t=(await e.getAvatarUri({defaultStyle:i,size:16})).toString(!0);n={contentText:"",height:"16px",width:"16px",textDecoration:`none;position:absolute;top:1px;left:5px;background:url(${encodeURI(t)});background-size:16px 16px;margin-left: 0 !important`},r.set(e.author.email??"",n)}t.renderOptions.after=n}}v([(0,c.cM)()],GutterBlameAnnotationProvider.prototype,"onProvideAnnotation",1),v([(0,c.cM)({args:!1})],GutterBlameAnnotationProvider.prototype,"selection",1)},34:(e,t,i)=>{i.d(t,{GutterChangesAnnotationProvider:()=>GutterChangesAnnotationProvider});var r=i(9496),n=i(1062),s=i(5148),o=i(1219),a=i(6004),c=i(6398),l=i(2022),h=i(623),u=Object.defineProperty,d=Object.getOwnPropertyDescriptor;const p=2**30;class GutterChangesAnnotationProvider extends l.H{constructor(e,t,i){super("changes",e,t),this.container=i}state;hoverProviderDisposable;mustReopen(e){return this.annotationContext?.sha!==e?.sha||this.annotationContext?.only!==e?.only}clear(){this.state=void 0,null!=this.hoverProviderDisposable&&(this.hoverProviderDisposable.dispose(),this.hoverProviderDisposable=void 0),super.clear()}selection(e){return Promise.resolve()}validate(){return Promise.resolve(!0)}async onProvideAnnotation(e){const t=(0,a.UH)();this.mustReopen(e)&&this.clear(),this.annotationContext=e;let i,n=this.trackedDocument.uri.sha,s=null!=e?.sha&&e.sha!==n?`${e.sha}^`:void 0,o=null==n&&null==s;if(o){let e=await this.container.git.getOldestUnpushedRefForFile(this.trackedDocument.uri.repoPath,this.trackedDocument.uri);if(null!=e)e=`${e}^`,i=await this.container.git.getCommitForFile(this.trackedDocument.uri.repoPath,this.trackedDocument.uri,{ref:e}),null!=i?null!=s?s=e:(n=e,s=""):o=!1;else{const e=await this.container.git.getStatusForFile(this.trackedDocument.uri.repoPath,this.trackedDocument.uri),t=e?.getPseudoCommits(this.container,await this.container.git.getCurrentUser(this.trackedDocument.uri.repoPath));t?.length?(i=await this.container.git.getCommitForFile(this.trackedDocument.uri.repoPath,this.trackedDocument.uri),n="HEAD"):this.trackedDocument.dirty?n="HEAD":o=!1}}if(!o){if(i=await this.container.git.getCommitForFile(this.trackedDocument.uri.repoPath,this.trackedDocument.uri,{ref:s??n}),null==i)return!1;null!=s||(n=`${i.ref}^`),s=i.ref}const l=(await Promise.all(null==s&&this.editor.document.isDirty?[this.container.git.getDiffForFileContents(this.trackedDocument.uri,n,this.editor.document.getText()),this.container.git.getDiffForFile(this.trackedDocument.uri,n,s)]:[this.container.git.getDiffForFile(this.trackedDocument.uri,n,s)])).filter((e=>Boolean(e)));if(!l?.length)return!1;const u=(0,c.k)(t),d=new Map,m=null!=e?.sha&&e?.only?await this.container.git.getBlame(this.trackedDocument.uri,this.editor?.document):void 0;let g;for(const t of l)for(const i of t.hunks){if(null!=m){let t=!0;const r=e.sha;for(let e=i.current.position.start-1;e<i.current.position.end;e++)m.lines[e]?.sha===r&&(t=!1);if(t)continue}let t=Math.max(i.current.position.start-2,-1),n=-1;for(const e of i.lines){if(n++,t++,"unchanged"===e.current?.state)continue;const s=this.editor.document.validateRange(new r.Range(new r.Position(t,0),new r.Position(t,p)));let o;if(null==g&&(g=new r.Selection(s.start,s.end)),null==e.current){const r=i.lines[n-1];if(null==e.previous||null!=r&&null==r.current){t--;continue}if(!(i.previous.count>i.current.count)){t--;continue}o="removed"}else if("added"===e.current?.state)o="removed"===e.previous?.state?"changed":"added";else if("removed"===e?.current.state){if(!(i.previous.count>i.current.count)){t--;continue}o="removed"}else o="changed";let a=d.get(o);null==a?(a={decorationType:"added"===o?h.I.changesLineAddedAnnotation:"removed"===o?h.I.changesLineDeletedAnnotation:h.I.changesLineChangedAnnotation,rangesOrOptions:[{range:s}]},d.set(o,a)):a.rangesOrOptions.push({range:s})}}return u?.restart({suffix:" to compute recent changes annotations"}),d.size&&(this.setDecorations([...d.values()]),u?.stop({suffix:" to apply all recent changes annotations"}),null!=g&&!1!==e?.selection&&(this.editor.selection=g,this.editor.revealRange(g,r.TextEditorRevealType.InCenterIfOutsideViewport))),this.state={commit:i,diffs:l},this.registerHoverProvider(),!0}registerHoverProvider(){const e=s.D.get("hovers");e.enabled&&e.annotations.enabled&&(this.hoverProviderDisposable=r.languages.registerHoverProvider({pattern:this.document.uri.fsPath},{provideHover:(e,t,i)=>this.provideHover(e,t,i)}))}async provideHover(e,t,i){if(null==this.state)return;if("line"!==s.D.get("hovers.annotations.over")&&0!==t.character)return;const{commit:o,diffs:a}=this.state;for(const i of a)for(const s of i.hunks){const i="changed"===s.state&&s.previous.count>s.current.count;if(t.line>=s.current.position.start-1&&t.line<=s.current.position.end-(i?0:1)){const a=await(0,n.yq)(o,this.trackedDocument.uri,t.line,s);if(null==a)return;return new r.Hover(a,e.validateRange(new r.Range(s.current.position.start-1,0,s.current.position.end-(i?0:1),p)))}}}}((e,t,i,r)=>{for(var n,s=r>1?void 0:r?d(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);r&&s&&u(t,i,s)})([(0,o.cM)()],GutterChangesAnnotationProvider.prototype,"onProvideAnnotation",1)},79:(e,t,i)=>{i.d(t,{GutterHeatmapBlameAnnotationProvider:()=>GutterHeatmapBlameAnnotationProvider});var r=i(9496),n=i(1219),s=i(6004),o=i(6398),a=i(248),c=i(8178),l=Object.defineProperty,h=Object.getOwnPropertyDescriptor;class GutterHeatmapBlameAnnotationProvider extends c.d{constructor(e,t,i){super("heatmap",e,t,i)}async onProvideAnnotation(e,t){const i=(0,s.UH)();this.annotationContext=e;const n=await this.getBlame();if(null==n)return!1;const c=(0,o.k)(i),l=new Map,h=this.getComputedHeatmap(n);let u;for(const e of n.lines){const t=e.line-1;u=n.commits.get(e.sha),null!=u&&(0,a.Lx)(u.date,h,new r.Range(t,0,t,0),l)}return c?.restart({suffix:" to compute heatmap annotations"}),l.size&&(this.setDecorations([...l.values()]),c?.stop({suffix:" to apply all heatmap annotations"})),!0}selection(e){return Promise.resolve()}}((e,t,i,r)=>{for(var n,s=r>1?void 0:r?h(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);r&&s&&l(t,i,s)})([(0,n.cM)()],GutterHeatmapBlameAnnotationProvider.prototype,"onProvideAnnotation",1)},8294:(e,t,i)=>{i.d(t,{AR:()=>ActionRunners,vj:()=>u});var r=i(9496),n=i(5255),s=i(9529),o=i(5148),a=i(2061),c=i(3620),l=i(2509);const h=["createPullRequest","openPullRequest","hover.commands"];const u="Built In";class ActionRunnerQuickPickItem{constructor(e,t){this.runner=e,this._label="string"==typeof e.label?e.label:e.label(t)}_label;get label(){return this._label}get detail(){return this.runner.name}}class NoActionRunnersQuickPickItem{runner;get label(){return"No actions were found"}get detail(){}}let d=0;class RegisteredActionRunner{constructor(e,t,i){this.type=e,this.runner=t,this.unregister=i,this.id=(1073741824===d?d=1:d++,d)}id;dispose(){this.unregister()}get name(){return this.runner.name}get label(){return this.runner.label}get order(){switch(this.type){case 0:return 0;case 1:return 1;case 2:return this.partnerId?1:2;case 3:return 3;default:return 100}}get partnerId(){return this.runner.partnerId}run(e){return this.runner.run(e)}}class ActionRunners{constructor(e){this.container=e;const t=[o.D.onDidChange((e=>{o.D.changed(e,"partners")&&this._updateAllContextKeys()}))];for(const e of h)t.push((0,s.xR)(`${n.Gh.ActionPrefix}${e}`,((e,t)=>this.run(e,t))));this._disposable=r.Disposable.from(...t)}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_actionRunners=new Map;_disposable;dispose(){this._disposable.dispose();for(const e of this._actionRunners.values())for(const t of e)t.dispose();this._actionRunners.clear()}count(e){return this.get(e)?.length??0}get(e){return t=o.D.get("partners"),null==(i=this._actionRunners.get(e))||0===i.length?void 0:null==t?i:i.filter((e=>null==e.partnerId||null!=e.partnerId&&!1!==t[e.partnerId]?.enabled));var t,i}has(e){return this.count(e)>0}register(e,t,i=2){let r=this._actionRunners.get(e);null==r&&(r=[],this._actionRunners.set(e,r));const n=e=>{this._updateContextKeys(e),this._onDidChange.fire(e)},s=this._actionRunners,o=new RegisteredActionRunner(i,t,(function(){if(1===r.length)s.delete(e),n(e);else{const e=r.indexOf(this);-1!==e&&r.splice(e,1)}}));return r.push(o),n(e),{dispose:()=>o.dispose()}}registerBuiltIn(e,t){return this.register(e,{...t,partnerId:void 0,name:u},0)}registerBuiltInPartner(e,t,i){return this.register(t,{...i,partnerId:e},1)}registerBuiltInPartnerInstaller(e,t,i){return this.register(t,{...i,partnerId:e,name:`${i.name} (Not Installed)`},3)}async run(e,t){let i,n=this.get(e.type);if(null!=n&&0!==n.length&&(null!=t&&(n=n.filter((e=>e.id===t))),0!==n.length)){if(n.length>1||n.every((e=>0!==e.type))){const t=n.sort(((e,t)=>e.order-t.order||(0,c.dm)(e.name,t.name))).map((t=>new ActionRunnerQuickPickItem(t,e)));0===t.length&&t.push(new NoActionRunnersQuickPickItem);const s=r.window.createQuickPick();s.ignoreFocusOut=(0,l.hE)();const o=[];try{const r=await new Promise((i=>{let r,n;switch(o.push(s.onDidHide((()=>i(void 0))),s.onDidAccept((()=>{0!==s.activeItems.length&&i(s.activeItems[0])}))),e.type){case"createPullRequest":r="Create Pull Request",n="Choose how to create a pull request";break;case"openPullRequest":r="Open Pull Request",n="Choose how to open the pull request";break;case"hover.commands":r="Need Help or Want to Collaborate?",n="Choose what you would like to do"}s.title=r,s.placeholder=n,s.matchOnDetail=!0,s.items=t,s.show()}));if(null==r)return;i=r.runner}finally{s.dispose(),o.forEach((e=>{e.dispose()}))}}else[i]=n;await(i?.run(e))}}async _updateContextKeys(e){await(0,a.v)(`gitlens:action:${e}`,this.count(e))}async _updateAllContextKeys(){for(const e of h)await this._updateContextKeys(e)}}},8388:(e,t,i)=>{i.d(t,{E3:()=>O,GV:()=>_,TU:()=>$,Wr:()=>E,cL:()=>f,oP:()=>A,x4:()=>S});var r=i(9496),n=i(4290),s=i(7759),o=i(2075),a=i(5148),c=i(2061),l=i(9796),h=i(3105),u=i(3620);const d=2**30;let p;const m=new Map,g=new r.EventEmitter;g.event((0,l.Ds)((()=>{const e=null!=p?[...(0,h.DZ)(p,(([e,t])=>null!=t.uri?[e,{uri:t.uri.toString(),timestamp:t.timestamp}]:void 0))]:void 0;s.W.instance.storage.store("avatars",e)}),1e3));const f=g.event,w="00000000000000000000000000000000",v=new Map,y=6e4,b=864e5,C=[6048e5,y,3e5,6e5,36e5,b,6048e5];function A(e,t,i){return P(e,t,i)}function S(e,t){return P(e,void 0,{...t,cached:!0})}function P(e,t,i){R(p);const o=2*(i?.size??16);if(!e){const e=k(`${w}:${o}`,void 0,o,w,i?.defaultStyle);return e.uri??e.fallback}const a=(0,n.FB)(e.trim().toLowerCase()),l=`${a}:${o}`,h=k(l,e,o,a,i?.defaultStyle);if(null!=h.uri)return h.uri;if(!i?.cached&&null!=t&&(0,c.fw)("gitlens:hasConnectedRemotes")){let i=m.get(l);return null==i&&function(e){return Date.now()>=e.timestamp+C[Math.min(e.retries,C.length-1)]}(h)&&(i=async function(e,t,i,o,{size:a=16}={}){R(p);try{let t;if("string"!=typeof o){const e=await s.W.instance.git.getBestRemoteWithRichProvider(o.repoPath);t=await(e?.provider.getAccountForCommit(o.ref,{avatarSize:a}))}return null==t?.avatarUrl?(e.uri=void 0,e.timestamp=d,void(e.retries=0)):(e.uri=r.Uri.parse(t.avatarUrl),e.timestamp=Date.now(),e.retries=0,null!=t.email&&(0,u.qq)(i,t.email)&&p.set(`${(0,n.FB)(t.email.trim().toLowerCase())}:${a}`,{...e}),g.fire({email:i}),e.uri)}catch{return e.uri=void 0,e.timestamp=Date.now(),void e.retries++}}(h,0,e,t,{size:o}).then((e=>e??h.uri??h.fallback)),m.set(l,i.finally((()=>m.delete(l))))),i??h.fallback}return i?.cached?h.uri:h.uri??h.fallback}function k(e,t,i,r,n){let s=p.get(e);return null==s?(s={uri:null!=t&&0!==t.length?T(t,i):void 0,fallback:D(r,i,n),timestamp:0,retries:0},p.set(e,s)):null==s.fallback&&(s.fallback=D(r,i,n)),s}function R(e){if(null==e){const e=s.W.instance.storage.get("avatars")?.map((([e,t])=>[e,{uri:r.Uri.parse(t.uri),timestamp:t.timestamp,retries:0}]));p=new Map(e)}}function D(e,t,i){return r.Uri.parse(`https://www.gravatar.com/avatar/${e}?s=${t}&d=${i??function(){null==I&&(I=a.D.get("defaultGravatarsStyle",void 0,"robohash"));return I}()}`)}function _(e,t,i){return D((0,n.FB)(e.trim().toLowerCase()),t,i)}function T(e,t=16){const i=(0,o.at)(e);if(null!=i&&(0,u.qq)(i.authority,"github.com"))return r.Uri.parse(`https://avatars.githubusercontent.com/${i.userId?`u/${i.userId}`:i.login}?size=${t}`)}const F=new Map([["online","#28ca42"],["away","#cecece"],["busy","#ca5628"],["dnd","#ca5628"],["offline","#cecece"]]);function $(e){let t=v.get(e);if(null==t){const i=(0,u.US)(`<?xml version="1.0" encoding="utf-8"?>\n<svg xmlns="http://www.w3.org/2000/svg" width="4" height="16" viewBox="0 0 4 16">\n\t<circle cx="2" cy="14" r="2" fill="${F.get(e)}"/>\n</svg>`);t=encodeURI(`data:image/svg+xml;base64,${i}`),v.set(e,t)}return t}function O(e){switch(e){case"all":s.W.instance.storage.delete("avatars"),p?.clear(),m.clear();break;case"failed":for(const e of p?.values()??[])null==e.uri&&(e.timestamp=0,e.retries=0);break;case"fallback":for(const e of p?.values()??[])e.fallback=void 0}}let I;function E(e){I=e,O("fallback")}},5183:(e,t,i)=>{i.d(t,{GitCodeLensProvider:()=>GitCodeLensProvider});var r=i(9496),n=i(2540),s=i(5255),o=i(6503),a=i(9529),c=i(5148),l=i(9796),h=i(3105),u=i(4336),d=i(3620),p=i(2509);class GitRecentChangeCodeLens extends r.CodeLens{constructor(e,t,i,r,n,s,o,a,c,l){super(a,l),this.languageId=e,this.symbol=t,this.uri=i,this.dateFormat=r,this.blame=n,this.blameRange=s,this.isFullRange=o,this.desiredCommand=c}getBlame(){return this.blame?.()}}class GitAuthorsCodeLens extends r.CodeLens{constructor(e,t,i,r,n,s,o,a){super(o),this.languageId=e,this.symbol=t,this.uri=i,this.blame=r,this.blameRange=n,this.isFullRange=s,this.desiredCommand=a}getBlame(){return this.blame()}}class GitCodeLensProvider{constructor(e){this.container=e}static selector=[{scheme:s.sN.File},{scheme:s.sN.Git},{scheme:s.sN.GitLens},{scheme:s.sN.PRs},{scheme:s.sN.Vsls},{scheme:s.sN.VslsScc},{scheme:s.sN.Virtual},{scheme:s.sN.GitHub}];_onDidChangeCodeLenses=new r.EventEmitter;get onDidChangeCodeLenses(){return this._onDidChangeCodeLenses.event}reset(e){this._onDidChangeCodeLenses.fire()}async provideCodeLenses(e,t){if(e.isDirty&&(0,p.pt)(e.uri))return[];const i=await this.container.tracker.getOrAdd(e);if(!i.isBlameable)return[];let n=!1;if(e.isDirty)if(i.isDirtyIdle){const t=c.D.get("advanced.blame.sizeThresholdAfterEdit");t>0&&e.lineCount>t&&(n=!0)}else n=!0;const s=c.D.get("codeLens",e);let o={...s.scopesByLanguage?.find((t=>t.language?.toLowerCase()===e.languageId))};null==o&&(o={language:e.languageId}),null==o.scopes&&(o.scopes=s.scopes),null==o.symbolScopes&&(o.symbolScopes=s.symbolScopes),o.symbolScopes=null!=o.symbolScopes?o.symbolScopes=o.symbolScopes.map((e=>e.toLowerCase())):[];const h=[],d=i.uri;let m,g;if(n){if(1!==o.scopes.length||!o.scopes.includes("document")){let t;if([t,g]=await Promise.all([this.container.git.isTracked(d),(0,a.dO)("vscode.executeDocumentSymbolProvider",e.uri)]),!t)return h}}else{if(t.isCancellationRequested)return h;if(1===o.scopes.length&&o.scopes.includes("document")?m=await this.container.git.getBlame(d,e):[m,g]=await Promise.all([this.container.git.getBlame(d,e),(0,a.dO)("vscode.executeDocumentSymbolProvider",e.uri)]),null==m||0===m?.lines.length)return h}if(t.isCancellationRequested)return h;const f=(0,l.IH)((()=>e.validateRange(new r.Range(0,0,1e6,1e6)))),w=n?{command:void 0,title:this.getDirtyTitle(s)}:void 0;if(void 0!==g){u.Yd.log("GitCodeLensProvider.provideCodeLenses:",`${g.length} symbol(s) found`);for(const t of g)this.provideCodeLens(h,e,t,o,f,m,d,s,n,w)}if((o.scopes.includes("document")||o.symbolScopes.includes("file"))&&!o.symbolScopes.includes("!file")&&null==h.find((e=>0===e.range.start.line&&0===e.range.end.line))){const t=f();let i;if(n||s.recentChange.enabled){n||(i=(0,l.IH)((()=>this.container.git.getBlameRange(m,d,t))));const o=new r.SymbolInformation(d.fileName,r.SymbolKind.File,"",new r.Location(d.documentUri(),new r.Range(0,0,0,t.start.character)));h.push(new GitRecentChangeCodeLens(e.languageId,o,d,s.dateFormat,i,t,!0,D(o),s.recentChange.command,w))}if(!n&&s.authors.enabled){void 0===i&&(i=(0,l.IH)((()=>this.container.git.getBlameRange(m,d,t))));const n=new r.SymbolInformation(d.fileName,r.SymbolKind.File,"",new r.Location(d.documentUri(),new r.Range(0,1,0,t.start.character)));h.push(new GitAuthorsCodeLens(e.languageId,n,d,i,t,!0,D(n),s.authors.command))}}return h}getValidateSymbolRange(e,t,i,n){let s,o=!1;const a=r.SymbolKind[e.kind].toLowerCase();switch(e.kind){case r.SymbolKind.File:(t.scopes.includes("containers")||t.symbolScopes.includes(a))&&(o=!t.symbolScopes.includes(`!${a}`)),o&&(s=i());break;case r.SymbolKind.Package:(t.scopes.includes("containers")||t.symbolScopes.includes(a))&&(o=!t.symbolScopes.includes(`!${a}`)),o&&(s=D(e),0===s.start.line&&0===s.end.line&&(s=i()));break;case r.SymbolKind.Class:case r.SymbolKind.Interface:case r.SymbolKind.Module:case r.SymbolKind.Namespace:case r.SymbolKind.Struct:(t.scopes.includes("containers")||t.symbolScopes.includes(a))&&(s=D(e),o=!t.symbolScopes.includes(`!${a}`)&&(n||!s.isSingleLine));break;case r.SymbolKind.Constructor:case r.SymbolKind.Enum:case r.SymbolKind.Function:case r.SymbolKind.Method:case r.SymbolKind.Property:(t.scopes.includes("blocks")||t.symbolScopes.includes(a))&&(s=D(e),o=!t.symbolScopes.includes(`!${a}`)&&(n||!s.isSingleLine));break;case r.SymbolKind.String:(t.symbolScopes.includes(a)||"markdown"===t.language&&t.scopes.includes("containers"))&&(s=D(e),o=!t.symbolScopes.includes(`!${a}`)&&(n||!s.isSingleLine));break;default:t.symbolScopes.includes(a)&&(s=D(e),o=!t.symbolScopes.includes(`!${a}`)&&(n||!s.isSingleLine))}return o?s??D(e):void 0}provideCodeLens(e,t,i,n,s,o,a,c,h,u){try{const d=this.getValidateSymbolRange(i,n,s,c.includeSingleLineSymbols);if(void 0===d)return;const p=t.lineAt(D(i).start);if(e.length&&e[e.length-1].range.start.line===p.lineNumber)return;let m,g=0;if((h||c.recentChange.enabled)&&(h||(m=(0,l.IH)((()=>this.container.git.getBlameRange(o,a,d)))),e.push(new GitRecentChangeCodeLens(t.languageId,i,a,c.dateFormat,m,d,!1,p.range.with(new r.Position(p.range.start.line,g)),c.recentChange.command,u)),g++),c.authors.enabled){let n=!d.isSingleLine;if(!n&&"csharp"===t.languageId)switch(i.kind){case r.SymbolKind.File:break;case r.SymbolKind.Package:case r.SymbolKind.Module:case r.SymbolKind.Namespace:case r.SymbolKind.Class:case r.SymbolKind.Interface:case r.SymbolKind.Constructor:case r.SymbolKind.Method:case r.SymbolKind.Function:case r.SymbolKind.Enum:n=!0}n&&!h&&(void 0===m&&(m=(0,l.IH)((()=>this.container.git.getBlameRange(o,a,d)))),e.push(new GitAuthorsCodeLens(t.languageId,i,a,m,d,!1,p.range.with(new r.Position(p.range.start.line,g)),c.authors.command)))}}finally{if(_(i))for(const r of i.children)this.provideCodeLens(e,t,r,n,s,o,a,c,h,u)}}resolveCodeLens(e,t){return e instanceof GitRecentChangeCodeLens?this.resolveGitRecentChangeCodeLens(e,t):e instanceof GitAuthorsCodeLens?this.resolveGitAuthorsCodeLens(e,t):Promise.reject(void 0)}resolveGitRecentChangeCodeLens(e,t){const i=e.getBlame();if(null==i)return R("Unknown, (Blame failed)",e);const s=(0,h.Ps)(i.commits.values());if(null==s)return R("Unknown, (Blame failed)",e);let o=`${s.author.name}, ${null==e.dateFormat?s.formattedDate:s.formatDate(e.dateFormat)}`;if(c.D.get("debug")&&(o+=` [${e.languageId}: ${r.SymbolKind[e.symbol.kind]}(${e.range.start.character}-${e.range.end.character}${e.symbol.containerName?`|${e.symbol.containerName}`:""}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Commit (${s.shortSha})]`),!1===e.desiredCommand)return R(o,e);switch(e.desiredCommand){case n.N4.CopyRemoteCommitUrl:return g(o,e,s,!0);case n.N4.CopyRemoteFileUrl:return f(o,e,s,!0);case n.N4.DiffWithPrevious:return m(o,e,s);case n.N4.OpenCommitOnRemote:return g(o,e,s);case n.N4.OpenFileOnRemote:return f(o,e,s);case n.N4.RevealCommitInView:return w(o,e,s);case n.N4.ShowCommitsInView:return v(o,e,i,s);case n.N4.ShowQuickCommitDetails:return y(o,e,s);case n.N4.ShowQuickCommitFileDetails:return b(o,e,s);case n.N4.ShowQuickCurrentBranchHistory:return C(o,e);case n.N4.ShowQuickFileHistory:return A(o,e);case n.N4.ToggleFileBlame:return S(o,e);case n.N4.ToggleFileChanges:return P(o,e,s);case n.N4.ToggleFileChangesOnly:return P(o,e,s,!0);case n.N4.ToggleFileHeatmap:return k(o,e);default:return e}}resolveGitAuthorsCodeLens(e,t){const i=e.getBlame();if(null==i)return R("? authors (Blame failed)",e);const s=i.authors.size,o=(0,h.Ps)(i.authors.values())?.name??"Unknown";let a=`${(0,d._6)("author",s,{zero:"?"})} (${o}${s>1?" and others":""})`;if(c.D.get("debug")&&(a+=` [${e.languageId}: ${r.SymbolKind[e.symbol.kind]}(${e.range.start.character}-${e.range.end.character}${e.symbol.containerName?`|${e.symbol.containerName}`:""}), Lines (${e.blameRange.start.line+1}-${e.blameRange.end.line+1}), Authors (${(0,h.v_)((0,h.UI)(i.authors.values(),(e=>e.name)),", ")})]`),!1===e.desiredCommand)return R(a,e);const l=(0,h.sE)(i.commits.values(),(e=>e.author.name===o))??(0,h.Ps)(i.commits.values());if(null==l)return R(a,e);switch(e.desiredCommand){case n.N4.CopyRemoteCommitUrl:return g(a,e,l,!0);case n.N4.CopyRemoteFileUrl:return f(a,e,l,!0);case n.N4.DiffWithPrevious:return m(a,e,l);case n.N4.OpenCommitOnRemote:return g(a,e,l);case n.N4.OpenFileOnRemote:return f(a,e,l);case n.N4.RevealCommitInView:return w(a,e,l);case n.N4.ShowCommitsInView:return v(a,e,i);case n.N4.ShowQuickCommitDetails:return y(a,e,l);case n.N4.ShowQuickCommitFileDetails:return b(a,e,l);case n.N4.ShowQuickCurrentBranchHistory:return C(a,e);case n.N4.ShowQuickFileHistory:return A(a,e);case n.N4.ToggleFileBlame:return S(a,e);case n.N4.ToggleFileChanges:return P(a,e,l);case n.N4.ToggleFileChangesOnly:return P(a,e,l,!0);case n.N4.ToggleFileHeatmap:return k(a,e);default:return e}}getDirtyTitle(e){return e.recentChange.enabled&&e.authors.enabled?c.D.get("strings.codeLens.unsavedChanges.recentChangeAndAuthors"):e.recentChange.enabled?c.D.get("strings.codeLens.unsavedChanges.recentChangeOnly"):c.D.get("strings.codeLens.unsavedChanges.authorsOnly")}}function m(e,t,i){return t.command=(0,a._N)({title:e,command:s.Gh.DiffWithPrevious,arguments:[void 0,{commit:i,uri:t.uri.toFileUri()}]}),t}function g(e,t,i,r=!1){return t.command=(0,a._N)({title:e,command:s.Gh.OpenOnRemote,arguments:[{resource:{type:o.J.Commit,sha:i.sha},repoPath:i.repoPath,clipboard:r}]}),t}function f(e,t,i,r=!1){return t.command=(0,a._N)({title:e,command:s.Gh.OpenOnRemote,arguments:[{resource:{type:o.J.Revision,fileName:i.file?.path??"",sha:i.sha},repoPath:i.repoPath,clipboard:r}]}),t}function w(e,t,i){return t.command=(0,a._N)({title:e,command:i?.isUncommitted?"":n.N4.RevealCommitInView,arguments:[t.uri.toFileUri(),{commit:i,sha:void 0===i?void 0:i.sha}]}),t}function v(e,t,i,r){let n;return n=void 0===r?[...(0,h.DZ)(i.commits.values(),(e=>e.isUncommitted?void 0:e.ref))]:[r.ref],t.command=(0,a._N)({title:e,command:0===n.length?"":s.Gh.ShowCommitsInView,arguments:[{repoPath:i.repoPath,refs:n}]}),t}function y(e,t,i){return t.command=(0,a._N)({title:e,command:i?.isUncommitted?"":n.N4.ShowQuickCommitDetails,arguments:[t.uri.toFileUri(),{commit:i,sha:void 0===i?void 0:i.sha}]}),t}function b(e,t,i){return t.command=(0,a._N)({title:e,command:i?.isUncommitted?"":n.N4.ShowQuickCommitFileDetails,arguments:[t.uri.toFileUri(),{commit:i,sha:void 0===i?void 0:i.sha}]}),t}function C(e,t){return t.command=(0,a._N)({title:e,command:n.N4.ShowQuickCurrentBranchHistory,arguments:[t.uri.toFileUri()]}),t}function A(e,t){return t.command=(0,a._N)({title:e,command:n.N4.ShowQuickFileHistory,arguments:[t.uri.toFileUri(),{range:t.isFullRange?void 0:t.blameRange}]}),t}function S(e,t){return t.command=(0,a._N)({title:e,command:s.Gh.ToggleFileBlame,arguments:[t.uri.toFileUri()]}),t}function P(e,t,i,r){return t.command=(0,a._N)({title:e,command:s.Gh.ToggleFileChanges,arguments:[t.uri.toFileUri(),{type:"changes",context:{sha:i.sha,only:r,selection:!1}}]}),t}function k(e,t){return t.command=(0,a._N)({title:e,command:s.Gh.ToggleFileHeatmap,arguments:[t.uri.toFileUri()]}),t}function R(e,t){return t.command={title:e,command:""},t}function D(e){return _(e)?e.range:e.location.range}function _(e){return(0,l.is)(e,"children")}},7139:(e,t,i)=>{i.d(t,{Bu:()=>_,C$:()=>P,DW:()=>S,E9:()=>y,F4:()=>A,Lk:()=>ActiveEditorCachedCommand,Mg:()=>v,O$:()=>C,P:()=>$,Qo:()=>f,SX:()=>m,_5:()=>D,_l:()=>EditorCommand,d$:()=>b,en:()=>w,jT:()=>g,l7:()=>R,l8:()=>I,mY:()=>Command,pT:()=>k,pu:()=>ActiveEditorCommand});var r=i(9496),n=i(5367),s=i(6450),o=i(1719),a=i(3050),c=i(3646),l=i(9502),h=i(1907),u=i(9529),d=i(9796),p=i(6922);function m(e,t){return t?.document?.uri??e}function g(e){return"timeline-item:git"===e.type}function f(e){return"viewItem"===e.type&&(0,n.BF)(e.node.branch)}function w(e){return"viewItem"===e.type&&(0,s.f_)(e.node.commit)}function v(e){return"viewItem"===e.type&&o.V.is(e.node.contributor)}function y(e){if("viewItem"!==e.type)return!1;const t=e.node;return null!=t.file&&(null!=t.file.repoPath||null!=t.repoPath)}function b(e){if("viewItem"!==e.type)return!1;const t=e.node;return null!=t.file&&(0,s.f_)(t.commit)&&(null!=t.file.repoPath||null!=t.repoPath)}function C(e){if("viewItem"!==e.type)return!1;const t=e.node;return null!=t.file&&null!=t.ref1&&null!=t.ref2&&(null!=t.file.repoPath||null!=t.repoPath)}function A(e){return"viewItem"===e.type&&("string"==typeof e.node.compareRef?.ref&&"string"==typeof e.node.compareWithRef?.ref)}function S(e){return"viewItem"===e.type&&e.node instanceof p.bT&&e.node instanceof p.RW}function P(e){return"viewItem"===e.type&&a.ss.is(e.node.remote)}function k(e){return"viewItem"===e.type&&e.node.repo instanceof c._j}function R(e){return"viewItem"===e.type&&"string"==typeof e.node.repoPath}function D(e){return"viewItem"===e.type&&(0,l.YR)(e.node.tag)}function _(e){if("viewItem"!==e.type)return!1;const t=e.node.workspace;return t instanceof h.CH||t instanceof h.qP}function T(e){return null!=e&&(null!=e.id&&null!=e.label&&null!=e.resourceStates&&Array.isArray(e.resourceStates))}function F(e){return null!=e&&null!=e.resourceUri}class Command{static getMarkdownCommandArgsCore(e,t){return`command:${e}?${encodeURIComponent(JSON.stringify(t))}`}contextParsingOptions={expectsEditor:!1};_disposable;constructor(e){if("string"==typeof e)return void(this._disposable=(0,u.xR)(e,((...t)=>this._execute(e,...t)),this));const t=e.map((e=>(0,u.xR)(e,((...t)=>this._execute(e,...t)),this)));this._disposable=r.Disposable.from(...t)}dispose(){this._disposable.dispose()}preExecute(e,...t){return this.execute(...t)}_execute(e,...t){const[i,r]=$(e,{...this.contextParsingOptions},...t);return Array.isArray(i)?(0,d.df)(this.preExecute,i.map((e=>[e,...r])),this):this.preExecute(i,...r)}}function $(e,t,...i){let n,s=i[0];if(t?.expectsEditor)if((null==s||null!=s.id&&null!=s.document?.uri)&&(n=s,s=(i=i.slice(1))[0]),i.length>0&&(null==s||s instanceof r.Uri)){const[t,...s]=i;if(null!=t){null!=n||t.toString()!==r.window.activeTextEditor?.document.uri.toString()&&!e.endsWith("InDiffLeft")||(n=r.window.activeTextEditor);const i=s[0];return null!=i&&Array.isArray(i)&&0!==i.length&&i[0]instanceof r.Uri?[{command:e,type:"uris",editor:n,uri:t,uris:i},s.slice(1)]:[{command:e,type:"uri",editor:n,uri:t},s]}i=i.slice(1)}else if(null==n){if(null!=s&&"object"==typeof s&&"lineNumber"in s&&"uri"in s){const[,...t]=i;return[{command:e,type:"editorLine",editor:void 0,line:s.lineNumber-1,uri:s.uri},t]}n=r.window.activeTextEditor}if(s instanceof p.Re){let[t,...r]=i;if(s=r[0],Array.isArray(s)&&s[0]instanceof p.Re){let i;[i,...r]=r;const n=[];for(const r of i)r?.constructor===t.constructor&&n.push({command:e,type:"viewItem",node:r,uri:r.uri});return[n,r]}return[{command:e,type:"viewItem",node:t,uri:t.uri},r]}if(F(s)){const t=[];let r=0;for(const e of i){if(!F(e))break;r++,t.push(e)}return[{command:e,type:"scm-states",scmResourceStates:t,uri:t[0].resourceUri},i.slice(r)]}if(T(s)){const t=[];let r=0;for(const e of i){if(!T(e))break;r++,t.push(e)}return[{command:e,type:"scm-groups",scmResourceGroups:t},i.slice(r)]}if(null!=(o=s)&&function(e){return null!=e&&null!=e.timestamp&&null!=e.label}(o)&&null!=o.ref&&null!=o.previousRef&&null!=o.message){const[t,r,...n]=i;return[{command:e,type:"timeline-item:git",item:t,uri:r},n]}var o,a;if(null!=(a=s)&&null!=a.id&&null!=a.rootUri&&null!=a.inputBox&&null!=a.statusBarCommands){const[t,...r]=i;return[{command:e,type:"scm",scm:t},r]}return[{command:e,type:"unknown",editor:n,uri:n?.document.uri},i]}class ActiveEditorCommand extends Command{contextParsingOptions={expectsEditor:!0};preExecute(e,...t){return this.execute(e.editor,e.uri,...t)}_execute(e,...t){return super._execute(e,void 0,...t)}}let O;function I(){return O}class ActiveEditorCachedCommand extends ActiveEditorCommand{_execute(e,...t){return O={command:e,args:t},super._execute(e,...t)}}class EditorCommand{_disposable;constructor(e){Array.isArray(e)||(e=[e]);const t=[];for(const i of e)t.push(r.commands.registerTextEditorCommand(i,((e,t,...r)=>this.executeCore(i,e,t,...r)),this));this._disposable=r.Disposable.from(...t)}dispose(){this._disposable.dispose()}executeCore(e,t,i,...r){return this.execute(t,i,...r)}}},1848:(e,t,i)=>{i.d(t,{V:()=>g});var r=i(9496),n=i(5255),s=i(6450),o=i(439),a=i(4321),c=i(7925),l=i(9529),h=i(4336),u=i(3700),d=i(7139),p=Object.defineProperty,m=Object.getOwnPropertyDescriptor;let g=class extends d.mY{constructor(e){super(n.Gh.DiffWith),this.container=e}static getMarkdownCommandArgs(e,t){let i;if((0,s.f_)(e)){const r=e;if(null==r.file||null==r.unresolvedPreviousSha)throw new Error("Commit has no file");i=r.isUncommitted?{repoPath:r.repoPath,lhs:{sha:"HEAD",uri:r.file.uri},rhs:{sha:"",uri:r.file.uri},line:t}:{repoPath:r.repoPath,lhs:{sha:r.unresolvedPreviousSha,uri:r.file.originalUri??r.file.uri},rhs:{sha:r.sha,uri:r.file.uri},line:t}}else i=e;return super.getMarkdownCommandArgsCore(n.Gh.DiffWith,i)}async execute(e){if(null!=e?.lhs&&null!=e?.rhs&&null!=(e={...e,lhs:{...e.lhs},rhs:{...e.rhs},showOptions:null==e.showOptions?void 0:{...e.showOptions}}).repoPath)try{let t=e.lhs.sha,i=e.rhs.sha;if([e.lhs.sha,e.rhs.sha]=await Promise.all([await this.container.git.resolveReference(e.repoPath,e.lhs.sha,e.lhs.uri,{timeout:(0,a.yo)(e.lhs.sha)?100:void 0}),await this.container.git.resolveReference(e.repoPath,e.rhs.sha,e.rhs.uri,{timeout:(0,a.yo)(e.rhs.sha)?100:void 0})]),e.lhs.sha!==o.Ii&&(t=e.lhs.sha),e.rhs.sha&&e.rhs.sha!==o.Ii){const t=await this.container.git.getFileStatusForCommit(e.repoPath,e.rhs.uri,e.rhs.sha);"D"===t?.status?e.rhs.sha=o.Ii:i=e.rhs.sha,"A"===t?.status&&e.lhs.sha.endsWith("^")&&(e.lhs.sha=o.Ii)}const[s,c]=await Promise.all([this.container.git.getBestRevisionUri(e.repoPath,e.lhs.uri.fsPath,e.lhs.sha),this.container.git.getBestRevisionUri(e.repoPath,e.rhs.uri.fsPath,e.rhs.sha)]);let h=(0,a.zL)(i,{strings:{uncommitted:"Working Tree"}});null==c?h=(0,a.l3)(e.rhs.sha)?"deleted":0===h.length&&e.rhs.sha===o.Ii?"not in Working Tree":"deleted"+(0===h.length?"":` in ${h}`):null==s&&(h="added"+(0===h.length?"":` in ${h}`));let d=e.lhs.sha!==o.Ii?(0,a.zL)(t):"";null==s&&0===e.rhs.sha.length&&(null!=c?(d=0===d.length?"":`not in ${d}`,h=""):d="deleted"+(0===d.length?"":` in ${d}`)),null!=e.lhs.title||null==s&&0===d.length||(e.lhs.title=`${(0,u.EZ)(e.lhs.uri.fsPath)}${d?` (${d})`:""}`),null==e.rhs.title&&(e.rhs.title=`${(0,u.EZ)(e.rhs.uri.fsPath)}${h?` (${h})`:""}`);const p=null!=e.lhs.title&&null!=e.rhs.title?`${e.lhs.title} ${n.NE.ArrowLeftRightLong} ${e.rhs.title}`:e.lhs.title??e.rhs.title;null==e.showOptions&&(e.showOptions={}),null==e.showOptions.viewColumn&&(e.showOptions.viewColumn=r.ViewColumn.Active),null!=e.line&&0!==e.line&&(e.showOptions.selection=new r.Range(e.line,0,e.line,0)),await(0,l.dO)("vscode.diff",s??this.container.git.getRevisionUri(o.Ii,e.lhs.uri.fsPath,e.repoPath),c??this.container.git.getRevisionUri(o.Ii,e.rhs.uri.fsPath,e.repoPath),p,e.showOptions)}catch(e){h.Yd.error(e,"DiffWithCommand","getVersionedFile"),(0,c.W8)("Unable to open compare")}}};g=((e,t,i,r)=>{for(var n,s=r>1?void 0:r?m(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&p(t,i,s),s})([(0,l.WD)()],g)},2967:(e,t,i)=>{i.d(t,{K:()=>PickCommandStep,I:()=>le});var r=i(5148),n=i(2061),s=i(9496),o=i(4321),a=i(3646);function c(e,t,i,r){return{...i,item:t,picked:l(e,t),context:r}}function l(e,t){return void 0===t?0===e.length:Array.isArray(t)?0===t.length?0===e.length:t.every((t=>e.includes(t))):e.includes(t)}var h=i(3620),u=i(4239),d=i(847);function p(e){if(!(e.repo instanceof a._j&&"create"===e.subcommand))throw new Error("Missing repository")}function m(e){if(!(e.repo instanceof a._j&&"delete"===e.subcommand))throw new Error("Missing repository")}function g(e){if(!(e.repo instanceof a._j&&"rename"===e.subcommand))throw new Error("Missing repository")}function f(e){if(!Array.isArray(e.references))throw new Error("Missing branches")}const w=new Map([["create","Create"],["delete","Delete"],["rename","Rename"]]);function v(e,t){return null==t?e:`${w.get(t)} ${e}`}class BranchGitCommand extends u.tR{subcommand;constructor(e,t){super(e,"branch","branch","Branch",{description:"create, rename, or delete branches"});let i=0;if(null!=t?.state?.subcommand)switch(i++,t?.state.subcommand){case"create":case"rename":null!=t.state.reference&&i++,null!=t.state.name&&i++;break;case"delete":null==t.state.references||Array.isArray(t.state.references)&&0===t.state.references.length||i++}null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"delete"!==this.subcommand&&"rename"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async*steps(e){const t={associatedView:this.container.branchesView,repos:this.container.git.openRepositories,showTags:!1,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;const t=yield*this.pickSubcommandStep(e);if(t===u.Vd)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=v("delete"===e.subcommand?"Branches":this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)continue;e.repo=i}switch(e.subcommand){case"create":p(e),yield*this.createCommandSteps(e,t),e.name=void 0;break;case"delete":m(e),yield*this.deleteCommandSteps(e,t);break;case"rename":g(e),yield*this.renameCommandSteps(e,t),e.name=void 0;break;default:(0,u.uZ)(e)}i&&e.counter--}return e.counter<0?u.Vd:void 0}*pickSubcommandStep(e){const t=(0,u.xf)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"create",description:"creates a new branch",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified branches",picked:"delete"===e.subcommand,item:"delete"},{label:"rename",description:"renames the specified branch",picked:"rename"===e.subcommand,item:"rename"}],buttons:[s.QuickInputButtons.Back]}),i=yield t;return(0,u.i9)(t,e,i)?i[0].item:u.Vd}async*createCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.Yv)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new branch from`,picked:e.reference?.ref??(await e.repo.getBranch())?.ref,titleContext:" from",value:(0,o.FT)(e.reference)?e.reference.ref:void 0});if(i===u.Vd)break;e.reference=i}if(e.counter<4||null==e.name){const i=yield*(0,d.f6)(e,t,{placeholder:"Please provide a name for the new branch",titleContext:` from ${(0,o.Wh)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:e.name??(0,o.Av)(e.reference)});if(i===u.Vd)continue;e.name=i}if(this.confirm(e.confirm)){const i=yield*this.createCommandConfirmStep(e,t);if(i===u.Vd)continue;e.flags=i}(0,u.uZ)(e),e.flags.includes("--switch")?await e.repo.switch(e.reference.ref,{createBranch:e.name}):e.repo.branch(...e.flags,e.name,e.reference.ref)}}*createCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:t.title,detail:`Will create a new branch named ${e.name} from ${(0,o.Wh)(e.reference)}`}),c(e.flags,["--switch"],{label:`${t.title} and Switch`,description:"--switch",detail:`Will create and switch to a new branch named ${e.name} from ${(0,o.Wh)(e.reference)}`})],t),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}async*deleteCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(null==e.references||Array.isArray(e.references)||(e.references=[e.references]),e.counter<3||null==e.references||Array.isArray(e.references)&&0===e.references.length){t.title=v("Branches",e.subcommand);const i=yield*(0,d.FO)(e,t,{filter:e=>!e.current,picked:e.references?.map((e=>e.ref)),placeholder:"Choose branches to delete",sort:{current:!1,missingUpstream:!0}});if(i===u.Vd)break;e.references=i}t.title=v((0,h._6)("Branch",e.references.length,{only:!0,plural:"Branches"}),e.subcommand),f(e);const i=yield*this.deleteCommandConfirmStep(e,t);i!==u.Vd&&(e.flags=i,(0,u.uZ)(e),e.repo.branchDelete(e.references,{force:e.flags.includes("--force"),remote:e.flags.includes("--remotes")}))}}*deleteCommandConfirmStep(e,t){const i=[c(e.flags,[],{label:t.title,detail:`Will delete ${(0,o.Wh)(e.references)}`})];e.references.every((e=>e.remote))||(i.push(c(e.flags,["--force"],{label:`Force ${t.title}`,description:"--force",detail:`Will forcibly delete ${(0,o.Wh)(e.references)}`})),e.references.some((e=>null!=e.upstream))&&i.push(c(e.flags,["--remotes"],{label:`${t.title} & Remote${e.references.filter((e=>!e.remote)).length>1?"s":""}`,description:"--remotes",detail:`Will delete ${(0,o.Wh)(e.references)} and any remote tracking branches`}),c(e.flags,["--force","--remotes"],{label:`Force ${t.title} & Remote${e.references.filter((e=>!e.remote)).length>1?"s":""}`,description:"--force --remotes",detail:`Will forcibly delete ${(0,o.Wh)(e.references)} and any remote tracking branches`})));const r=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),i,t),n=yield r;return(0,u.i9)(r,e,n)?n[0].item:u.Vd}async*renameCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.sd)(e,t,{filter:e=>!e.remote,picked:e.reference?.ref,placeholder:"Choose a branch to rename"});if(i===u.Vd)break;e.reference=i}if(e.counter<4||null==e.name){const i=yield*(0,d.f6)(e,t,{placeholder:`Please provide a new name for ${(0,o.Wh)(e.reference,{icon:!1})}`,titleContext:` ${(0,o.Wh)(e.reference,!1)}`,value:e.name??e.reference.name});if(i===u.Vd)continue;e.name=i}const i=yield*this.renameCommandConfirmStep(e,t);i!==u.Vd&&(e.flags=i,(0,u.uZ)(e),e.repo.branch(...e.flags,e.reference.ref,e.name))}}*renameCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,["-m"],{label:t.title,detail:`Will rename ${(0,o.Wh)(e.reference)} to ${e.name}`})],t),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}}class CherryPickGitCommand extends u.tR{constructor(e,t){super(e,"cherry-pick","cherry-pick","Cherry Pick",{description:"integrates changes from specified commits into the current branch"});let i=0;null!=t?.state?.repo&&i++,null==t?.state?.references||Array.isArray(t.state.references)&&0===t.state.references.length||i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.cherryPick(...e.flags,...e.references.map((e=>e.ref)).reverse())}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"cherry"===e}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]),null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(null==t.destination){const i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} into ${(0,o.Wh)(t.destination,{icon:!1})}`,e.counter<2||null==e.references||0===e.references.length){const r=yield*(0,d.Yv)(e,t,{filter:{branches:e=>e.id!==t.destination.id},placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to cherry-pick from`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.references?.[0]?.ref:void 0});if(r===u.Vd){i&&e.counter--;continue}(0,o.FT)(r)?(e.references=[r],t.selectedBranchOrTag=void 0):t.selectedBranchOrTag=r}if(e.counter<3&&null!=t.selectedBranchOrTag){const i=(0,o.oI)(t.destination.ref,t.selectedBranchOrTag.ref);let r=t.cache.get(i);null==r&&(r=this.container.git.getLog(e.repo.path,{ref:i,merges:!1}),t.cache.set(i,r));const n=yield*(0,d.Rj)(e,t,{log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),picked:e.references?.map((e=>e.ref)),placeholder:(e,t)=>null==t?`No pickable commits found on ${(0,o.Wh)(e.selectedBranchOrTag,{icon:!1})}`:`Choose commits to cherry-pick into ${(0,o.Wh)(e.destination,{icon:!1})}`});if(n===u.Vd)continue;e.references=n}if(this.confirm(e.confirm)){const i=yield*this.confirmStep(e,t);if(i===u.Vd)continue;e.flags=i}(0,u.uZ)(e),this.execute(e)}return e.counter<0?u.Vd:void 0}*confirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:this.title,detail:`Will apply ${(0,o.Wh)(e.references)} to ${(0,o.Wh)(t.destination)}`}),c(e.flags,["--edit"],{label:`${this.title} & Edit`,description:"--edit",detail:`Will edit and apply ${(0,o.Wh)(e.references)} to ${(0,o.Wh)(t.destination)}`}),c(e.flags,["--no-commit"],{label:`${this.title} without Committing`,description:"--no-commit",detail:`Will apply ${(0,o.Wh)(e.references)} to ${(0,o.Wh)(t.destination)} without Committing`})],t),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}}var y=i(9529),b=i(3700);class CoAuthorsGitCommand extends u.tR{constructor(e,t){super(e,"co-authors","co-authors","Add Co-Authors",{description:"adds co-authors to a commit message"});let i=0;null!=t?.state?.repo&&i++,null==t?.state?.contributors||Array.isArray(t.state.contributors)&&0===t.state.contributors.length||i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}async execute(e){const t=await this.container.git.getOrOpenScmRepository(e.repo.path);if(null==t)return;let i=t.inputBox.value;const r=i.indexOf("Co-authored-by: ");-1!==r&&(i=i.substring(0,r-1).trimRight()),null==e.contributors||Array.isArray(e.contributors)||(e.contributors=[e.contributors]);for(const t of e.contributors){let e;e=i.includes("Co-authored-by: ")?"\n":0!==i.length&&i.endsWith("\n")?"\n\n":"\n\n\n",i+=`${e}Co-authored-by: ${t.getCoauthor()}`}t.inputBox.value=i,await(0,y.dO)("workbench.view.scm")}async*steps(e){const t={repos:this.container.git.openRepositories,activeRepo:void 0,associatedView:this.container.contributorsView,title:this.title},i=await this.container.git.getOpenScmRepositories();i.length&&(t.repos=t.repos.filter((e=>i.find((t=>(0,b.AH)(t.rootUri.fsPath)===e.path)))),t.activeRepo=await this.container.git.getOrOpenRepositoryForEditor(),null==t.activeRepo||i.some((e=>e.rootUri.fsPath===t.activeRepo.path))||(t.activeRepo=void 0));let r=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(r=!1,1===t.repos.length)r=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(e.counter<2||null==e.contributors){const i=yield*(0,d.bR)(e,t,"Choose contributors to add as co-authors");if(i===u.Vd){r&&e.counter--;continue}e.contributors=i}(0,u.uZ)(e),this.execute(e)}return e.counter<0?u.Vd:void 0}}var C=i(5255),A=i(2800),S=i(7512);class FetchGitCommand extends u.tR{constructor(e,t){super(e,"fetch","fetch","Fetch",{description:"fetches changes from one or more remotes"});let i=0;null==t?.state?.repos||Array.isArray(t.state.repos)&&0===t.state.repos.length||i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}execute(e){return(0,o.UR)(e.reference)?e.repos[0].fetch({branch:e.reference}):this.container.git.fetchAll(e.repos,{all:e.flags.includes("--all"),prune:e.flags.includes("--prune")})}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,A.GI)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{const i=yield*(0,d.j8)(e,t,{skipIfPossible:e.counter>=1});if(i===u.Vd)break;e.repos=i}if(this.confirm(e.confirm)){const r=yield*this.confirmStep(e,t);if(r===u.Vd){i&&e.counter--;continue}e.flags=r}(0,u.uZ)(e),this.execute(e)}return e.counter<0?u.Vd:void 0}async*confirmStep(e,t){let i,r="";if(1===e.repos.length){const t=await e.repos[0].getLastFetched();0!==t&&(r=`${(0,h.vk)(C.NE.Dot,2,2)}Last fetched ${(0,S.Zh)(new Date(t))}`)}if(1===e.repos.length&&(0,o.UR)(e.reference))i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t,r),[c(e.flags,[],{label:this.title,detail:`Will fetch ${(0,o.Wh)(e.reference)}`})]);else{const n=1===e.repos.length?`$(repo) ${e.repos[0].formattedName}`:`${e.repos.length} repositories`;i=(0,u.Tv)((0,d.C8)(`Confirm ${this.title}`,e,t,r),[c(e.flags,[],{label:this.title,detail:`Will fetch ${n}`}),c(e.flags,["--prune"],{label:`${this.title} & Prune`,description:"--prune",detail:`Will fetch and prune ${n}`}),c(e.flags,["--all"],{label:`${this.title} All`,description:"--all",detail:`Will fetch all remotes of ${n}`}),c(e.flags,["--all","--prune"],{label:`${this.title} All & Prune`,description:"--all --prune",detail:`Will fetch and prune all remotes of ${n}`})],t)}const n=yield i;return(0,u.i9)(i,e,n)?n[0].item:u.Vd}}var P=i(6897),k=i(6450),R=i(1774);function D(e){if(!(e.repo instanceof a._j))throw new Error("Missing repository")}class LogGitCommand extends u.tR{constructor(e,t){super(e,"log","history","Commits",{description:"aka log, shows commit history"});let i=0;null!=t?.state?.repo&&i++,null!=t?.state?.reference&&(i++,"HEAD"!==t.state.reference&&(0,o.FT)(t.state.reference)&&!(0,o.Nn)(t.state.reference)&&i++),this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"log"===e}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,selectedBranchOrTag:void 0,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(D(e),"HEAD"===e.reference){const t=await e.repo.getBranch();e.reference=t}if(e.counter<2||null==e.reference){const r=yield*(0,d.Yv)(e,t,{placeholder:"Choose a branch or tag to show its commit history",picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,ranges:!0});if(r===u.Vd){i&&e.counter--;continue}e.reference=r,t.selectedBranchOrTag=void 0}if((0,o.FT)(e.reference)&&!(0,o.Nn)(e.reference)||(t.selectedBranchOrTag=e.reference),t.title=`${this.title}${(0,h.vk)(C.NE.Dot,2,2)}${(0,o.Wh)(t.selectedBranchOrTag,{icon:!1})}`,e.fileName&&(t.title+=`${(0,h.vk)(C.NE.Dot,2,2)}${(0,R.d)(e.fileName,{fileOnly:!0,truncateTo:C.d$-t.title.length-3})}`),e.counter<3&&null!=t.selectedBranchOrTag){const i=t.selectedBranchOrTag.ref;let r=t.cache.get(i);null==r&&(r=null!=e.fileName?this.container.git.getLogForFile(e.repo.path,e.fileName,{ref:i}):this.container.git.getLog(e.repo.path,{ref:i}),t.cache.set(i,r));const n=yield*(0,d.s4)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found in ${(0,o.Wh)(e.selectedBranchOrTag,{icon:!1})}`:"Choose a commit",picked:e.reference?.ref});if(n===u.Vd)continue;e.reference=n}let r;e.reference instanceof k.aM&&null==e.reference.file||(e.reference=await this.container.git.getCommit(e.repo.path,e.reference.ref)),e.openPickInView?((0,P.Fw)(e.reference,{pin:!1,preserveFocus:!1}),r=u.Vd):r=yield*le(this.container,{command:"show",state:{repo:e.repo,reference:e.reference,fileName:e.fileName}},this.pickedVia),e.counter--,r===u.Vd&&(0,u.uZ)(e)}return e.counter<0?u.Vd:void 0}}var _=i(3599),T=i(3016);class MergeGitCommand extends u.tR{constructor(e,t){super(e,"merge","merge","Merge",{description:"integrates changes from a specified branch into the current branch"});let i=0;null!=t?.state?.repo&&i++,null!=t?.state?.reference&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.merge(...e.flags,e.reference.ref)}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,pickCommit:!1,pickCommitForItem:!1,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(null==t.destination){const i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} into ${(0,o.Wh)(t.destination,{icon:!1})}`,t.pickCommitForItem=!1,e.counter<2||null==e.reference){const r=new T.v_(t.pickCommit,t,(()=>{t.pickCommit=!t.pickCommit,r.on=t.pickCommit})),n=yield*(0,d.Yv)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to merge`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,additionalButtons:[r]});if(n===u.Vd){i&&e.counter--;continue}e.reference=n,t.selectedBranchOrTag=void 0}if((0,o.FT)(e.reference)||(t.selectedBranchOrTag=e.reference),e.counter<3&&null!=t.selectedBranchOrTag&&(t.pickCommit||t.pickCommitForItem||e.reference.ref===t.destination.ref)){const i=t.selectedBranchOrTag.ref;let r=t.cache.get(i);null==r&&(r=this.container.git.getLog(e.repo.path,{ref:i,merges:!1}),t.cache.set(i,r));const n=yield*(0,d.s4)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found on ${(0,o.Wh)(e.selectedBranchOrTag,{icon:!1})}`:`Choose a commit to merge into ${(0,o.Wh)(e.destination,{icon:!1})}`,picked:e.reference?.ref});if(n===u.Vd)continue;e.reference=n}const r=yield*this.confirmStep(e,t);r!==u.Vd&&(e.flags=r,(0,u.uZ)(e),this.execute(e))}return e.counter<0?u.Vd:void 0}async*confirmStep(e,t){const i=await this.container.git.getAheadBehindCommitCount(e.repo.path,[(0,o.oI)(t.destination.name,e.reference.name)]),r=null!=i?i.ahead+i.behind:0;if(0===r){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[],(0,_.fw)(_.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:`${(0,o.Wh)(t.destination,{capitalize:!0})} is up to date with ${(0,o.Wh)(e.reference)}`})),r=yield i;return(0,u.i9)(i,e,r),u.Vd}const n=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:this.title,detail:`Will merge ${(0,h._6)("commit",r)} from ${(0,o.Wh)(e.reference)} into ${(0,o.Wh)(t.destination)}`}),c(e.flags,["--ff-only"],{label:`Fast-forward ${this.title}`,description:"--ff-only",detail:`Will fast-forward merge ${(0,h._6)("commit",r)} from ${(0,o.Wh)(e.reference)} into ${(0,o.Wh)(t.destination)}`}),c(e.flags,["--squash"],{label:`Squash ${this.title}`,description:"--squash",detail:`Will squash ${(0,h._6)("commit",r)} from ${(0,o.Wh)(e.reference)} into one when merging into ${(0,o.Wh)(t.destination)}`}),c(e.flags,["--no-ff"],{label:`${this.title} without Fast-Forwarding`,description:"--no-ff",detail:`Will create a merge commit when merging ${(0,h._6)("commit",r)} from ${(0,o.Wh)(e.reference)} into ${(0,o.Wh)(t.destination)}`}),c(e.flags,["--no-ff","--no-commit"],{label:`${this.title} without Fast-Forwarding or Committing`,description:"--no-ff --no-commit",detail:`Will merge ${(0,h._6)("commit",r)} from ${(0,o.Wh)(e.reference)} into ${(0,o.Wh)(t.destination)} without Committing`})]),s=yield n;return(0,u.i9)(n,e,s)?s[0].item:u.Vd}}var F=i(5367);class PullGitCommand extends u.tR{constructor(e,t){super(e,"pull","pull","Pull",{description:"fetches and integrates changes from a remote into the current branch"});let i=0;null==t?.state?.repos||Array.isArray(t.state.repos)&&0===t.state.repos.length||i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}async execute(e){if((0,o.UR)(e.reference)&&(!(0,F.BF)(e.reference)||!e.reference.current)){const t=await e.repos[0].getBranch();if(t?.name!==e.reference.name)return e.repos[0].fetch({branch:e.reference,pull:!0})}return this.container.git.pullAll(e.repos,{rebase:e.flags.includes("--rebase")})}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,A.GI)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{const i=yield*(0,d.j8)(e,t,{skipIfPossible:e.counter>=1});if(i===u.Vd)break;e.repos=i}if(this.confirm(e.confirm)){const r=yield*this.confirmStep(e,t);if(r===u.Vd){i&&e.counter--;continue}e.flags=r}(0,u.uZ)(e),this.execute(e)}return e.counter<0?u.Vd:void 0}async*confirmStep(e,t){let i;if(e.repos.length>1)i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:this.title,detail:`Will pull ${e.repos.length} repositories`}),c(e.flags,["--rebase"],{label:`${this.title} with Rebase`,description:"--rebase",detail:`Will pull ${e.repos.length} repositories by rebasing`})]);else if((0,o.UR)(e.reference))if(e.reference.remote)i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[],(0,_.fw)(_.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot pull a remote branch"}));else{const[r]=e.repos,n=await r.getBranch(e.reference.name);i=null==n?.upstream?this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[],(0,_.fw)(_.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot pull a branch until it has been published"})):this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:this.title,detail:"Will pull"+(n.state.behind?` ${(0,h._6)("commit",n.state.behind)} into ${(0,o.Wh)(n)}`:` into ${(0,o.Wh)(n)}`)})])}else{const[r]=e.repos,[n,s]=await Promise.all([r.getStatus(),r.getLastFetched()]);let o="";0!==s&&(o=`${(0,h.vk)(C.NE.Dot,2,2)}Last fetched ${(0,S.Zh)(new Date(s))}`);const a=null!=n?.state.behind?` ${(0,h._6)("commit",n.state.behind)} into $(repo) ${r.formattedName}`:` into $(repo) ${r.formattedName}`;i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t,o),[c(e.flags,[],{label:this.title,detail:`Will pull${a}`}),c(e.flags,["--rebase"],{label:`${this.title} with Rebase`,description:"--rebase",detail:`Will pull and rebase${a}`})],void 0,{additionalButtons:[T.My],onDidClickButton:async(e,i)=>{if(i!==T.My||e.busy)return!1;e.title=`Confirm ${t.title}${(0,h.vk)(C.NE.Dot,2,2)}Fetching${C.NE.Ellipsis}`,e.busy=!0;try{return await r.fetch({progress:!0}),!0}finally{e.busy=!1}}})}const r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}}class PushGitCommand extends u.tR{constructor(e,t){super(e,"push","push","Push",{description:"pushes changes from the current branch to a remote"});let i=0;null==t?.state?.repos||Array.isArray(t.state.repos)&&0===t.state.repos.length||i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}execute(e){const t=e.flags.indexOf("--set-upstream");return-1!==t?(0,o.UR)(e.reference)?this.container.git.pushAll(e.repos,{force:!1,publish:{remote:e.flags[t+1]},reference:e.reference}):Promise.resolve():this.container.git.pushAll(e.repos,{force:e.flags.includes("--force"),reference:e.reference})}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};null==e.flags&&(e.flags=[]),null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,A.GI)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else if(null!=e.reference){const i=yield*(0,d.lA)({...e,repos:void 0,repo:e.reference.repoPath},t);if(i===u.Vd)break;e.repos=[i]}else{const i=yield*(0,d.j8)(e,t,{skipIfPossible:e.counter>=1});if(i===u.Vd)break;e.repos=i}if(this.confirm(e.confirm)){const r=yield*this.confirmStep(e,t);if(r===u.Vd){i&&e.counter--;continue}e.flags=r}(0,u.uZ)(e),this.execute(e)}return e.counter<0?u.Vd:void 0}async*confirmStep(e,t){const i=r.D.getAny("git.useForcePushWithLease")??!1;let n;if(e.repos.length>1)n=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:this.title,detail:`Will push ${e.repos.length} repositories`}),c(e.flags,["--force"],{label:`Force ${this.title}${i?" (with lease)":""}`,description:"--force"+(i?"-with-lease":""),detail:`Will force push${i?" (with lease)":""} ${e.repos.length} repositories`})]);else{const[r]=e.repos,s=[];if((0,o.UR)(e.reference))if(e.reference.remote)n=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[],(0,_.fw)(_.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:"Cannot push remote branch"}));else{const a=await r.getBranch(e.reference.name);if(null!=a&&null==a?.upstream){for(const t of await r.getRemotes())s.push(c(e.flags,["--set-upstream",t.name,a.name],{label:`Publish ${a.name} to ${t.name}`,detail:`Will publish ${(0,o.Wh)(a)} to ${t.name}`}));n=s.length?this.createConfirmStep((0,d.C8)("Confirm Publish",e,t),s,void 0,{placeholder:"Confirm Publish"}):this.createConfirmStep((0,d.C8)("Confirm Publish",e,t),[],(0,_.fw)(_.Xe.Cancel,!0,{label:"Cancel Publish",detail:"Cannot publish; No remotes found"}),{placeholder:"Confirm Publish"})}else n=null!=a&&a?.state.behind>0?this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,["--force"],{label:`Force ${this.title}${i?" (with lease)":""}`,description:"--force"+(i?"-with-lease":""),detail:`Will force push${i?" (with lease)":""} ${a?.state.ahead?` ${(0,h._6)("commit",a.state.ahead)}`:""}${a.getRemoteName()?` to ${a.getRemoteName()}`:""}${null!=a&&a.state.behind>0?`, overwriting ${(0,h._6)("commit",a.state.behind)}${a?.getRemoteName()?` on ${a.getRemoteName()}`:""}`:""}`})],(0,_.fw)(_.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; ${(0,o.Wh)(a)} is behind ${a.getRemoteName()} by ${(0,h._6)("commit",a.state.behind)}`})):null!=a&&a?.state.ahead>0?this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[a.getRemoteName()],{label:this.title,detail:`Will push ${(0,h._6)("commit",a.state.ahead)} from ${(0,o.Wh)(a)} to ${a.getRemoteName()}`})]):this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[],(0,_.fw)(_.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:"No commits found to push"}))}else{const a=await r.getStatus(),l={refType:"branch",name:a?.branch??"HEAD",ref:a?.branch??"HEAD",remote:!1,repoPath:r.path};if(0===a?.state.ahead){if(null==e.reference&&null==a.upstream){e.reference=l;for(const t of await r.getRemotes())s.push(c(e.flags,["--set-upstream",t.name,a.branch],{label:`Publish ${l.name} to ${t.name}`,detail:`Will publish ${(0,o.Wh)(l)} to ${t.name}`}))}n=s.length?this.createConfirmStep((0,d.C8)("Confirm Publish",e,t),s,void 0,{placeholder:"Confirm Publish"}):null==a.upstream?this.createConfirmStep((0,d.C8)("Confirm Publish",e,t),[],(0,_.fw)(_.Xe.Cancel,!0,{label:"Cancel Publish",detail:"Cannot publish; No remotes found"}),{placeholder:"Confirm Publish"}):this.createConfirmStep((0,d.C8)("Confirm Push",e,t),[],(0,_.fw)(_.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; No commits ahead of ${(0,F.Lo)(a.upstream)}`}))}else{let s="";const u=await r.getLastFetched();let p;0!==u&&(s=`${(0,h.vk)(C.NE.Dot,2,2)}Last fetched ${(0,S.Zh)(new Date(u))}`),p=null!=e.reference?`${a?.state.ahead?` commits up to and including ${(0,o.Wh)(e.reference,{label:!1})}`:""}${a?.upstream?` to ${(0,F.Lo)(a.upstream)}`:""}`:`${a?.state.ahead?` ${(0,h._6)("commit",a.state.ahead)}`:""}${a?.upstream?` to ${(0,F.Lo)(a.upstream)}`:""}`,n=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t,s),[...a?.state.behind?[]:[c(e.flags,[],{label:this.title,detail:`Will push${p}`})],c(e.flags,["--force"],{label:`Force ${this.title}${i?" (with lease)":""}`,description:"--force"+(i?"-with-lease":""),detail:`Will force push${i?" (with lease)":""} ${p}${null!=a&&a.state.behind>0?`, overwriting ${(0,h._6)("commit",a.state.behind)}${a?.upstream?` on ${(0,F.Lo)(a.upstream)}`:""}`:""}`})],a?.state.behind?(0,_.fw)(_.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:`Cannot push; ${(0,o.Wh)(l)} is behind${a?.upstream?` ${(0,F.Lo)(a.upstream)}`:""} by ${(0,h._6)("commit",a.state.behind)}`}):void 0),n.additionalButtons=[T.My],n.onDidClickButton=async(e,i)=>{if(i!==T.My||e.busy)return!1;e.title=`Confirm ${t.title}${(0,h.vk)(C.NE.Dot,2,2)}Fetching${C.NE.Ellipsis}`,e.busy=!0;try{return await r.fetch({progress:!0}),!0}finally{e.busy=!1}}}}}const s=yield n;return(0,u.i9)(n,e,s)?s[0].item:u.Vd}}var $=i(2509);class RebaseGitCommand extends u.tR{constructor(e,t){super(e,"rebase","rebase","Rebase",{description:"integrates changes from a specified branch into the current branch, by changing the base of the branch and reapplying the commits on top"});let i=0;null!=t?.state?.repo&&i++,null!=t?.state?.reference&&i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}async execute(e){let t;if(e.flags.includes("--interactive")){await this.container.rebaseEditor.enableForNextUse();t=["-c",`"sequence.editor=${(0,$._L)()}"`]}e.repo.rebase(t,...e.flags,e.reference.ref)}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,pickCommit:!1,pickCommitForItem:!1,selectedBranchOrTag:void 0,showTags:!0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(null==t.destination){const i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} ${(0,o.Wh)(t.destination,{icon:!1})}`,t.pickCommitForItem=!1,e.counter<2||null==e.reference){const r=new T.v_(t.pickCommit,t,(()=>{t.pickCommit=!t.pickCommit,r.on=t.pickCommit})),n=yield*(0,d.Yv)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to rebase`,picked:t.selectedBranchOrTag?.ref,value:null==t.selectedBranchOrTag?e.reference?.ref:void 0,additionalButtons:[r]});if(n===u.Vd){i&&e.counter--;continue}e.reference=n,t.selectedBranchOrTag=void 0}if((0,o.FT)(e.reference)||(t.selectedBranchOrTag=e.reference),e.counter<3&&null!=t.selectedBranchOrTag&&(t.pickCommit||t.pickCommitForItem||e.reference.ref===t.destination.ref)){const i=t.selectedBranchOrTag.ref;let r=t.cache.get(i);null==r&&(r=this.container.git.getLog(e.repo.path,{ref:i,merges:!1}),t.cache.set(i,r));const n=yield*(0,d.s4)(e,t,{ignoreFocusOut:!0,log:await r,onDidLoadMore:e=>t.cache.set(i,Promise.resolve(e)),placeholder:(e,t)=>null==t?`No commits found on ${(0,o.Wh)(e.selectedBranchOrTag,{icon:!1})}`:`Choose a commit to rebase ${(0,o.Wh)(e.destination,{icon:!1})} onto`,picked:e.reference?.ref});if(n===u.Vd)continue;e.reference=n}const r=yield*this.confirmStep(e,t);r!==u.Vd&&(e.flags=r,(0,u.uZ)(e),this.execute(e))}return e.counter<0?u.Vd:void 0}async*confirmStep(e,t){const i=await this.container.git.getAheadBehindCommitCount(e.repo.path,["revision"===e.reference.refType?(0,o.oI)(e.reference.ref,t.destination.ref):(0,o.oI)(t.destination.name,e.reference.name)]),r=null!=i?i.ahead+i.behind:0;if(0===r){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[],(0,_.fw)(_.Xe.Cancel,!0,{label:`Cancel ${this.title}`,detail:`${(0,o.Wh)(t.destination,{capitalize:!0})} is up to date with ${(0,o.Wh)(e.reference)}`})),r=yield i;return(0,u.i9)(i,e,r),u.Vd}const n=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:this.title,detail:`Will update ${(0,o.Wh)(t.destination)} by applying ${(0,h._6)("commit",r)} on top of ${(0,o.Wh)(e.reference)}`}),c(e.flags,["--interactive"],{label:`Interactive ${this.title}`,description:"--interactive",detail:`Will interactively update ${(0,o.Wh)(t.destination)} by applying ${(0,h._6)("commit",r)} on top of ${(0,o.Wh)(e.reference)}`})]),s=yield n;return(0,u.i9)(n,e,s)?s[0].item:u.Vd}}var O=i(4155),I=i(7925),E=i(4336);function x(e){if(!(e.repo instanceof a._j&&"add"===e.subcommand))throw new Error("Missing repository")}function B(e){if(!(e.repo instanceof a._j&&"remove"===e.subcommand))throw new Error("Missing repository")}function W(e){if(!(e.repo instanceof a._j&&"prune"===e.subcommand))throw new Error("Missing repository")}function N(e){if("string"==typeof e.remote)throw new Error("Missing remote")}function M(e){if("string"==typeof e.remote)throw new Error("Missing remote")}const L=new Map([["add","Add"],["prune","Prune"],["remove","Remove"]]);function U(e,t){return null==t?e:`${L.get(t)} ${e}`}class RemoteGitCommand extends u.tR{subcommand;constructor(e,t){super(e,"remote","remote","Remote",{description:"add, prune, or remove remotes"});let i=0;if(null!=t?.state?.subcommand)switch(i++,t?.state.subcommand){case"add":null!=t.state.name&&i++,null!=t.state.url&&i++;break;case"prune":case"remove":null!=t.state.remote&&i++}null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"remove"!==this.subcommand&&"prune"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.remotesView,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;const t=yield*this.pickSubcommandStep(e);if(t===u.Vd)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=U(this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)continue;e.repo=i}switch(e.subcommand){case"add":x(e),yield*this.addCommandSteps(e,t),e.name=void 0,e.url=void 0;break;case"prune":W(e),yield*this.pruneCommandSteps(e,t);break;case"remove":B(e),yield*this.removeCommandSteps(e,t);break;default:(0,u.uZ)(e)}i&&e.counter--}return e.counter<0?u.Vd:void 0}*pickSubcommandStep(e){const t=(0,u.xf)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"add",description:"adds a new remote",picked:"add"===e.subcommand,item:"add"},{label:"prune",description:"prunes remote branches on the specified remote",picked:"prune"===e.subcommand,item:"prune"},{label:"remove",description:"removes the specified remote",picked:"remove"===e.subcommand,item:"remove"}],buttons:[s.QuickInputButtons.Back]}),i=yield t;return(0,u.i9)(t,e,i)?i[0].item:u.Vd}async*addCommandSteps(e,t){null==e.flags&&(e.flags=["-f"]);let i=0!==(await e.repo.getRemotes({filter:t=>t.name===e.name})).length;for(;this.canStepsContinue(e);){if(e.counter<3||null==e.name||i){const r=yield*(0,d.NQ)(e,t,{placeholder:"Please provide a name for the remote",value:e.name});if(r===u.Vd)continue;if(i=0!==(await e.repo.getRemotes({filter:e=>e.name===r})).length,i){e.counter--;continue}e.name=r}if(e.counter<4||null==e.url){const i=yield*(0,d.Kf)(e,t,{placeholder:"Please provide a URL for the remote",value:e.url});if(i===u.Vd)continue;e.url=i}if(this.confirm(e.confirm)){const i=yield*this.addCommandConfirmStep(e,t);if(i===u.Vd)continue;e.flags=i}(0,u.uZ)(e),await e.repo.addRemote(e.name,e.url,e.flags.includes("-f")?{fetch:!0}:void 0),!1!==e.reveal&&(0,O.ay)(void 0,{focus:!0,select:!0})}}*addCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:t.title,detail:`Will add remote '${e.name}' for ${e.url}`}),c(e.flags,["-f"],{label:`${t.title} and Fetch`,description:"-f",detail:`Will add and fetch remote '${e.name}' for ${e.url}`})],t),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}async*removeCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null!=e.remote&&"string"==typeof e.remote){const[t]=await e.repo.getRemotes({filter:t=>t.name===e.remote});e.remote=null!=t?t:void 0}if(e.counter<3||null==e.remote){t.title=U("Remotes",e.subcommand);const i=yield*(0,d.Lt)(e,t,{picked:e.remote?.name,placeholder:"Choose remote to remove"});if(i===u.Vd)break;e.remote=i}N(e);if((yield*this.removeCommandConfirmStep(e,t))!==u.Vd){(0,u.uZ)(e);try{await e.repo.removeRemote(e.remote.name)}catch(e){E.Yd.error(e),(0,I.W8)("Unable to remove remote")}}}}*removeCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will remove remote '${e.remote.name}'`}],t),r=yield i;return(0,u.i9)(i,e,r)?void 0:u.Vd}async*pruneCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null!=e.remote&&"string"==typeof e.remote){const[t]=await e.repo.getRemotes({filter:t=>t.name===e.remote});e.remote=null!=t?t:void 0}if(e.counter<3||null==e.remote){const i=yield*(0,d.Lt)(e,t,{picked:e.remote?.name,placeholder:"Choose a remote to prune"});if(i===u.Vd)break;e.remote=i}M(e);(yield*this.pruneCommandConfirmStep(e,t))!==u.Vd&&((0,u.uZ)(e),e.repo.pruneRemote(e.remote.name))}}*pruneCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will prune remote '${e.remote.name}'`}],t),r=yield i;return(0,u.i9)(i,e,r)?void 0:u.Vd}}class ResetGitCommand extends u.tR{constructor(e,t){super(e,"reset","reset","Reset",{description:"resets the current branch to a specified commit"});let i=0;null!=t?.state?.repo&&i++,null!=t?.state?.reference&&i++,this.initialState={counter:i,confirm:t?.confirm??!0,...t?.state},this._canSkipConfirm=!this.initialState.confirm}_canSkipConfirm=!1;get canSkipConfirm(){return this._canSkipConfirm}execute(e){e.repo.reset(...e.flags,e.reference.ref)}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,title:this.title};null==e.flags&&(e.flags=[]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(null==t.destination){const i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(t.title=`${this.title} ${(0,o.Wh)(t.destination,{icon:!1})}`,e.counter<2||null==e.reference){const r=t.destination.ref;let n=t.cache.get(r);null==n&&(n=this.container.git.getLog(e.repo.path,{ref:r,merges:!1}),t.cache.set(r,n));const s=yield*(0,d.s4)(e,t,{log:await n,onDidLoadMore:e=>t.cache.set(r,Promise.resolve(e)),placeholder:(e,t)=>null==t?`${e.destination.name} has no commits`:`Choose a commit to reset ${e.destination.name} to`,picked:e.reference?.ref});if(s===u.Vd){i&&e.counter--;continue}e.reference=s}if(this.confirm(e.confirm)){const i=yield*this.confirmStep(e,t);if(i===u.Vd)continue;e.flags=i}(0,u.uZ)(e),this.execute(e)}return e.counter<0?u.Vd:void 0}*confirmStep(e,t){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:this.title,detail:`Will reset (leaves changes in the working tree) ${(0,o.Wh)(t.destination)} to ${(0,o.Wh)(e.reference)}`}),c(e.flags,["--soft"],{label:`Soft ${this.title}`,description:"--soft",detail:`Will soft reset (leaves changes in the index and working tree) ${(0,o.Wh)(t.destination)} to ${(0,o.Wh)(e.reference)}`}),c(e.flags,["--hard"],{label:`Hard ${this.title}`,description:"--hard",detail:`Will hard reset (discards all changes) ${(0,o.Wh)(t.destination)} to ${(0,o.Wh)(e.reference)}`})]),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}}class RevertGitCommand extends u.tR{constructor(e,t){super(e,"revert","revert","Revert",{description:"undoes the changes of specified commits, by creating new commits with inverted changes"});let i=0;null!=t?.state?.repo&&i++,null==t?.state?.references||Array.isArray(t.state.references)&&0===t.state.references.length||i++,this.initialState={counter:i,confirm:!0,...t?.state}}get canSkipConfirm(){return!1}execute(e){e.repo.revert(...e.flags,...e.references.map((e=>e.ref)).reverse())}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,cache:new Map,destination:void 0,title:this.title};null==e.flags&&(e.flags=[]),null==e.references||Array.isArray(e.references)||(e.references=[e.references]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(null==t.destination){const i=await e.repo.getBranch();if(null==i)break;t.destination=i}if(e.counter<2||null==e.references||0===e.references.length){const r=t.destination.ref;let n=t.cache.get(r);null==n&&(n=this.container.git.getLog(e.repo.path,{ref:r,merges:!1}),t.cache.set(r,n));const s=yield*(0,d.Rj)(e,t,{log:await n,onDidLoadMore:e=>t.cache.set(r,Promise.resolve(e)),placeholder:(e,t)=>null==t?`${e.destination.name} has no commits`:"Choose commits to revert",picked:e.references?.map((e=>e.ref))});if(s===u.Vd){i&&e.counter--;continue}e.references=s}const r=yield*this.confirmStep(e,t);r!==u.Vd&&(e.flags=r,(0,u.uZ)(e),this.execute(e))}return e.counter<0?u.Vd:void 0}*confirmStep(e,t){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,["--no-edit"],{label:this.title,description:"--no-edit",detail:`Will revert ${(0,o.Wh)(e.references)}`}),c(e.flags,["--edit"],{label:`${this.title} & Edit`,description:"--edit",detail:`Will revert and edit ${(0,o.Wh)(e.references)}`})]),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}}var G=i(6934),H=i(9729),V=i(4655);const q=new Map([["","Search by Message"],["=:","Search by Message"],["message:","Search by Message"],["@:","Search by Author"],["author:","Search by Author"],["#:","Search by Commit SHA"],["commit:","Search by Commit SHA"],["?:","Search by File"],["file:","Search by File"],["~:","Search by Changes"],["change:","Search by Changes"]]);class SearchGitCommand extends u.tR{constructor(e,t){super(e,"search","search","Commit Search",{description:"aka grep, searches for commits"});let i=0;null!=t?.state?.repo&&i++,null==t?.state?.query||t.prefillOnly||i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}isMatch(e){return super.isMatch(e)||"grep"===e}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"grep"===e}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.searchAndCompareView,commit:void 0,hasVirtualFolders:(0,n.fw)("gitlens:hasVirtualFolders",!1),resultsKey:void 0,resultsPromise:void 0,title:this.title},i=r.D.get("gitCommands.search");null==e.matchAll&&(e.matchAll=i.matchAll),null==e.matchCase&&(e.matchCase=i.matchCase),null==e.matchRegex&&(e.matchRegex=i.matchRegex),null==e.showResultsInSideBar&&(e.showResultsInSideBar=i.showResultsInSideBar??void 0);let s=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(s=!1,1===t.repos.length)s=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(e.counter<2||null==e.query){const i=yield*this.pickSearchOperatorStep(e,t);if(i===u.Vd){s&&e.counter--,e.query=void 0;continue}e.query=i}const i={query:e.query,matchAll:e.matchAll,matchCase:e.matchCase,matchRegex:e.matchRegex},r=(0,G.FL)(i);if(null!=t.resultsPromise&&t.resultsKey===r||(t.resultsPromise=e.repo.richSearchCommits(i),t.resultsKey=r),e.showResultsInSideBar){this.container.searchAndCompareView.search(e.repo.path,i,{label:{label:`for ${e.query}`}},t.resultsPromise,e.showResultsInSideBar instanceof V.V?e.showResultsInSideBar:void 0);break}if(e.counter<3||null==t.commit){const r=e.repo.path,n=yield*(0,d.s4)(e,t,{ignoreFocusOut:!0,log:await t.resultsPromise,onDidLoadMore:e=>t.resultsPromise=Promise.resolve(e),placeholder:(t,i)=>null==i?`No results for ${e.query}`:`${(0,h._6)("result",i.count,{format:e=>i.hasMore?`${e}+`:void 0})} for ${e.query}`,picked:t.commit?.ref,showInSideBarCommand:new H.qv("$(link-external)  Show Results in Side Bar",(()=>{this.container.searchAndCompareView.search(r,i,{label:{label:`for ${e.query}`},reveal:{select:!0,focus:!1,expand:!0}},t.resultsPromise)})),showInSideBarButton:{button:T.vU,onDidClick:()=>{this.container.searchAndCompareView.search(r,i,{label:{label:`for ${e.query}`},reveal:{select:!0,focus:!1,expand:!0}},t.resultsPromise)}}});if(n===u.Vd){e.counter--;continue}t.commit=n}let n;e.openPickInView?((0,P.Fw)(t.commit,{pin:!1,preserveFocus:!1}),n=u.Vd):n=yield*le(this.container,{command:"show",state:{repo:e.repo,reference:t.commit}},this.pickedVia),e.counter--,n===u.Vd&&(0,u.uZ)(e)}return e.counter<0?u.Vd:void 0}*pickSearchOperatorStep(e,t){const i=[{label:q.get(""),description:`pattern or message: pattern or =: pattern ${C.NE.Dash} use quotes to search for phrases`,item:"message:"},{label:q.get("author:"),description:"author: pattern or @: pattern",item:"author:"},{label:q.get("commit:"),description:"commit: sha or #: sha",item:"commit:"},t.hasVirtualFolders?void 0:{label:q.get("file:"),description:"file: glob or ?: glob",item:"file:"},t.hasVirtualFolders?void 0:{label:q.get("change:"),description:"change: pattern or ~: pattern",item:"change:"}].filter((e=>null!=e)),r=new T.I4(e.matchCase),n=new T.eY(e.matchAll),s=new T.Mn(e.matchRegex),o=(0,u.xf)({title:(0,d.C8)(t.title,e,t),placeholder:'e.g. "Updates dependencies" author:eamodio',matchOnDescription:!0,matchOnDetail:!0,additionalButtons:[r,n,s],items:i,value:e.query,selectValueWhenShown:!1,onDidAccept:e=>{const t=e.selectedItems[0];if(!G.WY.has(t.item))return!0;const i=e.value.trim();return 0===i.length||G.WY.has(i)?e.value=t.item:e.value=`${i} ${t.item}`,o.onDidChangeValue(e),!1},onDidClickButton:(t,i)=>{i===r?(e.matchCase=!e.matchCase,r.on=e.matchCase):i===n?(e.matchAll=!e.matchAll,n.on=e.matchAll):i===s&&(e.matchRegex=!e.matchRegex,s.on=e.matchRegex)},onDidChangeValue:r=>{const n=r.value.trim();e.counter=n?3:2;const s=(0,G.pD)({query:n,matchCase:e.matchCase,matchAll:e.matchAll,matchRegex:e.matchRegex});return r.title=(0,d.C8)(0===s.size||s.size>1?t.title:`Commit ${q.get(s.keys().next().value)}`,e,t),0===r.value.length?r.items=i:(r.ignoreFocusOut=!0,o.ignoreFocusOut=!0,r.items=[{label:"Search for",description:r.value,item:r.value}]),!0}}),a=yield o;return(0,u.i9)(o,e,a)?(e.counter--,a[0].item.trim()):(e.counter--,u.Vd)}}var Q=i(3931),j=i(1742);function Y(e){if(!(e.repo instanceof a._j))throw new Error("Missing repository")}function z(e){if(!(0,k.f_)(e.reference))throw new Error("Missing reference")}function K(e){if(!e.fileName)throw new Error("Missing filename")}class ShowGitCommand extends u.tR{constructor(e,t){super(e,"show","show","Show",{description:"shows information about a git reference"});let i=0;null!=t?.state?.repo&&i++,null!=t?.state?.reference&&i++,null!=t?.state?.fileName&&(i+=2),this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}getStepState(e){const t=super.getStepState(e);return{...t,startingStep:e?Math.min(t.startingStep??0,1):0}}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(Y(e),(e.counter<2||null==e.reference||!(0,k.f_)(e.reference)||null!=e.reference.file)&&(null==e.reference||(0,k.f_)(e.reference)||(e.reference=await this.container.git.getCommit(e.reference.repoPath,e.reference.ref)),e.counter<2||null==e.reference)){const r=yield*(0,d.s4)(e,t,{log:{repoPath:e.repo.path,commits:new Map,sha:void 0,range:void 0,count:0,limit:void 0,hasMore:!1},placeholder:"Enter a reference or commit SHA",picked:e.reference?.ref});if(r===u.Vd){i&&e.counter--;continue}e.reference=r}if(z(e),e.counter<3){null==e.reference.files&&await e.reference.ensureFullDetails();const i=yield*(0,d.KT)(e,t);if(i===u.Vd)continue;if(i instanceof j.Wv){const t=yield*i.executeSteps(this.pickedVia);e.counter--,t===u.Vd&&(0,u.uZ)(e);continue}if(i instanceof H.$w&&!(i instanceof Q.PF)){(0,u.uZ)(e),i.execute();break}}if(e.counter<4||null==e.fileName){const i=yield*(0,d.fD)(e,t,{picked:e.fileName});if(i===u.Vd)continue;if(i instanceof Q.PF){e.counter-=2;continue}e.fileName=i.file.path}K(e);const r=yield*(0,d.nI)(e,t);if(r!==u.Vd)if(r instanceof Q.PF)e.counter-=2;else if(r instanceof j.Wv)yield*r.executeSteps(this.pickedVia),e.counter--;else if(r instanceof H.$w){(0,u.uZ)(e),r.execute();break}}return e.counter<0?u.Vd:void 0}}var J=i(252),X=i(6592);const Z=new Map([["apply","Apply"],["drop","Drop"],["list","List"],["pop","Pop"],["push","Push"],["rename","Rename"]]);function ee(e,t){return null==t?e:`${Z.get(t)} ${e}`}class StashGitCommand extends u.tR{subcommand;constructor(e,t){super(e,"stash","stash","Stash",{description:"shelves (stashes) local changes to be reapplied later"});let i=0;if(null!=t?.state?.subcommand)switch(i++,t.state.subcommand){case"apply":case"drop":case"pop":null!=t.state.reference&&i++;break;case"push":null!=t.state.message&&i++;break;case"rename":null!=t.state.reference&&i++,null!=t.state.message&&i++}null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand&&"list"!==this.subcommand}get canSkipConfirm(){return"drop"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.stashesView,readonly:(0,n.fw)("gitlens:readonly",!1)||(0,n.fw)("gitlens:untrusted",!1)||(0,n.fw)("gitlens:hasVirtualFolders",!1),title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,t.readonly&&(e.subcommand="list"),e.counter<1||null==e.subcommand){this.subcommand=void 0;const t=yield*this.pickSubcommandStep(e);if(t===u.Vd)break;e.subcommand=t}if(this.subcommand=e.subcommand,t.title=ee(this.title,e.subcommand),e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)continue;e.repo=i}switch(e.subcommand){case"apply":case"pop":yield*this.applyOrPopCommandSteps(e,t);break;case"drop":yield*this.dropCommandSteps(e,t);break;case"list":yield*this.listCommandSteps(e,t);break;case"push":yield*this.pushCommandSteps(e,t);break;case"rename":yield*this.renameCommandSteps(e,t),e.message=void 0;break;default:(0,u.uZ)(e)}i&&e.counter--}return e.counter<0?u.Vd:void 0}*pickSubcommandStep(e){const t=(0,u.xf)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"apply",description:"integrates changes from the specified stash into the current branch",picked:"apply"===e.subcommand,item:"apply"},{label:"drop",description:"deletes the specified stash",picked:"drop"===e.subcommand,item:"drop"},{label:"list",description:"lists the saved stashes",picked:"list"===e.subcommand,item:"list"},{label:"pop",description:"integrates changes from the specified stash into the current branch and deletes the stash",picked:"pop"===e.subcommand,item:"pop"},{label:"push",description:"saves your local changes to a new stash and discards them from the working tree and index",picked:"push"===e.subcommand,item:"push"},{label:"rename",description:"renames the specified stash",picked:"rename"===e.subcommand,item:"rename"}],buttons:[s.QuickInputButtons.Back]}),i=yield t;return(0,u.i9)(t,e,i)?i[0].item:u.Vd}async*applyOrPopCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.Qp)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to apply to your working tree",picked:e.reference?.ref});if(i===u.Vd)break;e.reference=i}if(this.confirm(e.confirm)){const i=yield*this.applyOrPopCommandConfirmStep(e,t);if(i===u.Vd)continue;e.subcommand=i}(0,u.uZ)(e);try{if(await e.repo.stashApply("pop"===e.subcommand?`stash@{${e.reference.number}}`:e.reference.ref,{deleteAfter:"pop"===e.subcommand}),e.reference.message){const t=await this.container.git.getScmRepository(e.repo.path);null==t||t.inputBox.value||(t.inputBox.value=e.reference.message)}}catch(e){E.Yd.error(e,t.title),X.ef.is(e,X.bk.WorkingChanges)?s.window.showWarningMessage("Unable to apply stash. Your working tree changes would be overwritten. Please commit or stash your changes before trying again"):(0,I.W8)(e.message)}}}*applyOrPopCommandConfirmStep(e,t){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:"pop"===e.subcommand?`Will delete ${(0,o.Wh)(e.reference)} and apply the changes to the working tree`:`Will apply the changes from ${(0,o.Wh)(e.reference)} to the working tree`,item:e.subcommand},{label:ee(this.title,"pop"===e.subcommand?"apply":"pop"),detail:"pop"===e.subcommand?`Will apply the changes from ${(0,o.Wh)(e.reference)} to the working tree`:`Will delete ${(0,o.Wh)(e.reference)} and apply the changes to the working tree`,item:"pop"===e.subcommand?"apply":"pop"}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[T._9,T.Nv],onDidClickButton:(t,i)=>{i===T._9?(0,J.Fw)(e.reference,{pin:!1,preserveFocus:!0}):i===T.Nv&&(0,J.ay)(e.reference,{select:!0,expand:!0})}}),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}async*dropCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.Qp)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to delete",picked:e.reference?.ref});if(i===u.Vd)break;e.reference=i}if((yield*this.dropCommandConfirmStep(e,t))!==u.Vd){(0,u.uZ)(e);try{await e.repo.stashDelete(`stash@{${e.reference.number}}`,e.reference.ref)}catch(e){return E.Yd.error(e,t.title),void(0,I.W8)("Unable to delete stash")}}}}*dropCommandConfirmStep(e,t){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will delete ${(0,o.Wh)(e.reference)}`}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[T._9,T.Nv],onDidClickButton:(t,i)=>{i===T._9?(0,J.Fw)(e.reference,{pin:!1,preserveFocus:!0}):i===T.Nv&&(0,J.ay)(e.reference,{select:!0,expand:!0})}}),r=yield i;return(0,u.i9)(i,e,r)?void 0:u.Vd}async*listCommandSteps(e,t){for(t.title="Stashes";this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.Qp)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash",picked:e.reference?.ref});if(i===u.Vd)break;e.reference=i}const i=yield*le(this.container,{command:"show",state:{repo:e.repo,reference:e.reference}},this.pickedVia);e.counter--,i===u.Vd&&(0,u.uZ)(e)}}async*pushCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.message){if(null==e.message){const t=await this.container.git.getScmRepository(e.repo.path);e.message=t?.inputBox.value}const i=yield*this.pushCommandInputMessageStep(e,t);if(i===u.Vd)break;e.message=i}if(this.confirm(e.confirm)){const i=yield*this.pushCommandConfirmStep(e,t);if(i===u.Vd)continue;e.flags=i}try{await e.repo.stashSave(e.message,e.uris,{includeUntracked:e.flags.includes("--include-untracked"),keepIndex:e.flags.includes("--keep-index"),onlyStaged:e.flags.includes("--staged")}),(0,u.uZ)(e)}catch(i){if(E.Yd.error(i,t.title),i instanceof X.s8&&i.reason===X.g1.ConflictingStagedAndUnstagedLines&&e.flags.includes("--staged")){const t={title:"Yes"},r={title:"No",isCloseAffordance:!0};if(await s.window.showErrorMessage(i.message,{modal:!0},t,r)===t){e.uris=e.onlyStagedUris,e.flags.splice(e.flags.indexOf("--staged"),1);continue}return}const r=i?.message??i?.toString()??"";return r.includes("newer version of Git")?void s.window.showErrorMessage(`Unable to stash changes. ${r}`):void(0,I.W8)("Unable to stash changes")}}}async*pushCommandInputMessageStep(e,t){const i=(0,u.Ke)({title:(0,d.C8)(t.title,e,t,null!=e.uris?`${(0,h.vk)(C.NE.Dot,2,2)}${1===e.uris.length?(0,R.d)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}`:void 0),placeholder:"Please provide a stash message",value:e.message,prompt:"Enter stash message"}),r=yield i;return(0,u.$V)(i,e,r)&&await(0,u.Wm)(i,e,r)?r:u.Vd}*pushCommandConfirmStep(e,t){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),null==e.uris||0===e.uris.length?[c(e.flags,[],{label:t.title,detail:"Will stash uncommitted changes"}),c(e.flags,["--include-untracked"],{label:`${t.title} & Include Untracked`,description:"--include-untracked",detail:"Will stash uncommitted changes, including untracked files"}),c(e.flags,["--keep-index"],{label:`${t.title} & Keep Staged`,description:"--keep-index",detail:"Will stash uncommitted changes, but will keep staged files intact"})]:[c(e.flags,[],{label:t.title,detail:`Will stash changes from ${1===e.uris.length?(0,R.d)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}`}),c(e.flags,["--keep-index"],{label:`${t.title} & Keep Staged`,detail:`Will stash changes from ${1===e.uris.length?(0,R.d)(e.uris[0],{fileOnly:!0}):`${e.uris.length} files`}, but will keep staged files intact`})],void 0,{placeholder:`Confirm ${t.title}`}),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}async*renameCommandSteps(e,t){for(;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.Qp)(e,t,{stash:await this.container.git.getStash(e.repo.path),placeholder:(t,i)=>null==i?`No stashes found in ${e.repo.formattedName}`:"Choose a stash to rename",picked:e.reference?.ref});if(i===u.Vd)break;e.reference=i}if(e.counter<4||null==e.message){const i=yield*this.renameCommandInputMessageStep(e,t);if(i===u.Vd)continue;e.message=i}if(this.confirm(e.confirm)){if((yield*this.renameCommandConfirmStep(e,t))===u.Vd)continue}(0,u.uZ)(e);try{await e.repo.stashRename(e.reference.name,e.reference.ref,e.message,e.reference.stashOnRef)}catch(e){E.Yd.error(e,t.title),(0,I.W8)(e.message)}}}async*renameCommandInputMessageStep(e,t){const i=(0,u.Ke)({title:(0,d.C8)(t.title,e,t),placeholder:`Please provide a new message for ${(0,o.Wh)(e.reference,{icon:!1})}`,value:e.message??e.reference?.message,prompt:"Enter new stash message"}),r=yield i;return(0,u.$V)(i,e,r)&&await(0,u.Wm)(i,e,r)?r:u.Vd}*renameCommandConfirmStep(e,t){const i=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will rename ${(0,o.Wh)(e.reference)}`,item:e.subcommand}],void 0,{placeholder:`Confirm ${t.title}`,additionalButtons:[T._9,T.Nv],onDidClickButton:(t,i)=>{i===T._9?(0,J.Fw)(e.reference,{pin:!1,preserveFocus:!0}):i===T.Nv&&(0,J.ay)(e.reference,{select:!0,expand:!0})}}),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}}class StatusGitCommand extends u.tR{constructor(e,t){super(e,"status","status","Status",{description:"shows status information about a repository"});let i=0;null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:!1,...t?.state}}get canConfirm(){return!1}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,status:void 0,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)break;e.repo=i}if(t.status=await e.repo.getStatus(),null==t.status)return;t.title=`${this.title}${(0,h.vk)(C.NE.Dot,2,2)}${(0,o.Wh)((0,o.xB)(t.status.branch,e.repo.path,{refType:"branch",name:t.status.branch,remote:!1,upstream:null!=t.status.upstream?{name:t.status.upstream,missing:!1}:void 0}),{icon:!1})}`;const r=yield*(0,d.up)(e,t);if(r!==u.Vd){if(r instanceof j.Wv){const t=yield*r.executeSteps(this.pickedVia);e.counter--,t===u.Vd&&(0,u.uZ)(e)}else if(r instanceof H.$w){(0,u.uZ)(e),r.execute();break}}else i&&e.counter--}}}class SwitchGitCommand extends u.tR{constructor(e,t){super(e,"switch","switch","Switch Branch",{description:"aka checkout, switches the current branch to a specified branch"});let i=0;null==t?.state?.repos||Array.isArray(t.state.repos)&&0===t.state.repos.length||i++,null!=t?.state?.reference&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}async execute(e){await s.window.withProgress({location:s.ProgressLocation.Notification,title:`Switching ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repositories`} to ${e.reference.name}`},(()=>Promise.all(e.repos.map((t=>t.switch(e.reference.ref,{createBranch:e.createBranch,progress:!1})))))),null!=e.fastForwardTo&&e.repos[0].merge("--ff-only",e.fastForwardTo.ref)}isMatch(e){return super.isMatch(e)||"checkout"===e}isFuzzyMatch(e){return super.isFuzzyMatch(e)||"checkout"===e}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.commitsView,showTags:!1,switchToLocalFrom:void 0,title:this.title};null==e.repos||Array.isArray(e.repos)||(e.repos=[e.repos]);let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.repos||0===e.repos.length||(0,A.GI)(e.repos))if(i=!1,1===t.repos.length)i=!0,null==e.repos&&e.counter++,e.repos=[t.repos[0]];else{const i=yield*(0,d.j8)(e,t,{skipIfPossible:e.counter>=1});if(i===u.Vd)break;e.repos=i}if(e.counter<2||null==e.reference){const r=yield*(0,d.xC)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to switch to`});if(r===u.Vd){i&&e.counter--;continue}e.reference=r}if((0,o.UR)(e.reference)&&e.reference.remote){t.title=`Create Branch and ${this.title}`;const{values:i}=await this.container.git.getBranches(e.reference.repoPath,{filter:t=>t.upstream?.name===e.reference.name,sort:{orderBy:"date:desc"}});if(0===i.length){const i=yield*(0,d.f6)(e,t,{placeholder:"Please provide a name for the new branch",titleContext:` based on ${(0,o.Wh)(e.reference,{icon:!1})}`,value:e.createBranch??(0,o.Av)(e.reference)});if(i===u.Vd)continue;e.createBranch=i}else t.title=`${this.title} to Local Branch`,t.switchToLocalFrom=e.reference,e.reference=i[0],e.createBranch=void 0}else e.createBranch=void 0;if(this.confirm(e.confirm||null!=t.switchToLocalFrom)){const i=yield*this.confirmStep(e,t);if(i===u.Vd)continue;"switch+fast-forward"===i&&(e.fastForwardTo=t.switchToLocalFrom)}(0,u.uZ)(e),this.execute(e)}return e.counter<0?u.Vd:void 0}*confirmStep(e,t){let i;i=null!=t.switchToLocalFrom&&1===e.repos.length?[{label:`${t.title} and Fast-Forward`,description:"",detail:`Will switch to and fast-forward local ${(0,o.Wh)(e.reference)} in $(repo) ${e.repos[0].formattedName}`,item:"switch+fast-forward"}]:[];const r=this.createConfirmStep((0,d.C8)(`Confirm ${t.title}`,e,t),[{label:t.title,description:e.createBranch?"-b":"",detail:`Will ${e.createBranch?`create and switch to a new branch named ${e.createBranch} from ${(0,o.Wh)(e.reference)}`:`switch to ${null!=t.switchToLocalFrom?"local ":""}${(0,o.Wh)(e.reference)}`} in ${1===e.repos.length?`$(repo) ${e.repos[0].formattedName}`:`${e.repos.length} repositories`}`,item:"switch"},...i],void 0,{placeholder:`Confirm ${t.title}`}),n=yield r;return(0,u.i9)(r,e,n)?n[0].item:u.Vd}}const te=new Map([["create","Create"],["delete","Delete"]]);function ie(e,t){return null==t?e:`${te.get(t)} ${e}`}class TagGitCommand extends u.tR{subcommand;constructor(e,t){super(e,"tag","tag","Tag",{description:"create, or delete tags"});let i=0;if(null!=t?.state?.subcommand)switch(i++,t.state.subcommand){case"create":null!=t.state.reference&&i++,null!=t.state.name&&i++,null!=t.state.message&&i++;break;case"delete":null==t.state.references||Array.isArray(t.state.references)&&0===t.state.references.length||i++}null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return"delete"!==this.subcommand&&super.canSkipConfirm}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.tagsView,showTags:!1,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;const t=yield*this.pickSubcommandStep(e);if(t===u.Vd)break;e.subcommand=t}if(this.subcommand=e.subcommand,e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)continue;e.repo=i}switch(t.title=ie("delete"===e.subcommand?"Tags":this.title,e.subcommand),e.subcommand){case"create":yield*this.createCommandSteps(e,t),e.name=void 0;break;case"delete":yield*this.deleteCommandSteps(e,t);break;default:(0,u.uZ)(e)}i&&e.counter--}return e.counter<0?u.Vd:void 0}*pickSubcommandStep(e){const t=(0,u.xf)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"create",description:"creates a new tag",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified tags",picked:"delete"===e.subcommand,item:"delete"}],buttons:[s.QuickInputButtons.Back]}),i=yield t;return(0,u.i9)(t,e,i)?i[0].item:u.Vd}async*createCommandSteps(e,t){for(null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.Yv)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new tag from`,picked:e.reference?.ref??(await e.repo.getBranch())?.ref,titleContext:" from",value:(0,o.FT)(e.reference)?e.reference.ref:void 0});if(i===u.Vd)break;e.reference=i}if(e.counter<4||null==e.name){const i=yield*(0,d.fG)(e,t,{placeholder:"Please provide a name for the new tag",titleContext:` at ${(0,o.Wh)(e.reference,{capitalize:!0,icon:!1})}`,value:e.name??(0,o.Av)(e.reference)});if(i===u.Vd)continue;e.name=i}if(e.counter<5||null==e.message){const i=yield*this.createCommandInputMessageStep(e,t);if(i===u.Vd)continue;e.message=i}if(0===e.message.length||e.flags.includes("-m")||e.flags.push("-m"),this.confirm(e.confirm)){const i=yield*this.createCommandConfirmStep(e,t);if(i===u.Vd)continue;e.flags=i}(0,u.uZ)(e),e.repo.tag(...e.flags,...0!==e.message.length?[`"${e.message}"`]:[],e.name,e.reference.ref)}}async*createCommandInputMessageStep(e,t){const i=(0,u.Ke)({title:(0,d.C8)(`${t.title} at ${(0,o.Wh)(e.reference,{capitalize:!0,icon:!1})}`,e,t),placeholder:"Please provide an optional message to annotate the tag",value:e.message,prompt:"Enter optional message"}),r=yield i;return(0,u.$V)(i,e,r)&&await(0,u.Wm)(i,e,r)?r:u.Vd}*createCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,0!==e.message.length?["-m"]:[],{label:t.title,description:0!==e.message.length?"-m":"",detail:`Will create a new tag named ${e.name} at ${(0,o.Wh)(e.reference)}`}),c(e.flags,0!==e.message.length?["--force","-m"]:["--force"],{label:`Force ${t.title}`,description:"--force"+(0!==e.message.length?" -m":""),detail:`Will forcibly create a new tag named ${e.name} at ${(0,o.Wh)(e.reference)}`})],t),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}async*deleteCommandSteps(e,t){for(;this.canStepsContinue(e);){if(null==e.references||Array.isArray(e.references)||(e.references=[e.references]),e.counter<3||null==e.references||0===e.references.length){t.title=ie("Tags",e.subcommand);const i=yield*(0,d.yY)(e,t,{picked:e.references?.map((e=>e.ref)),placeholder:"Choose tags to delete"});if(i===u.Vd)break;e.references=i}t.title=ie((0,h._6)("Tag",e.references.length,{only:!0}),e.subcommand);(yield*this.deleteCommandConfirmStep(e,t))!==u.Vd&&((0,u.uZ)(e),e.repo.tagDelete(e.references))}}*deleteCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[{label:t.title,detail:`Will delete ${(0,o.Wh)(e.references)}`}],t),r=yield i;return(0,u.i9)(i,e,r)?void 0:u.Vd}}var re=i(8887),ne=i(5025),se=i(2674);function oe(e){if(null==e.repo||"string"==typeof e.repo)throw new Error("Missing repository")}const ae=new Map([["create","Create"],["delete","Delete"],["open","Open"]]);function ce(e,t){return null==t?e:`${ae.get(t)} ${e}`}class WorktreeGitCommand extends u.tR{subcommand;canSkipConfirmOverride;constructor(e,t){super(e,"worktree","worktree","Worktree",{description:"open, create, or delete worktrees"});let i=0;if(null!=t?.state?.subcommand)switch(i++,t.state.subcommand){case"create":null!=t.state.uri&&i++,null!=t.state.reference&&i++;break;case"delete":null==t.state.uris||Array.isArray(t.state.uris)&&0===t.state.uris.length||i++;break;case"open":null!=t.state.uri&&i++}null!=t?.state?.repo&&i++,this.initialState={counter:i,confirm:t?.confirm,...t?.state}}get canConfirm(){return null!=this.subcommand}get canSkipConfirm(){return this.canSkipConfirmOverride??!1}get skipConfirmKey(){return`${this.key}${null==this.subcommand?"":`-${this.subcommand}`}:${this.pickedVia}`}async*steps(e){const t={repos:this.container.git.openRepositories,associatedView:this.container.worktreesView,showTags:!1,title:this.title};let i=!1;for(;this.canStepsContinue(e);){if(t.title=this.title,e.counter<1||null==e.subcommand){this.subcommand=void 0;const t=yield*this.pickSubcommandStep(e);if(t===u.Vd)break;e.subcommand=t}if(this.subcommand=e.subcommand,e.counter<2||null==e.repo||"string"==typeof e.repo)if(i=!1,1===t.repos.length)i=!0,null==e.repo&&e.counter++,e.repo=t.repos[0];else{const i=yield*(0,d.lA)(e,t);if(i===u.Vd)continue;e.repo=i}e.repo=await e.repo.getMainRepository()??e.repo,oe(e);if((yield*(0,d.Oz)(e,t,re.x.Worktrees))===u.Vd)break;switch(t.title=ce("delete"===e.subcommand?"Worktrees":this.title,e.subcommand),e.subcommand){case"create":yield*this.createCommandSteps(e,t),e.uri=void 0;break;case"delete":null==e.uris||Array.isArray(e.uris)||(e.uris=[e.uris]),yield*this.deleteCommandSteps(e,t);break;case"open":yield*this.openCommandSteps(e,t);break;default:(0,u.uZ)(e)}i&&e.counter--}return e.counter<0?u.Vd:void 0}*pickSubcommandStep(e){const t=(0,u.xf)({title:this.title,placeholder:`Choose a ${this.label} command`,items:[{label:"open",description:"opens the specified worktree",picked:"open"===e.subcommand,item:"open"},{label:"create",description:"creates a new worktree",picked:"create"===e.subcommand,item:"create"},{label:"delete",description:"deletes the specified worktrees",picked:"delete"===e.subcommand,item:"delete"}],buttons:[s.QuickInputButtons.Back]}),i=yield t;return(0,u.i9)(t,e,i)?i[0].item:u.Vd}async*createCommandSteps(e,t){for(null==t.defaultUri&&(t.defaultUri=await e.repo.getWorktreesDefaultUri()),null==e.flags&&(e.flags=[]),t.pickedUri=void 0,e.confirm=!0,this.canSkipConfirmOverride=void 0;this.canStepsContinue(e);){if(e.counter<3||null==e.reference){const i=yield*(0,d.Yv)(e,t,{placeholder:e=>`Choose a branch${e.showTags?" or tag":""} to create the new worktree for`,picked:e.reference?.ref??(await e.repo.getBranch())?.ref,titleContext:" for",value:(0,o.FT)(e.reference)?e.reference.ref:void 0});if(i===u.Vd)break;e.reference=i}if(e.counter<4||null==e.uri)if(null==e.reference||r.D.get("worktrees.promptForLocation",e.repo.folder)||null==t.defaultUri){const i=yield*this.createCommandChoosePathStep(e,t,{titleContext:` for ${(0,o.Wh)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,defaultUri:t.defaultUri});if(i===u.Vd)continue;e.uri=i,t.pickedUri=e.uri}else e.uri=t.defaultUri;if(this.confirm(e.confirm)){const i=yield*this.createCommandConfirmStep(e,t);if(i===u.Vd)continue;[e.uri,e.flags]=i}e.confirm=!0,this.canSkipConfirmOverride=void 0;if("branch"===e.reference?.refType&&e.reference?.remote&&!e.flags.includes("-b")){e.flags.push("-b"),e.createBranch=(0,o.Av)(e.reference);null!=await e.repo.getBranch(e.createBranch)&&(e.createBranch=e.reference.name)}if(e.flags.includes("-b")){let i;if(null!=e.createBranch){let t=await this.container.git.validateBranchOrTagName(e.repo.path,e.createBranch);if(t){t=null==await e.repo.getBranch(e.createBranch)}t||(i=e.createBranch,e.createBranch=void 0)}if(null==e.createBranch){const r=yield*(0,d.f6)(e,t,{placeholder:"Please provide a name for the new branch",titleContext:` from ${(0,o.Wh)(e.reference,{capitalize:!0,icon:!1,label:"branch"!==e.reference.refType})}`,value:i??e.createBranch??(0,o.Av)(e.reference)});if(r===u.Vd){e.flags=[];continue}e.createBranch=r}}const i=e.flags.includes("--direct")?e.uri:s.Uri.joinPath(e.uri,...(e.createBranch??e.reference.name).replace(/\\/g,"/").split("/"));let n;try{n=await e.repo.createWorktree(i,{commitish:e.reference?.name,createBranch:e.flags.includes("-b")?e.createBranch:void 0,detach:e.flags.includes("--detach"),force:e.flags.includes("--force")}),!1!==e.reveal&&(0,ne.ay)(void 0,{select:!0,focus:!0})}catch(t){if(X.P6.is(t,X.hK.AlreadyCheckedOut)&&!e.flags.includes("--force")){const t={title:"Create New Branch"},i={title:"Create Anyway"},r={title:"Cancel",isCloseAffordance:!0},n=await s.window.showWarningMessage(`Unable to create the new worktree because ${(0,o.Wh)(e.reference,{icon:!1,quoted:!0})} is already checked out.\n\nWould you like to create a new branch for this worktree or forcibly create it anyway?`,{modal:!0},t,i,r);if(n===t){e.flags.push("-b"),this.canSkipConfirmOverride=!0,e.confirm=!1;continue}if(n===i){e.flags.push("--force"),this.canSkipConfirmOverride=!0,e.confirm=!1;continue}}else X.P6.is(t,X.hK.AlreadyExists)?s.window.showErrorMessage(`Unable to create a new worktree in '${se.e.getFriendlyPath(i)}' because the folder already exists and is not empty.`,"OK"):(0,I.W8)(`Unable to create a new worktree in '${se.e.getFriendlyPath(i)}.`)}if((0,u.uZ)(e),null==n)break;const a=r.D.get("worktrees.openAfterCreate");if("never"===a)break;if("prompt"===a){yield*this.openCommandSteps({subcommand:"open",repo:e.repo,uri:n.uri,counter:3,confirm:!0},t);break}queueMicrotask((()=>{switch(a){case"always":(0,$.ic)(n.uri,{location:"currentWindow"});break;case"alwaysNewWindow":(0,$.ic)(n.uri,{location:"newWindow"});break;case"onlyWhenEmpty":(0,$.ic)(n.uri,{location:s.workspace.workspaceFolders?.length?"currentWindow":"newWindow"})}}))}}async*createCommandChoosePathStep(e,t,i){const r=(0,u.jf)({show:async r=>{const n=null!=i?.defaultUri,o=await s.window.showInformationMessage(`Choose a location in which to create the worktree${i.titleContext}.`,{modal:!0},{title:"Choose Location"},...n?[{title:"Use Default Location"}]:[]);if(null==o)return _.Xe.Back;if("Use Default Location"===o.title)return i.defaultUri;const a=await s.window.showOpenDialog({canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1,defaultUri:t.pickedUri??e.uri??t.defaultUri,openLabel:"Select Worktree Location",title:`${(0,d.C8)(`Choose a Worktree Location${i.titleContext}`,e,t)}`});return null==a||0===a.length?_.Xe.Back:a[0]}}),n=yield r;return(0,u.$V)(r,e,n)&&await(0,u.Wm)(r,e,n)?n:u.Vd}*createCommandConfirmStep(e,t){const i=t.pickedUri??e.uri,r=(0,h.AO)(se.e.getFriendlyPath(i),60);let n,a=!0;const l=e.repo.uri,p=`${(0,b.EZ)(l.path)}.worktrees`;l.toString()!==i.toString()?n=(0,b.$d)(i,l)?s.Uri.joinPath(l,"..",p):(0,b.EZ)(i.path)===p?i:s.Uri.joinPath(i,p):(n=s.Uri.joinPath(l,"..",p),a=!1);const m=e.createBranch??(null!=e.reference?(0,o.Av)(e.reference):void 0),g=m?s.Uri.joinPath(n,...m.replace(/\\/g,"/").split("/")):n,f=(0,h.AO)(se.e.getFriendlyPath(g),65),w=(0,h.AO)(se.e.getFriendlyPath(s.Uri.joinPath(n,"<new-branch-name>")),60),v="branch"===e.reference?.refType&&e.reference?.remote,y=(0,u.Tv)((0,d.C8)(`Confirm ${t.title} • ${(0,o.Wh)(e.reference,{icon:!1,label:!1})}`,e,t),[c(e.flags,v?["-b"]:[],{label:v?"Create Local Branch and Worktree":t.title,description:" in subfolder",detail:`Will create worktree in $(folder) ${f}`},n),c(e.flags,["-b"],{label:v?"Create New Local Branch and Worktree":"Create New Branch and Worktree",description:" in subfolder",detail:`Will create worktree in $(folder) ${w}`},n),...a?[(0,H.fz)(),c(e.flags,["--direct"],{label:v?"Create Local Branch and Worktree":t.title,description:" directly in folder",detail:`Will create worktree directly in $(folder) ${r}`},i),c(e.flags,["-b","--direct"],{label:v?"Create New Local Branch and Worktree":"Create New Branch and Worktree",description:" directly in folder",detail:`Will create worktree directly in $(folder) ${r}`},i)]:[]],t),C=yield y;return(0,u.i9)(y,e,C)?[C[0].context,C[0].item]:u.Vd}async*deleteCommandSteps(e,t){for(t.worktrees=await e.repo.getWorktrees(),null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.uris||0===e.uris.length){t.title=ce("Worktrees",e.subcommand);const i=yield*(0,d.Mb)(e,t,{filter:e=>e.main||!e.opened,includeStatus:!0,picked:e.uris?.map((e=>e.toString())),placeholder:"Choose worktrees to delete"});if(i===u.Vd)break;e.uris=i.map((e=>e.uri))}t.title=ce((0,h._6)("Worktree",e.uris.length,{only:!0}),e.subcommand);const i=yield*this.deleteCommandConfirmStep(e,t);if(i!==u.Vd){e.flags=i,(0,u.uZ)(e);for(const i of e.uris){let r=!1;do{r=!1;const n=e.flags.includes("--force");try{if(n){const e=t.worktrees.find((e=>e.uri.toString()===i.toString()));let r;try{r=await(e?.getStatus())}catch{}if(r?.hasChanges){const e={title:"Force Delete"},t={title:"Cancel",isCloseAffordance:!0};if(await s.window.showWarningMessage(`The worktree in '${i.fsPath}' has uncommitted changes.\n\nDeleting it will cause those changes to be FOREVER LOST.\nThis is IRREVERSIBLE!\n\nAre you sure you still want to delete it?`,{modal:!0},e,t)!==e)return}}await e.repo.deleteWorktree(i,{force:n})}catch(t){if(X.Nk.is(t)){if(t.reason===X.xe.MainWorkingTree)s.window.showErrorMessage("Unable to delete the main worktree");else if(!n){const n={title:"Force Delete"},o={title:"Cancel",isCloseAffordance:!0};await s.window.showErrorMessage(t.reason===X.xe.HasChanges?`Unable to delete worktree because there are UNCOMMITTED changes in '${i.fsPath}'.\n\nForcibly deleting it will cause those changes to be FOREVER LOST.\nThis is IRREVERSIBLE!\n\nWould you like to forcibly delete it?`:`Unable to delete worktree in '${i.fsPath}'.\n\nWould you like to try to forcibly delete it?`,{modal:!0},n,o)===n&&(e.flags.push("--force"),r=!0)}}else(0,I.W8)(`Unable to delete worktree in '${i.fsPath}.`)}}while(r)}}}}*deleteCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:t.title,detail:`Will delete ${(0,h._6)("worktree",e.uris.length,{only:1===e.uris.length})}${1===e.uris.length?` in $(folder) ${se.e.getFriendlyPath(e.uris[0])}`:""}`}),c(e.flags,["--force"],{label:`Force ${t.title}`,description:"including ANY UNCOMMITTED changes",detail:`Will forcibly delete ${(0,h._6)("worktree",e.uris.length,{only:1===e.uris.length})} ${1===e.uris.length?` in $(folder) ${se.e.getFriendlyPath(e.uris[0])}`:""}`})],t),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}async*openCommandSteps(e,t){for(t.worktrees=await e.repo.getWorktrees(),null==e.flags&&(e.flags=[]);this.canStepsContinue(e);){if(e.counter<3||null==e.uri){t.title=ce("Worktree",e.subcommand);const i=yield*(0,d.UP)(e,t,{includeStatus:!0,picked:e.uri?.toString(),placeholder:"Choose worktree to open"});if(i===u.Vd)break;e.uri=i.uri}t.title=ce("Worktree",e.subcommand);const i=yield*this.openCommandConfirmStep(e,t);if(i===u.Vd)continue;e.flags=i,(0,u.uZ)(e);const r=t.worktrees.find((t=>t.uri.toString()===e.uri.toString()));if(null==r)break;e.flags.includes("--reveal-explorer")?(0,ne.qM)(r):(0,$.ic)(r.uri,{location:(0,ne.BC)(e.flags)})}}*openCommandConfirmStep(e,t){const i=(0,u.Tv)((0,d.C8)(`Confirm ${t.title}`,e,t),[c(e.flags,[],{label:t.title,detail:`Will open in the current window, the worktree in $(folder) ${se.e.getFriendlyPath(e.uri)}`}),c(e.flags,["--new-window"],{label:`${t.title} in a New Window`,detail:`Will open in a new window, the worktree in $(folder) ${se.e.getFriendlyPath(e.uri)}`}),c(e.flags,["--add-to-workspace"],{label:"Add Worktree to Workspace",detail:`Will add into the current workspace, the worktree in $(folder) ${se.e.getFriendlyPath(e.uri)}`}),c(e.flags,["--reveal-explorer"],{label:"Reveal in File Explorer",detail:`Will open in the File Explorer, the worktree in $(folder) ${se.e.getFriendlyPath(e.uri)}`})],t),r=yield i;return(0,u.i9)(i,e,r)?r[0].item:u.Vd}}function le(e,t,i){const r=new PickCommandStep(e,t),n=r.find(t.command);return null==n?function*(){}():(r.setCommand(n,i),n.executeSteps())}class PickCommandStep{constructor(e,t){this.container=e;const i=(0,n.fw)("gitlens:hasVirtualFolders",!1),s=i||(0,n.fw)("gitlens:readonly",!1)||(0,n.fw)("gitlens:untrusted",!1);if(this.items=[s?void 0:new BranchGitCommand(e,"branch"===t?.command?t:void 0),s?void 0:new CherryPickGitCommand(e,"cherry-pick"===t?.command?t:void 0),i?void 0:new CoAuthorsGitCommand(e,"co-authors"===t?.command?t:void 0),s?void 0:new FetchGitCommand(e,"fetch"===t?.command?t:void 0),new LogGitCommand(e,"log"===t?.command?t:void 0),s?void 0:new MergeGitCommand(e,"merge"===t?.command?t:void 0),s?void 0:new PullGitCommand(e,"pull"===t?.command?t:void 0),s?void 0:new PushGitCommand(e,"push"===t?.command?t:void 0),s?void 0:new RebaseGitCommand(e,"rebase"===t?.command?t:void 0),s?void 0:new RemoteGitCommand(e,"remote"===t?.command?t:void 0),s?void 0:new ResetGitCommand(e,"reset"===t?.command?t:void 0),s?void 0:new RevertGitCommand(e,"revert"===t?.command?t:void 0),new SearchGitCommand(e,"search"===t?.command||"grep"===t?.command?t:void 0),new ShowGitCommand(e,"show"===t?.command?t:void 0),i?void 0:new StashGitCommand(e,"stash"===t?.command?t:void 0),i?void 0:new StatusGitCommand(e,"status"===t?.command?t:void 0),s?void 0:new SwitchGitCommand(e,"switch"===t?.command||"checkout"===t?.command?t:void 0),s?void 0:new TagGitCommand(e,"tag"===t?.command?t:void 0),i?void 0:new WorktreeGitCommand(e,"worktree"===t?.command?t:void 0)].filter((e=>null!=e)),"usage"===r.D.get("gitCommands.sortBy")){const e=this.container.storage.getWorkspace("gitComandPalette:usage");null!=e&&this.items.sort(((t,i)=>(e[i.key]??0)-(e[t.key]??0)))}this.hiddenItems=[]}buttons=[];hiddenItems;ignoreFocusOut=!1;items;matchOnDescription=!0;placeholder="Choose a git command";title="GitLens";_command;get command(){return this._command}find(e,t=!1){if(t){const t=e.toLowerCase();return this.items.find((e=>e.isFuzzyMatch(t)))??this.hiddenItems.find((e=>e.isFuzzyMatch(t)))}return this.items.find((t=>t.isMatch(e)))??this.hiddenItems.find((t=>t.isMatch(e)))}setCommand(e,t){null!=this._command&&(this._command.picked=!1),null!=e&&(e.picked=!0,e.pickedVia=t),this._command=e,null!=e&&this.updateCommandUsage(e.key,Date.now())}async updateCommandUsage(e,t){let i=this.container.storage.getWorkspace("gitComandPalette:usage");void 0===i&&(i=Object.create(null)),i[e]=t,await this.container.storage.storeWorkspace("gitComandPalette:usage",i)}}},2138:(e,t,i)=>{i.d(t,{_:()=>m});var r=i(5255),n=i(7462),s=i(439),o=i(6503),a=i(7925),c=i(635),l=i(9529),h=i(4336),u=i(7139),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor;let m=class extends u.pu{constructor(e){super([r.Gh.OpenCommitOnRemote,r.Gh.Deprecated_OpenCommitInRemote,r.Gh.CopyRemoteCommitUrl]),this.container=e}static getMarkdownCommandArgs(e){const t="string"==typeof e?{sha:e}:e;return super.getMarkdownCommandArgsCore(r.Gh.OpenCommitOnRemote,t)}preExecute(e,t){let i=e.uri;if("editorLine"===e.type&&(t={...t,line:e.line}),(0,u.en)(e)){if(e.node.commit.isUncommitted)return Promise.resolve(void 0);t={...t,sha:e.node.commit.sha},i=e.node.uri}return(0,u.jT)(e)&&(t={sha:e.item.ref},i=e.uri),e.command===r.Gh.CopyRemoteCommitUrl&&(t={...t,clipboard:!0}),this.execute(e.editor,i,t)}async execute(e,t,i){let d=null!=(t=(0,u.SX)(t,e))?await n.YY.fromUri(t):void 0;const p=(await(0,c.hM)(d,e,i?.clipboard?"Copy Remote Commit URL":"Open Commit On Remote"))?.path;if(p){null==d&&(d=n.YY.fromRepoPath(p)),i={...i};try{if(null==i.sha){const t=i.line??e?.selection.active.line;if(null==t)return;const r=await this.container.git.getBlameForLine(d,t,e?.document);if(null==r)return void(0,a.zk)("Unable to open commit on remote provider");i.sha=r.commit.isUncommitted?await r.commit.getPreviousSha()??s.Ii:r.commit.sha}await(0,l.P0)(r.Gh.OpenOnRemote,{resource:{type:o.J.Commit,sha:i.sha},repoPath:p,clipboard:i.clipboard})}catch(e){h.Yd.error(e,"OpenCommitOnRemoteCommand"),(0,a.W8)("Unable to open commit on remote provider")}}}};m=((e,t,i,r)=>{for(var n,s=r>1?void 0:r?p(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&d(t,i,s),s})([(0,l.WD)()],m)},4893:(e,t,i)=>{i.d(t,{D:()=>w});var r=i(9496),n=i(5255),s=i(6897),o=i(7462),a=i(4321),c=i(7925),l=i(1857),h=i(9729),u=i(9529),d=i(4336),p=i(3620),m=i(7139),g=Object.defineProperty,f=Object.getOwnPropertyDescriptor;let w=class extends m.pu{constructor(e){super([n.Gh.OpenFileAtRevision,n.Gh.OpenBlamePriorToChange]),this.container=e}static getMarkdownCommandArgs(e,t,i){let s;if(e instanceof r.Uri){s={revisionUri:e,line:i,annotationType:t}}else s=e;return super.getMarkdownCommandArgsCore(n.Gh.OpenFileAtRevision,s)}async preExecute(e,t){if(e.command===n.Gh.OpenBlamePriorToChange){if(null==(t={...t,annotationType:"blame"}).revisionUri&&null!=e.editor){const i=e.editor.selection.active.line;if(i>=0)try{const r=await o.YY.fromUri(e.editor.document.uri),n=await this.container.git.getBlameForLine(r,i);if(null!=n)if(n.commit.isUncommitted){const e=await n.commit.getPreviousComparisonUrisForLine(i);if(null==e?.previous)return void(0,c.RR)(n.commit);t.revisionUri=this.container.git.getRevisionUri(e.previous)}else{if(null==(null!=n?await(n?.commit.getPreviousSha()):void 0))return void(0,c.RR)(n.commit);t.revisionUri=this.container.git.getRevisionUri(n.commit.getGitUri(!0))}}catch(e){d.Yd.error(e,"OpenBlamePriorToChangeCommand")}}if(null==t.revisionUri)return void(0,c.W8)("Unable to open blame")}return this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,m.SX)(t,e)))return;const r=await o.YY.fromUri(t);null==(i={...i}).line&&(i.line=e?.selection.active.line??0);try{if(null==i.revisionUri){const e=this.container.git.getLogForFile(r.repoPath,r.fsPath).then((e=>e??(r.sha?this.container.git.getLogForFile(r.repoPath,r.fsPath,{ref:r.sha}):void 0))),t=`Open ${"blame"===i.annotationType?"Blame":"File"} at Revision${(0,p.vk)(n.NE.Dot,2,2)}`,o=await(0,l.D)(e,`${t}${r.getFormattedFileName({suffix:r.sha?`:${(0,a.zL)(r.sha)}`:void 0,truncateTo:n.d$-t.length})}`,`Choose a commit to ${"blame"===i.annotationType?"blame":"open"} the file revision from`,{picked:r.sha,keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{await(0,s.YS)(t.item.file,t.item,{annotationType:i.annotationType,line:i.line,preserveFocus:!0,preview:!1})},showOtherReferences:[h.$w.fromCommand("Choose a Branch or Tag...",n.Gh.OpenFileAtRevisionFrom),h.$w.fromCommand("Choose a Stash...",n.Gh.OpenFileAtRevisionFrom,{stash:!0})]});if(null==o?.file)return;return void await(0,s.YS)(o.file,o,{annotationType:i.annotationType,line:i.line,...i.showOptions})}await(0,s.YS)(i.revisionUri,{annotationType:i.annotationType,line:i.line,...i.showOptions})}catch(e){d.Yd.error(e,"OpenFileAtRevisionCommand"),(0,c.W8)("Unable to open file at revision")}}};w=((e,t,i,r)=>{for(var n,s=r>1?void 0:r?f(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&g(t,i,s),s})([(0,u.WD)()],w)},3016:(e,t,i)=>{i.d(t,{DY:()=>f,Ft:()=>h,I4:()=>a,Lp:()=>b,Mn:()=>l,My:()=>s,Nv:()=>p,Q0:()=>o,_9:()=>g,_r:()=>d,cq:()=>v,eY:()=>c,ip:()=>m,jQ:()=>ToggleQuickInputButton,vU:()=>w,v_:()=>u,zY:()=>y});var r=i(9496),n=i(7759);class ToggleQuickInputButton{constructor(e,t=!1){this.state=e,this._on=t}get iconPath(){const e=this.getToggledState().icon;return"string"==typeof e?{dark:r.Uri.file(n.W.instance.context.asAbsolutePath(`images/dark/${e}.svg`)),light:r.Uri.file(n.W.instance.context.asAbsolutePath(`images/light/${e}.svg`))}:e}get tooltip(){return this.getToggledState().tooltip}get on(){return this._on}set on(e){this._on=e}getState(){return"function"==typeof this.state?this.state():this.state}getToggledState(){return this.on?this.getState().on:this.getState().off}}class SelectableQuickInputButton extends ToggleQuickInputButton{constructor(e,t,i=!1){super({off:{tooltip:e,icon:t.off},on:{tooltip:e,icon:t.on}},i)}}const s={iconPath:new r.ThemeIcon("sync"),tooltip:"Fetch"},o={iconPath:new r.ThemeIcon("refresh"),tooltip:"Load More"},a=class extends SelectableQuickInputButton{constructor(e=!1){super("Match Case",{off:"icon-match-case",on:"icon-match-case-selected"},e)}},c=class extends SelectableQuickInputButton{constructor(e=!1){super("Match All",{off:"icon-match-all",on:"icon-match-all-selected"},e)}},l=class extends SelectableQuickInputButton{constructor(e=!1){super("Match using Regular Expressions",{off:"icon-match-regex",on:"icon-match-regex-selected"},e)}},h={iconPath:new r.ThemeIcon("git-commit"),tooltip:"Choose a Specific Commit"},u=class extends ToggleQuickInputButton{constructor(e=!1,t,i){super((()=>({on:{tooltip:"Choose a Specific Commit",icon:new r.ThemeIcon("git-commit")},off:{tooltip:"Choose a Branch"+(t.showTags?" or Tag":""),icon:new r.ThemeIcon("git-branch")}})),e),this.onDidClick=i}},d={iconPath:new r.ThemeIcon("empty-window"),tooltip:"Open in New Window"},p={iconPath:new r.ThemeIcon("search"),tooltip:"Reveal in Side Bar"},m={iconPath:new r.ThemeIcon("settings-gear"),tooltip:"Set as Default Remote"},g={iconPath:new r.ThemeIcon("eye"),tooltip:"Open Details"},f={iconPath:new r.ThemeIcon("compare-changes"),tooltip:"Open Changes"},w={iconPath:new r.ThemeIcon("link-external"),tooltip:"Show Results in Side Bar"},v=class extends SelectableQuickInputButton{constructor(e=!1){super("Show Tags",{off:new r.ThemeIcon("tag"),on:"icon-tag-selected"},e)}},y={iconPath:new r.ThemeIcon("check"),tooltip:"Will always confirm"},b=class extends ToggleQuickInputButton{constructor(e=!1,t){super((()=>({on:{tooltip:"Will confirm",icon:{dark:r.Uri.file(n.W.instance.context.asAbsolutePath("images/dark/icon-check.svg")),light:r.Uri.file(n.W.instance.context.asAbsolutePath("images/light/icon-check.svg"))}},off:{tooltip:"Skips confirm",icon:{dark:r.Uri.file(n.W.instance.context.asAbsolutePath("images/dark/icon-no-check.svg")),light:r.Uri.file(n.W.instance.context.asAbsolutePath("images/light/icon-no-check.svg"))}}})),e),this.onDidClick=t}}},847:(e,t,i)=>{i.d(t,{B$:()=>L,C8:()=>B,FO:()=>j,KT:()=>oe,Kf:()=>V,Lt:()=>Z,Mb:()=>se,NQ:()=>H,Oz:()=>pe,Qp:()=>ie,Rj:()=>J,UP:()=>ne,Yv:()=>Y,bR:()=>X,f6:()=>G,fD:()=>ce,fG:()=>q,j8:()=>te,lA:()=>ee,nI:()=>le,s4:()=>K,sd:()=>Q,up:()=>ue,v$:()=>U,xC:()=>z,yY:()=>re});var r=i(5255),n=i(7759),s=i(3401),o=i(6897),a=i(7445),c=i(4155),l=i(8834),h=i(252),u=i(6713),d=i(5025),p=i(5367),m=i(6450),g=i(4321),f=i(3050),w=i(6503),v=i(3646),y=i(9502),b=i(4794),C=i(3931),A=i(9729),S=i(3599),P=i(1742),k=i(5009),R=i(4968),D=i(2800),_=i(5148),T=i(1774),F=i(3105),$=i(7469),O=i(3620),I=i(2509),E=i(4239),x=i(3016);function B(e,t,i,n){if(1===i.repos.length)return n?`${e}${(0,O.$G)(n,r.d$-e.length)}`:e;let s;return s=null!=t.repo?`${n??""}${(0,O.vk)(r.NE.Dot,2,2)}${t.repo.formattedName}`:1===t.repos.length?`${n??""}${(0,O.vk)(r.NE.Dot,2,2)}${t.repos[0].formattedName}`:`${(0,O.vk)(r.NE.Dot,2,2)}${t.repos.length} repositories`,`${e}${(0,O.$G)(s,r.d$-e.length)}`}async function W(e,t){return L(e,["branches"],{buttons:t?.buttons,filter:null!=t?.filter?{branches:t.filter}:void 0,picked:t?.picked,sort:null==t?.sort||{branches:t.sort}})}async function N(e,t){if(null==e)return[];return(await e.getRemotes(null!=t?.filter?{filter:t.filter}:void 0)).map((e=>(0,P.vl)(e,null!=t?.picked&&("string"==typeof t.picked?e.name===t.picked:t.picked.includes(e.name)),{buttons:t?.buttons,upstream:!0})))}async function M(e,{buttons:t,filter:i,includeStatus:r,picked:n}){const s=e instanceof v._j?await e.getWorktrees():e;return Promise.all([...s.filter((e=>null==i||i(e))).map((async e=>{let i,s=!1;if(r)try{i=await e.getStatus()}catch{s=!0}return(0,P.E0)(e,null!=n&&("string"==typeof n?e.uri.toString()===n:n.includes(e.uri.toString())),s,{buttons:t,path:!0,status:i})}))])}async function L(e,t,{buttons:i,filter:r,picked:n,sort:s}={}){if(null==e)return[];let o,a,c=!1;if(e instanceof v._j||1===e.length){c=!0;const i=e instanceof v._j?e:e[0],[n,l]=await Promise.allSettled([t.includes("branches")?i.getBranches({filter:r?.branches,sort:"boolean"==typeof s?s:s?.branches}):void 0,t.includes("tags")?i.getTags({filter:r?.tags,sort:!0}):void 0]);o=(0,$.Sb)(n)?.values??[],a=(0,$.Sb)(l)?.values??[]}else{const[i,n]=await Promise.allSettled([t.includes("branches")?Promise.allSettled(e.map((e=>e.getBranches({filter:r?.branches,sort:"boolean"==typeof s?s:s?.branches})))):void 0,t.includes("tags")?Promise.allSettled(e.map((e=>e.getTags({filter:r?.tags,sort:"boolean"==typeof s?s:s?.tags})))):void 0]),c="fulfilled"===i.status?i.value?.filter((e=>"fulfilled"===e.status))?.map((e=>e.value.values)):void 0,l="fulfilled"===n.status?n.value?.filter((e=>"fulfilled"===e.status))?.map((e=>e.value.values)):void 0;t.includes("branches")&&null!=c&&(o=(0,p.YF)((0,D.jV)(c,((e,t)=>e.name===t.name)))),t.includes("tags")&&null!=l&&(a=(0,y.Pj)((0,D.jV)(l,((e,t)=>e.name===t.name))))}return null!=o&&0!==o.length||null!=a&&0!==a.length?null==o||0===o.length||null!=a&&0!==a.length?null==a||0===a.length||null!=o&&0!==o.length?[(0,A.fz)("Branches"),...await Promise.all(o.filter((e=>!e.remote)).map((e=>(0,P.RE)(e,null!=n&&("string"==typeof n?e.ref===n:n.includes(e.ref)),{buttons:i,current:!!c&&"checkmark",ref:c,status:c})))),(0,A.fz)("Tags"),...a.map((e=>(0,P.MH)(e,null!=n&&("string"==typeof n?e.ref===n:n.includes(e.ref)),{buttons:i,message:!1,ref:c,type:!0}))),(0,A.fz)("Remote Branches"),...await Promise.all(o.filter((e=>e.remote)).map((e=>(0,P.RE)(e,null!=n&&("string"==typeof n?e.ref===n:n.includes(e.ref)),{buttons:i,current:!!c&&"checkmark",ref:c,status:c,type:"remote"}))))]:a.map((e=>(0,P.MH)(e,null!=n&&("string"==typeof n?e.ref===n:n.includes(e.ref)),{buttons:i,message:!1,ref:c}))):[(0,A.fz)("Branches"),...await Promise.all(o.filter((e=>!e.remote)).map((e=>(0,P.RE)(e,null!=n&&("string"==typeof n?e.ref===n:n.includes(e.ref)),{buttons:i,current:!!c&&"checkmark",ref:c,status:c,type:"remote"})))),(0,A.fz)("Remote Branches"),...await Promise.all(o.filter((e=>e.remote)).map((e=>(0,P.RE)(e,null!=n&&("string"==typeof n?e.ref===n:n.includes(e.ref)),{buttons:i,current:!!c&&"checkmark",ref:c,status:c,type:"remote"}))))]:[]}function U(e,t){return async(i,r)=>{let s=!1;if(r.startsWith("#")&&(s=!0,r=r.substring(1)),null==e)return!1;if(Array.isArray(e)){if(1!==e.length)return!1;e=e[0]}if(s&&t?.ranges&&(0,g.yk)(r))return i.items=[(0,P.RP)(r,e.path,!0,{alwaysShow:!0,buttons:t?.buttons,ref:!1,icon:!1})],!0;if(!await n.W.instance.git.validateReference(e.path,r))return!!s&&(i.items=[(0,S.fw)(S.Xe.Back,!0,{label:"Enter a reference or commit SHA"})],!0);if(!s&&await n.W.instance.git.hasBranchOrTag(e.path,{filter:{branches:e=>e.name.includes(r),tags:e=>e.name.includes(r)}}))return!1;const o=await n.W.instance.git.getCommit(e.path,r);return i.items=[(0,P.YY)(o,!0,{alwaysShow:!0,buttons:t?.buttons,compact:!0,icon:!0})],!0}}async function*G(e,t,i){const r=(0,E.Ke)({title:B(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter branch name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid branch name"];if("repo"in e){if(!await n.W.instance.git.validateBranchOrTagName(e.repo.path,t))return[!1,`'${t}' isn't a valid branch name`];return await e.repo.getBranch(t)?[!1,`A branch named '${t}' already exists`]:[!0,void 0]}let i=!0;for(const r of e.repos){if(i=await n.W.instance.git.validateBranchOrTagName(r.path,t),!i)return[!1,`'${t}' isn't a valid branch name`];if(await r.getBranch(t))return[!1,`A branch named '${t}' already exists`]}return[!0,void 0]}}),s=yield r;return(0,E.$V)(r,e,s)&&await(0,E.Wm)(r,e,s)?s:E.Vd}async function*H(e,t,i){const r=(0,E.Ke)({title:B(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter remote name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid remote name"];if(!!/[^a-zA-Z0-9-_.]/.test(t))return[!1,`'${t}' isn't a valid remote name`];if("repo"in e){if(0!==(await e.repo.getRemotes({filter:e=>e.name===t})).length)return[!1,`A remote named '${t}' already exists`]}return[!0,void 0]}}),n=yield r;return(0,E.$V)(r,e,n)&&await(0,E.Wm)(r,e,n)?n:E.Vd}async function*V(e,t,i){const r=(0,E.Ke)({title:B(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter remote URL",validate:e=>{if(null==e)return[!1,void 0];if(0===(e=e.trim()).length)return[!1,"Please enter a valid remote URL"];const t=b.gK.test(e);return[t,t?void 0:`'${e}' isn't a valid remote URL`]}}),n=yield r;return(0,E.$V)(r,e,n)&&await(0,E.Wm)(r,e,n)?n:E.Vd}async function*q(e,t,i){const r=(0,E.Ke)({title:B(`${t.title}${i.titleContext??""}`,e,t),placeholder:i.placeholder,value:i.value,prompt:"Enter tag name",validate:async t=>{if(null==t)return[!1,void 0];if(0===(t=t.trim()).length)return[!1,"Please enter a valid tag name"];if("repo"in e){const i=await n.W.instance.git.validateBranchOrTagName(e.repo.path,t);return[i,i?void 0:`'${t}' isn't a valid tag name`]}let i=!0;for(const r of e.repos)if(i=await n.W.instance.git.validateBranchOrTagName(r.path,t),!i)return[!1,`'${t}' isn't a valid branch name`];return[!0,void 0]}}),s=yield r;return(0,E.$V)(r,e,s)&&await(0,E.Wm)(r,e,s)?s:E.Vd}async function*Q(e,t,{filter:i,picked:r,placeholder:n,titleContext:o}){const a=await W(e.repo,{buttons:[x.Nv],filter:i,picked:r}),c=(0,E.xf)({title:B(`${t.title}${o??""}`,e,t),placeholder:0===a.length?`No branches found in ${e.repo.formattedName}`:n,matchOnDetail:!0,items:0===a.length?[(0,S.fw)(S.Xe.Back,!0),(0,S.fw)(S.Xe.Cancel)]:a,onDidClickItemButton:(e,t,{item:i})=>{t===x.Nv&&s.ay(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await s.ay(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}}),l=yield c;return(0,E.i9)(c,e,l)?l[0].item:E.Vd}async function*j(e,t,{filter:i,picked:r,placeholder:n,sort:o,titleContext:a}){const c=await W(e.repo,{buttons:[x.Nv],filter:i,picked:r,sort:o}),l=(0,E.xf)({multiselect:0!==c.length,title:B(`${t.title}${a??""}`,e,t),placeholder:0===c.length?`No branches found in ${e.repo.formattedName}`:n,matchOnDetail:!0,items:0===c.length?[(0,S.fw)(S.Xe.Back,!0),(0,S.fw)(S.Xe.Cancel)]:c,onDidClickItemButton:(e,t,{item:i})=>{t===x.Nv&&s.ay(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await s.ay(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}}),h=yield l;return(0,E.i9)(l,e,h)?h.map((e=>e.item)):E.Vd}async function*Y(e,t,{filter:i,picked:n,placeholder:a,titleContext:c,value:l,additionalButtons:h,ranges:d}){t.showTags=!0;const p=new x.cq(t.showTags),m=async()=>L(e.repo,t.showTags?["branches","tags"]:["branches"],{buttons:"boolean"==typeof t.pickCommitForItem?[x.Ft,x.Nv]:[x.Nv],filter:i,picked:n,sort:!0}),f=await m(),w=(0,E.xf)({title:B(`${t.title}${c??""}`,e,t),placeholder:0===f.length?`No branches${t.showTags?" or tags":""} found in ${e.repo.formattedName}`:`${"string"==typeof a?a:a(t)}${r.NE.Space.repeat(3)}(or enter a reference using #)`,matchOnDescription:!0,matchOnDetail:!0,value:l,selectValueWhenShown:!0,items:0===f.length?[(0,S.fw)(S.Xe.Back,!0),(0,S.fw)(S.Xe.Cancel)]:f,additionalButtons:[...h??[],p],onDidClickItemButton:(e,i,{item:r})=>i===x.Ft?(t.pickCommitForItem=!0,!0):(i===x.Nv&&((0,g.UR)(r)?s.ay(r,{select:!0,focus:!1,expand:!0}):(0,g.gA)(r)?u.ay(r,{select:!0,focus:!1,expand:!0}):(0,g.FT)(r)&&o.Fw(r,{pin:!1,preserveFocus:!0})),!1),onDidClickButton:async(i,n)=>{if(n===p){i.busy=!0;try{t.showTags=!t.showTags,p.on=t.showTags;const n=await m();i.placeholder=0===n.length?`${e.repo.formattedName} has no branches${t.showTags?" or tags":""}`:`${"string"==typeof a?a:a(t)}${r.NE.Space.repeat(3)}(or enter a reference using #)`,i.items=n}finally{i.busy=!1}}},keys:["right","alt+right","ctrl+right"],onDidPressKey:e=>{if(0===e.activeItems.length)return;const t=e.activeItems[0].item;(0,g.UR)(t)?s.ay(t,{select:!0,focus:!1,expand:!0}):(0,g.gA)(t)?u.ay(t,{select:!0,focus:!1,expand:!0}):(0,g.FT)(t)&&o.Fw(t,{pin:!1,preserveFocus:!0})},onValidateValue:U(e.repo,{ranges:d})}),v=yield w;return(0,E.i9)(w,e,v)?v[0].item:E.Vd}async function*z(e,t,{filter:i,picked:n,placeholder:a,titleContext:c,value:l}){t.showTags=1===e.repos.length;const h=new x.cq(t.showTags),d=()=>L(e.repos,t.showTags?["branches","tags"]:["branches"],{buttons:[x.Nv],filter:{branches:1===e.repos.length?void 0:e=>!e.remote,...i},picked:n??e.reference?.ref,sort:{branches:{orderBy:"date:desc"},tags:{orderBy:"date:desc"}}}),p=await d(),m=(0,E.xf)({title:B(`${t.title}${c??""}`,e,t),placeholder:0===p.length?`No ${1===e.repos.length?"":"common "}branches${t.showTags?" or tags":""} found in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repositories`}`:`${"string"==typeof a?a:a(t)}${r.NE.Space.repeat(3)}(or enter a reference using #)`,matchOnDescription:!0,matchOnDetail:!0,value:l??((0,g.FT)(e.reference)?e.reference.ref:void 0),selectValueWhenShown:!0,items:0===p.length?[(0,S.fw)(S.Xe.Back,!0),(0,S.fw)(S.Xe.Cancel)]:p,additionalButtons:[h],onDidClickItemButton:(e,t,{item:i})=>{t===x.Nv&&((0,g.UR)(i)?s.ay(i,{select:!0,focus:!1,expand:!0}):(0,g.gA)(i)?u.ay(i,{select:!0,focus:!1,expand:!0}):(0,g.FT)(i)&&o.Fw(i,{pin:!1,preserveFocus:!0}))},onDidClickButton:async(i,n)=>{if(n===h){i.busy=!0;try{t.showTags=!t.showTags,h.on=t.showTags;const n=await d();i.placeholder=0===n.length?`No ${1===e.repos.length?"":"common "}branches${t.showTags?" or tags":""} found in ${1===e.repos.length?e.repos[0].formattedName:`${e.repos.length} repositories`}`:`${"string"==typeof a?a:a(t)}${r.NE.Space.repeat(3)}(or enter a reference using #)`,i.items=n}finally{i.busy=!1}}},keys:["right","alt+right","ctrl+right"],onDidPressKey:e=>{if(0===e.activeItems.length)return;const t=e.activeItems[0].item;(0,g.UR)(t)?s.ay(t,{select:!0,focus:!1,expand:!0}):(0,g.gA)(t)?u.ay(t,{select:!0,focus:!1,expand:!0}):(0,g.FT)(t)&&o.Fw(t,{pin:!1,preserveFocus:!0})},onValidateValue:U(e.repos)}),f=yield m;return(0,E.i9)(m,e,f)?f[0].item:E.Vd}async function*K(e,t,{ignoreFocusOut:i,log:r,onDidLoadMore:n,picked:s,placeholder:a,showInSideBarCommand:c,showInSideBarButton:l,titleContext:h}){function u(e){if(null==e)return[(0,S.fw)(S.Xe.Back,!0),(0,S.fw)(S.Xe.Cancel)];const t=[x._9,x.Nv];return null!=(0,F.Ps)(e.commits)?.[1].file&&t.splice(0,0,x.DY),[...(0,F.UI)(e.commits.values(),(e=>(0,P.YY)(e,null!=s&&("string"==typeof s?e.ref===s:s.includes(e.ref)),{buttons:t,compact:!0,icon:!0}))),...e?.hasMore?[(0,S.fw)(S.Xe.LoadMore)]:[]]}const d=(0,E.xf)({title:B(`${t.title}${h??""}`,e,t),placeholder:"string"==typeof a?a:a(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,value:"string"==typeof s&&0===r?.count?s:void 0,selectValueWhenShown:!0,items:null!=c?[c,...u(r)]:u(r),onDidLoadMore:async e=>(e.keepScrollPosition=!0,r=await(r?.more?.(_.D.get("advanced.maxListItems"))),n?.(r),"string"!=typeof a&&(e.placeholder=a(t,r)),u(r)),additionalButtons:[...null!=l?.button?[l?.button]:[],...r?.hasMore?[x.Q0]:[]],onDidClickItemButton:(e,t,i)=>{if(!A.$w.is(i))switch(t){case x._9:o.Fw(i.item,{pin:!1,preserveFocus:!0});break;case x.Nv:o.ay(i.item,{select:!0,focus:!1,expand:!0});break;case x.DY:{const e=i.item.file?.path;null!=e&&o.vw(e,i.item);break}}},onDidClickButton:(e,t)=>{if(null==r)return;const i=e.activeItems.filter((e=>!A.$w.is(e)));t===l?.button&&l.onDidClick(i)},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{if(0===e.activeItems.length)return;const i=e.activeItems.filter((e=>!A.$w.is(e)));"ctrl+right"===t?o.Fw(i[0].item,{pin:!1,preserveFocus:!0}):await o.ay(i[0].item,{select:!0,focus:!1,expand:!0})},onValidateValue:U(e.repo,{buttons:[x._9,x.Nv]})}),p=yield d;return(0,E.i9)(d,e,p)?A.$w.is(p[0])?((0,E.uZ)(e),await p[0].execute(),E.Vd):p[0].item:E.Vd}function*J(e,t,{log:i,onDidLoadMore:r,picked:n,placeholder:s,titleContext:a}){function c(e){return null==e?[(0,S.fw)(S.Xe.Back,!0),(0,S.fw)(S.Xe.Cancel)]:[...(0,F.UI)(e.commits.values(),(e=>(0,P.YY)(e,null!=n&&("string"==typeof n?e.ref===n:n.includes(e.ref)),{buttons:[x._9,x.Nv],compact:!0,icon:!0})))]}const l=(0,E.xf)({title:B(`${t.title}${a??""}`,e,t),multiselect:null!=i,placeholder:"string"==typeof s?s:s(t,i),matchOnDescription:!0,matchOnDetail:!0,items:c(i),onDidLoadMore:async e=>(e.keepScrollPosition=!0,i=await(i?.more?.(_.D.get("advanced.maxListItems"))),r?.(i),"string"!=typeof s&&(e.placeholder=s(t,i)),c(i)),additionalButtons:[...i?.hasMore?[x.Q0]:[]],onDidClickItemButton:(e,t,{item:i})=>{switch(t){case x._9:o.Fw(i,{pin:!1,preserveFocus:!0});break;case x.Nv:o.ay(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{0!==e.activeItems.length&&("ctrl+right"===t?o.Fw(e.activeItems[0].item,{pin:!1,preserveFocus:!0}):await o.ay(e.activeItems[0].item,{select:!0,focus:!1,expand:!0}))}}),h=yield l;return(0,E.i9)(l,e,h)?h.map((e=>e.item)):E.Vd}async function*X(e,t,i="Choose contributors"){const r=(await n.W.instance.git.getOrOpenScmRepository(e.repo.path))?.inputBox.value,s=(0,E.xf)({title:B(t.title,e,t),allowEmpty:!0,multiselect:!0,placeholder:i,matchOnDescription:!0,items:(await n.W.instance.git.getContributors(e.repo.path)).map((e=>(0,P.RI)(e,r?.includes(e.getCoauthor()),{buttons:[x.Nv]}))),onDidClickItemButton:(e,t,{item:i})=>{t===x.Nv&&a.a(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:e=>{0!==e.activeItems.length&&a.a(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}}),o=yield s;return(0,E.i9)(s,e,o)?o.map((e=>e.item)):E.Vd}async function*Z(e,t,{filter:i,picked:r,placeholder:n,titleContext:s}){const o=await N(e.repo,{buttons:[x.Nv],filter:i,picked:r}),a=(0,E.xf)({title:B(`${t.title}${s??""}`,e,t),placeholder:0===o.length?`No remotes found in ${e.repo.formattedName}`:n,matchOnDetail:!0,items:0===o.length?[(0,S.fw)(S.Xe.Back,!0),(0,S.fw)(S.Xe.Cancel)]:o,onDidClickItemButton:(e,t,{item:i})=>{t===x.Nv&&c.ay(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await c.ay(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}}),l=yield a;return(0,E.i9)(a,e,l)?l[0].item:E.Vd}async function*ee(e,t,i="Choose a repository"){if("string"==typeof e.repo&&(e.repo=n.W.instance.git.getRepository(e.repo),null!=e.repo))return e.repo;const r=e.repo??await n.W.instance.git.getOrOpenRepositoryForEditor(),s=(0,E.xf)({title:t.title,placeholder:i,items:0===t.repos.length?[(0,S.fw)(S.Xe.Cancel)]:await Promise.all(t.repos.map((e=>(0,P.FO)(e,e.id===r?.id,{branch:!0,buttons:[x.Nv],fetched:!0,status:!0})))),onDidClickItemButton:(e,i,{item:r})=>{i===x.Nv&&l.ay(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:e=>{0!==e.activeItems.length&&l.ay(e.activeItems[0].item.path,t.associatedView,{select:!0,focus:!1,expand:!0})}}),o=yield s;return(0,E.i9)(s,e,o)?o[0].item:E.Vd}async function*te(e,t,i){let r;if(i={placeholder:"Choose repositories",skipIfPossible:!1,...i},null!=e.repos)if((0,D.GI)(e.repos)){if(r=(0,D.DZ)(e.repos,(e=>t.repos.find((t=>t.path===e)))),i.skipIfPossible&&0!==r.length&&e.repos.length===r.length)return r}else r=e.repos;else{const e=await n.W.instance.git.getOrOpenRepositoryForEditor();r=null!=e?[e]:[]}const s=(0,E.xf)({multiselect:!0,title:t.title,placeholder:i.placeholder,items:0===t.repos.length?[(0,S.fw)(S.Xe.Cancel)]:await Promise.all(t.repos.map((e=>(0,P.FO)(e,r.some((t=>t.id===e.id)),{branch:!0,buttons:[x.Nv],fetched:!0,status:!0})))),onDidClickItemButton:(e,i,{item:r})=>{i===x.Nv&&l.ay(r.path,t.associatedView,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:e=>{0!==e.activeItems.length&&l.ay(e.activeItems[0].item.path,t.associatedView,{select:!0,focus:!1,expand:!0})}}),o=yield s;return(0,E.i9)(s,e,o)?o.map((e=>e.item)):E.Vd}function*ie(e,t,{ignoreFocusOut:i,stash:r,picked:n,placeholder:s,titleContext:o}){const a=(0,E.xf)({title:B(`${t.title}${o??""}`,e,t),placeholder:"string"==typeof s?s:s(t,r),ignoreFocusOut:i,matchOnDescription:!0,matchOnDetail:!0,items:null==r?[(0,S.fw)(S.Xe.Back,!0),(0,S.fw)(S.Xe.Cancel)]:[...(0,F.UI)(r.commits.values(),(e=>(0,P.YY)(e,null!=n&&("string"==typeof n?e.ref===n:n.includes(e.ref)),{buttons:[x._9],compact:!0,icon:!0})))],onDidClickItemButton:(e,t,{item:i})=>{t===x._9&&h.Fw(i,{pin:!1,preserveFocus:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await h.Fw(e.activeItems[0].item,{pin:!1,preserveFocus:!0})}}),c=yield a;return(0,E.i9)(a,e,c)?c[0].item:E.Vd}async function*re(e,t,{filter:i,picked:r,placeholder:n,titleContext:s}){const o=await async function(e,t){return L(e,["tags"],{buttons:t?.buttons,filter:null!=t?.filter?{tags:t.filter}:void 0,picked:t?.picked,sort:null==t?.sort||{tags:t.sort}})}(e.repo,{buttons:[x.Nv],filter:i,picked:r}),a=(0,E.xf)({multiselect:0!==o.length,title:B(`${t.title}${s??""}`,e,t),placeholder:0===o.length?`No tags found in ${e.repo.formattedName}`:n,matchOnDetail:!0,items:0===o.length?[(0,S.fw)(S.Xe.Back,!0),(0,S.fw)(S.Xe.Cancel)]:o,onDidClickItemButton:(e,t,{item:i})=>{t===x.Nv&&u.ay(i,{select:!0,focus:!1,expand:!0})},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await u.ay(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}}),c=yield a;return(0,E.i9)(a,e,c)?c.map((e=>e.item)):E.Vd}async function*ne(e,t,{filter:i,includeStatus:r,picked:n,placeholder:s,titleContext:o}){const a=await M(t.worktrees??e.repo,{buttons:[x._r,x.Nv],filter:i,includeStatus:r,picked:n}),c=(0,E.xf)({title:B(`${t.title}${o??""}`,e,t),placeholder:0===a.length?`No worktrees found in ${e.repo.formattedName}`:s,matchOnDetail:!0,items:0===a.length?[(0,S.fw)(S.Xe.Back,!0),(0,S.fw)(S.Xe.Cancel)]:a,onDidClickItemButton:(e,t,{item:i})=>{switch(t){case x._r:(0,I.ic)(i.uri,{location:"newWindow"});break;case x.Nv:d.ay(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await d.ay(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}}),l=yield c;return(0,E.i9)(c,e,l)?l[0].item:E.Vd}async function*se(e,t,{filter:i,includeStatus:r,picked:n,placeholder:s,titleContext:o}){const a=await M(t.worktrees??e.repo,{buttons:[x._r,x.Nv],filter:i,includeStatus:r,picked:n}),c=(0,E.xf)({multiselect:0!==a.length,title:B(`${t.title}${o??""}`,e,t),placeholder:0===a.length?`No worktrees found in ${e.repo.formattedName}`:s,matchOnDetail:!0,items:0===a.length?[(0,S.fw)(S.Xe.Back,!0),(0,S.fw)(S.Xe.Cancel)]:a,onDidClickItemButton:(e,t,{item:i})=>{switch(t){case x._r:(0,I.ic)(i.uri,{location:"newWindow"});break;case x.Nv:d.ay(i,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async e=>{0!==e.activeItems.length&&await d.ay(e.activeItems[0].item,{select:!0,focus:!1,expand:!0})}}),l=yield c;return(0,E.i9)(c,e,l)?l.map((e=>e.item)):E.Vd}async function*oe(e,t){const i=(0,E.xf)({title:B((0,g.Wh)(e.reference,{capitalize:!0,icon:!1}),e,t),placeholder:(0,g.Wh)(e.reference,{capitalize:!0,icon:!1}),ignoreFocusOut:!0,items:await ae(e),onDidClickItemButton:(t,i,r)=>{switch(i){case x._9:(0,g.pZ)(e.reference)?h.Fw(e.reference,{pin:!1,preserveFocus:!0}):o.Fw(e.reference,{pin:!1,preserveFocus:!0});break;case x.Nv:(0,g.pZ)(e.reference)?h.ay(e.reference,{select:!0,focus:!1,expand:!0}):o.ay(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{0!==e.activeItems.length&&await e.activeItems[0].onDidPressKey(t)}}),r=yield i;return(0,E.i9)(i,e,r)?r[0]:E.Vd}async function ae(e){const t=[new C.EE(e.reference),new C.sQ(e.reference)];let i;if((0,m.G2)(e.reference))t.push((0,A.fz)("Actions"),new P.Wv("Apply Stash...",{command:"stash",state:{subcommand:"apply",repo:e.repo,reference:e.reference}}),new P.Wv("Delete Stash...",{command:"stash",state:{subcommand:"drop",repo:e.repo,reference:e.reference}}),(0,A.fz)(),new C.NC(e.reference));else{const r=await n.W.instance.git.getRemotesWithProviders(e.repo.path,{sort:!0});r?.length&&t.push((0,A.fz)(f.ss.getHighlanderProviderName(r)??"Remote"),new k.az(r,{type:w.J.Commit,sha:e.reference.sha}),new k.eO(r,{type:w.J.Commit,sha:e.reference.sha})),t.push((0,A.fz)("Actions"));const s=await n.W.instance.git.getBranch(e.repo.path),[o,a]=await Promise.all([null!=s?n.W.instance.git.getCommitBranches(e.repo.path,e.reference.ref,s.name,{commitDate:(0,m.f_)(e.reference)?e.reference.committer.date:void 0}):void 0,s?.remote||null==s?.upstream?void 0:e.reference.isPushed()]);Boolean(o?.length)?(i=!a,i&&t.push(new P.Wv("Push to Commit...",{command:"push",state:{repos:e.repo,reference:e.reference}})),t.push(new P.Wv("Revert Commit...",{command:"revert",state:{repo:e.repo,references:[e.reference]}}),new P.Wv(`Reset ${s?.name??"Current Branch"} to Commit...`,{command:"reset",state:{repo:e.repo,reference:e.reference}}),new P.Wv(`Reset ${s?.name??"Current Branch"} to Previous Commit...`,{command:"reset",state:{repo:e.repo,reference:(0,g.xB)(`${e.reference.ref}^`,e.reference.repoPath,{refType:"revision",name:`${e.reference.name}^`,message:e.reference.message})}}))):t.push(new P.Wv("Cherry Pick Commit...",{command:"cherry-pick",state:{repo:e.repo,references:[e.reference]}})),t.push(new P.Wv(`Rebase ${s?.name??"Current Branch"} onto Commit...`,{command:"rebase",state:{repo:e.repo,reference:e.reference}}),new P.Wv("Switch to Commit...",{command:"switch",state:{repos:[e.repo],reference:e.reference}}),(0,A.fz)(),new P.Wv("Create Branch at Commit...",{command:"branch",state:{subcommand:"create",repo:e.repo,reference:e.reference}}),new P.Wv("Create Tag at Commit...",{command:"tag",state:{subcommand:"create",repo:e.repo,reference:e.reference}}),(0,A.fz)("Copy"),new C.OT(e.reference),new C.NC(e.reference))}return t.push((0,A.fz)("Open"),new C.CV(e.reference),new C.Y4(e.reference),new C.o$(e.reference),(0,A.fz)(),new C.lN(e.reference),new C.A1(e.reference)),t.push((0,A.fz)("Compare"),new C.Jw(e.reference),new C.m5(e.reference)),t.push((0,A.fz)(),new C.eG(e.reference),new C.nl(e.reference)),t.push((0,A.fz)("Browse"),new C.Lf(e.reference,{openInNewWindow:!1}),new C.Lf(e.reference,{before:!0,openInNewWindow:!1}),new C.Lf(e.reference,{openInNewWindow:!0}),new C.Lf(e.reference,{before:!0,openInNewWindow:!0})),t.unshift(new C.PF(e.reference,{unpublished:i,hint:"Click to see all changed files"})),t}function*ce(e,t,i){e.reference.files;const r=(0,E.xf)({title:B((0,g.Wh)(e.reference,{capitalize:!0,icon:!1}),e,t),placeholder:(0,g.Wh)(e.reference,{capitalize:!0,icon:!1}),ignoreFocusOut:!0,items:[new C.PF(e.reference,{picked:null==e.fileName,hint:`Click to see ${(0,m.G2)(e.reference)?"stash":"commit"} actions`}),(0,A.fz)("Files"),...e.reference.files?.map((t=>new C.zr(e.reference,t,i?.picked===t.path)))??[]],matchOnDescription:!0,onDidClickItemButton:(t,i,r)=>{switch(i){case x._9:(0,g.pZ)(e.reference)?h.Fw(e.reference,{pin:!1,preserveFocus:!0}):o.Fw(e.reference,{pin:!1,preserveFocus:!0});break;case x.Nv:(0,g.pZ)(e.reference)?h.ay(e.reference,{select:!0,focus:!1,expand:!0}):o.ay(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{0!==e.activeItems.length&&await e.activeItems[0].onDidPressKey(t)}}),n=yield r;return(0,E.i9)(r,e,n)?n[0]:E.Vd}async function*le(e,t){const i=(0,E.xf)({title:B((0,g.Wh)(e.reference,{capitalize:!0,icon:!1}),e,t,`${(0,O.vk)(r.NE.Dot,2,2)}${(0,T.d)(e.fileName,{fileOnly:!0})}`),placeholder:`${(0,T.d)(e.fileName,{relativeTo:e.repo.path})} in ${(0,g.Wh)(e.reference,{icon:!1})}`,ignoreFocusOut:!0,items:await he(e),matchOnDescription:!0,onDidClickItemButton:(t,i,r)=>{switch(i){case x._9:(0,g.pZ)(e.reference)?h.Fw(e.reference,{pin:!1,preserveFocus:!0}):o.Fw(e.reference,{pin:!1,preserveFocus:!0});break;case x.Nv:(0,g.pZ)(e.reference)?h.ay(e.reference,{select:!0,focus:!1,expand:!0}):o.ay(e.reference,{select:!0,focus:!1,expand:!0})}},keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{0!==e.activeItems.length&&await e.activeItems[0].onDidPressKey(t)}}),n=yield i;return(0,E.i9)(i,e,n)?n[0]:E.Vd}async function he(e){const t=await e.reference.findFile(e.fileName);if(null==t)return[];const i=[new C.EE(e.reference),new C.sQ(e.reference)];if((0,m.G2)(e.reference))i.push((0,A.fz)(),new C.NC(e.reference),(0,A.fz)("Actions"),new C.do(e.reference,t),new C.QP(e.reference,t),(0,A.fz)(),new C.NC(e.reference));else{const r=await n.W.instance.git.getRemotesWithProviders(e.repo.path,{sort:!0});r?.length&&i.push((0,A.fz)(f.ss.getHighlanderProviderName(r)??"Remote"),new k.az(r,{type:w.J.Revision,fileName:e.fileName,commit:e.reference}),new k.eO(r,{type:w.J.Revision,fileName:e.fileName,commit:e.reference}),(0,A.fz)(),new k.az(r,{type:w.J.Commit,sha:e.reference.ref}),new k.eO(r,{type:w.J.Commit,sha:e.reference.sha})),i.push((0,A.fz)("Actions"),new C.do(e.reference,t),new C.QP(e.reference,t),(0,A.fz)("Copy"),new C.OT(e.reference),new C.NC(e.reference))}return i.push((0,A.fz)("Open"),new C.lp(e.reference,e.fileName),new C.aU(e.reference,e.fileName),new C.xL(e.reference,e.fileName),(0,A.fz)()),"D"!==t.status&&i.push(new C.ZO(e.reference,t)),i.push(new C.Wt(e.reference,t)),i.push((0,A.fz)("Compare"),new C.Jw(e.reference),new C.m5(e.reference)),i.push((0,A.fz)("Browse"),new C.Lf(e.reference,{openInNewWindow:!1}),new C.Lf(e.reference,{before:!0,openInNewWindow:!1}),new C.Lf(e.reference,{openInNewWindow:!0}),new C.Lf(e.reference,{before:!0,openInNewWindow:!0})),i.unshift(new C.PF(e.reference,{file:t,hint:"Click to see all changed files"})),i}function*ue(e,t){const i=t.status.getUpstreamStatus({expand:!0,separator:", "}),r=t.status.getFormattedDiffStatus({expand:!0,separator:", "}),n=(0,E.xf)({title:B(t.title,e,t),placeholder:`${i?`${i}, ${r}`:r}`,ignoreFocusOut:!0,items:de(e,t),keys:["right","alt+right","ctrl+right"],onDidPressKey:async(e,t)=>{0!==e.activeItems.length&&await e.activeItems[0].onDidPressKey(t)}}),s=yield n;return(0,E.i9)(n,e,s)?s[0]:E.Vd}function de(e,t){const i=[],n=t.status.computeWorkingTreeStatus();let s;return s=0===n.staged&&0===n.unstaged?"No working tree changes":`$(files) ${n.staged?`${(0,O._6)("staged file",n.staged)} (${n.stagedStatus})`:""}${n.unstaged?`${n.staged?", ":""}${(0,O._6)("unstaged file",n.unstaged)} (${n.unstagedStatus})`:""}`,t.status.upstream?(0===t.status.state.ahead&&0===t.status.state.behind?i.push((0,S.fw)(S.Xe.Noop,!0,{label:`$(git-branch) ${t.status.branch} is up to date with $(git-branch) ${t.status.upstream}`,detail:s})):0!==t.status.state.ahead&&0!==t.status.state.behind?i.push((0,S.fw)(S.Xe.Noop,!0,{label:`$(git-branch) ${t.status.branch} has diverged from $(git-branch) ${t.status.upstream}`,detail:s})):0!==t.status.state.ahead?i.push((0,S.fw)(S.Xe.Noop,!0,{label:`$(git-branch) ${t.status.branch} is ahead of $(git-branch) ${t.status.upstream}`,detail:s})):0!==t.status.state.behind&&i.push((0,S.fw)(S.Xe.Noop,!0,{label:`$(git-branch) ${t.status.branch} is behind $(git-branch) ${t.status.upstream}`,detail:s})),0!==t.status.state.behind&&i.push(new P.Wv(`$(cloud-download) ${(0,O._6)("commit",t.status.state.behind)} behind`,{command:"log",state:{repo:e.repo,reference:(0,g.xB)((0,g.oI)(t.status.ref,t.status.upstream),e.repo.path)}})),0!==t.status.state.ahead&&i.push(new P.Wv(`$(cloud-upload) ${(0,O._6)("commit",t.status.state.ahead)} ahead`,{command:"log",state:{repo:e.repo,reference:(0,g.xB)((0,g.oI)(t.status.upstream,t.status.ref),e.repo.path)}}))):i.push((0,S.fw)(S.Xe.Noop,!0,{label:`$(git-branch) ${t.status.branch} has no upstream`,detail:s})),t.status.files.length&&(i.push(new C.K6(n.stagedAddsAndChanges.concat(n.unstagedAddsAndChanges))),i.push(new C.rl(n.stagedAddsAndChanges.concat(n.unstagedAddsAndChanges)))),n.staged>0&&(i.push(new C.K6(n.stagedAddsAndChanges,{label:"$(files) Open Staged Files"})),i.push(new C.rl(n.stagedAddsAndChanges,{label:"$(files) Open Only Staged Files"}))),n.unstaged>0&&(i.push(new C.K6(n.unstagedAddsAndChanges,{label:"$(files) Open Unstaged Files"})),i.push(new C.rl(n.unstagedAddsAndChanges,{label:"$(files) Open Only Unstaged Files"}))),t.status.files.length&&i.push(new A.$w("$(x) Close Unchanged Files",r.Gh.CloseUnchangedFiles)),i}async function*pe(e,t,i){const r=await n.W.instance.git.access(i,e.repo.path);if(r.allowed)return;const s=[];let o;if(!1===r.subscription.current.account?.verified)s.push((0,S.fw)(S.Xe.RequiresVerification,!0)),o="You must verify your email before you can continue";else{if(null==r.subscription.required)return;o="✨ Requires a trial or paid plan for use on privately hosted repos",(0,R.aG)(r.subscription.required)&&null!=r.subscription.current.account?(o="✨ Requires a paid plan for use on privately hosted repos",s.push((0,S.fw)(S.Xe.RequiresPaidSubscription,!0))):null!=r.subscription.current.account||(0,R.gA)(r.subscription.current)?s.push((0,S.fw)(S.Xe.ExtendTrial)):s.push((0,S.fw)(S.Xe.StartPreviewTrial,!0))}const a=(0,E.xf)({title:B(t.title,e,t),placeholder:o,items:[...s,(0,S.fw)(S.Xe.Cancel)]}),c=yield a;return(0,E.i9)(a,e,c)?void 0:E.Vd}},4239:(e,t,i)=>{i.d(t,{$V:()=>d,Dr:()=>a,Gj:()=>o,Ke:()=>m,Tv:()=>p,Vd:()=>c,Wm:()=>h,YB:()=>l,a:()=>s,i9:()=>u,jf:()=>f,tR:()=>QuickCommand,uZ:()=>w,xf:()=>g});var r=i(3599),n=i(5148);function s(e){return"object"==typeof e&&null!=e.show}function o(e){return"object"==typeof e&&null==e.items&&null==e.show}function a(e){return"object"==typeof e&&null!=e.items}const c=Symbol("BreakStep");class QuickCommand{constructor(e,t,i,r,n={}){this.container=e,this.key=t,this.label=i,this.title=r,this.description=n.description,this.detail=n.detail}description;detail;initialState;_currentStep;_stepsIterator;get canConfirm(){return!0}get canSkipConfirm(){return!0}_picked=!1;get picked(){return this._picked}set picked(e){this._picked=e,e||(this._pickedVia="menu")}_pickedVia="menu";get pickedVia(){return this._pickedVia}set pickedVia(e){this._pickedVia=e}get skipConfirmKey(){return`${this.key}:${this.pickedVia}`}get value(){return this._currentStep}confirm(e){return!this.canConfirm||!this.canSkipConfirm||(null!=e?e:!n.D.get("gitCommands.skipConfirmations").includes(this.skipConfirmKey))}isMatch(e){return this.key===e}isFuzzyMatch(e){return this.label===e}executeSteps(){return this.steps(this.getStepState(!0))}async previous(){return(await this.next(r.Xe.Back)).value}async next(e){null==this._stepsIterator&&(this._stepsIterator=this.steps(this.getStepState(!1)));const t=await this._stepsIterator.next(e);return t.done&&(this.initialState=void 0,this._stepsIterator=void 0),t.value===c?(this._currentStep=void 0,{...t,value:void 0}):(this._currentStep=t.value,t)}async retry(){return await this.next(r.Xe.Noop),this.value}canStepsContinue(e){return e.counter>=(e.startingStep??0)}createConfirmStep(e,t,i,r={}){return p(e,t,{title:this.title},i,r)}getStepState(e){return{counter:0,...this.initialState,startingStep:e?this.initialState?.counter??0:0}}}function l(e){return e instanceof QuickCommand}async function h(e,t,i){if(!d(e,t,i))return!1;const[r]=await(e.validate?.(i))??[!0];return!!r&&(t.counter++,!0)}function u(e,t,i){return!!d(e,t,i)&&(!!(e.validate?.(i)??1)&&(t.counter++,!0))}function d(e,t,i){if(null==i)return!1;if((0,r.wX)(i)){switch(i){case r.Xe.Back:t.counter--,t.counter<=(t.startingStep??0)&&(t.counter=0);break;case r.Xe.Cancel:w(t)}return!1}return!0}function p(e,t,i,n,s={}){return{placeholder:`Confirm ${i.title}`,title:e,ignoreFocusOut:!0,items:[...t,n??(0,r.fw)(r.Xe.Cancel)],selectedItems:[t.find((e=>e.picked))??t[0]],...s}}function m(e){return e.ignoreFocusOut=!0,e}function g(e){return e}function f(e){return e}function w(e){e.counter=-1}},6199:(e,t,i)=>{i.d(t,{t:()=>d});var r=i(5255),n=i(3050),s=i(635),o=i(9529),a=i(3105),c=i(7139),l=Object.defineProperty,h=Object.getOwnPropertyDescriptor,u=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?h(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&l(t,i,s),s};let d=class extends c.mY{constructor(e){super(r.Gh.ConnectRemoteProvider),this.container=e}static getMarkdownCommandArgs(e){let t;return t=n.ss.is(e)?{remote:e.name,repoPath:e.repoPath}:e,super.getMarkdownCommandArgsCore(r.Gh.ConnectRemoteProvider,t)}preExecute(e,t){return(0,c.C$)(e)&&(t={...t,remote:e.node.remote.name,repoPath:e.node.remote.repoPath}),this.execute(t)}async execute(e){let t,i,r;if(null==e?.repoPath){const e=new Map;for(const t of this.container.git.openRepositories){const i=await t.getRichRemote();null==i?.provider||await i.provider.isConnected()||e.set(t,i)}if(0===e.size)return!1;if(1===e.size){let i;[i,t]=(0,a.Ps)(e),r=i.path}else{const i=await(0,s.E2)(void 0,"Choose which repository to connect to the remote provider",[...e.keys()]);if(null==i?.item)return;r=i.repoPath,t=e.get(i.item)}}else if(null==e?.remote){if(r=e.repoPath,t=await this.container.git.getBestRemoteWithRichProvider(r,{includeDisconnected:!0}),null==t)return!1}else if(r=e.repoPath,i=await this.container.git.getRemotesWithProviders(r),t=i.find((t=>t.name===e.remote)),!t?.hasRichIntegration())return!1;const n=await t.provider.connect();return n&&!(i??await this.container.git.getRemotesWithProviders(r)).some((e=>e.default))&&await t.setAsDefault(!0),n}};d=u([(0,o.WD)()],d);let p=class extends c.mY{constructor(e){super(r.Gh.DisconnectRemoteProvider),this.container=e}static getMarkdownCommandArgs(e){let t;return t=n.ss.is(e)?{remote:e.name,repoPath:e.repoPath}:e,super.getMarkdownCommandArgsCore(r.Gh.DisconnectRemoteProvider,t)}preExecute(e,t){return(0,c.C$)(e)&&(t={...t,remote:e.node.remote.name,repoPath:e.node.remote.repoPath}),this.execute(t)}async execute(e){let t,i;if(null==e?.repoPath){const e=new Map;for(const t of this.container.git.openRepositories){const i=await t.getRichRemote(!0);null!=i&&e.set(t,i)}if(0===e.size)return;if(1===e.size){let r;[r,t]=(0,a.Ps)(e),i=r.path}else{const r=await(0,s.E2)(void 0,"Choose which repository to disconnect from the remote provider",[...e.keys()]);if(null==r?.item)return;i=r.repoPath,t=e.get(r.item)}}else if(null==e?.remote){if(i=e.repoPath,t=await this.container.git.getBestRemoteWithRichProvider(i,{includeDisconnected:!1}),null==t)return}else if(i=e.repoPath,t=(await this.container.git.getRemotesWithProviders(i)).find((t=>t.name===e.remote)),!t?.hasRichIntegration())return;return t.provider.disconnect()}};p=u([(0,o.WD)()],p)},1676:(e,t,i)=>{i.d(t,{C:()=>f});var r=i(5255),n=i(9311),s=i(6897),o=i(7462),a=i(4321),c=i(6934),l=i(7925),h=i(9529),u=i(3105),d=i(4336),p=i(7139),m=Object.defineProperty,g=Object.getOwnPropertyDescriptor;let f=class extends p.pu{constructor(e){super([r.Gh.ShowCommitInView,r.Gh.ShowInDetailsView,r.Gh.ShowCommitsInView]),this.container=e}static getMarkdownCommandArgs(e,t){const i="string"==typeof e?{refs:[e],repoPath:t}:e;return super.getMarkdownCommandArgsCore(r.Gh.ShowCommitInView,i)}preExecute(e,t){return"viewItem"===e.type&&(t={...t},(0,p.en)(e)&&(t.refs=[e.node.commit.sha],t.repoPath=e.node.commit.repoPath)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(void 0===(i={...i}).refs){if(null==(t=(0,p.SX)(t,e)))return;const r=await o.YY.fromUri(t);if(i.repoPath=r.repoPath,null!=e)try{const t=e.document.isDirty?await this.container.git.getBlameForRangeContents(r,e.selection,e.document.getText()):await this.container.git.getBlameForRange(r,e.selection);if(void 0===t)return(0,l.zk)("Unable to find commits");i.refs=[...(0,u.DZ)(t.commits.values(),(e=>e.isUncommitted?void 0:e.ref))]}catch(e){return d.Yd.error(e,"ShowCommitsInViewCommand","getBlameForRange"),(0,l.W8)("Unable to find commits")}else{if(null==r.sha)return;i.refs=[r.sha]}}return 1===i.refs.length?(0,s.Fw)((0,a.xB)(i.refs[0],i.repoPath,{refType:"revision"})):(0,n.m)({command:"search",state:{repo:i?.repoPath,query:(0,c.pU)(i.refs),showResultsInSideBar:!0}})}};f=((e,t,i,r)=>{for(var n,s=r>1?void 0:r?g(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&m(t,i,s),s})([(0,h.WD)()],f)},1744:(e,t,i)=>{i.d(t,{o:()=>p});var r=i(5255),n=i(9311),s=i(6897),o=i(7462),a=i(7925),c=i(9529),l=i(4336),h=i(7139),u=Object.defineProperty,d=Object.getOwnPropertyDescriptor;let p=class extends h.Lk{constructor(e){super([r.Gh.RevealCommitInView,r.Gh.ShowQuickCommit]),this.container=e}static getMarkdownCommandArgs(e,t){const i="string"==typeof e?{sha:e,repoPath:t}:e;return super.getMarkdownCommandArgsCore(r.Gh.ShowQuickCommit,i)}preExecute(e,t){return e.command===r.Gh.RevealCommitInView&&((t={...t}).revealInView=!0),"viewItem"===e.type&&((t={...t}).sha=e.node.uri.sha,(0,h.en)(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){let r,c;if(null==i?.commit)if(null!=i?.repoPath&&null!=i.sha)c=i.repoPath,r=o.YY.fromRepoPath(c);else{if(null==(t=(0,h.SX)(t,e)))return;r=await o.YY.fromUri(t),c=r.repoPath}else null==i.sha&&(i.sha=i.commit.sha),r=i.commit.getGitUri(),c=i.commit.repoPath,null==t&&(t=i.commit.file?.uri);if(null==(i={...i}).sha){if(null==e)return;const t=e.selection.active.line;if(t<0)return;try{const e=await this.container.git.getBlameForLine(r,t);if(null==e)return void(0,a.zk)("Unable to show commit");if(e.commit.isUncommitted)return void(0,a.f3)("Unable to show commit");i.sha=e.commit.sha,c=e.commit.repoPath,i.commit=e.commit}catch(e){return l.Yd.error(e,"ShowQuickCommitCommand",`getBlameForLine(${t})`),void(0,a.W8)("Unable to show commit")}}try{if(null!=i.commit&&null==i.commit.file||(null!=i.repoLog&&(i.commit=i.repoLog.commits.get(i.sha),null==i.commit&&(i.repoLog=void 0)),null==i.repoLog&&(i.commit=await this.container.git.getCommit(c,i.sha))),null==i.commit)return void(0,a.G)("Unable to show commit");if(i.revealInView)return void await(0,s.ay)(i.commit,{select:!0,focus:!0,expand:!0});await(0,n.m)({command:"show",state:{repo:c,reference:i.commit}})}catch(e){l.Yd.error(e,"ShowQuickCommitCommand"),(0,a.W8)("Unable to show commit")}}};p=((e,t,i,r)=>{for(var n,s=r>1?void 0:r?d(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&u(t,i,s),s})([(0,c.WD)()],p)},8918:(e,t,i)=>{i.d(t,{M:()=>m});var r=i(9496),n=i(5255),s=i(9311),o=i(7462),a=i(6450),c=i(7925),l=i(9529),h=i(4336),u=i(7139),d=Object.defineProperty,p=Object.getOwnPropertyDescriptor;let m=class extends u.Lk{constructor(e){super([n.Gh.ShowQuickCommitFile,n.Gh.ShowQuickCommitRevision,n.Gh.ShowQuickCommitRevisionInDiffLeft,n.Gh.ShowQuickCommitRevisionInDiffRight,n.Gh.ShowLineCommitInView]),this.container=e}static getMarkdownCommandArgs(e){return super.getMarkdownCommandArgsCore(n.Gh.ShowQuickCommitFile,e)}async preExecute(e,t){if("editorLine"===e.type&&(t={...t,line:e.line}),e.command===n.Gh.ShowLineCommitInView&&(t={...t,inView:!0}),null!=e.editor&&e.command.startsWith(n.Gh.ShowQuickCommitRevision)){const i=await o.YY.fromUri(e.editor.document.uri);t={...t,sha:i.sha}}return"viewItem"===e.type&&(t={...t,sha:e.node.uri.sha},(0,u.en)(e)&&(t.commit=e.node.commit)),this.execute(e.editor,e.uri,t)}async execute(e,t,i){if(null==(t=(0,u.SX)(t,e)))return;let d;if(null!=(i={...i}).revisionUri?(d=o.YY.fromRevisionUri(r.Uri.parse(i.revisionUri,!0)),i.sha=d.sha):d=await o.YY.fromUri(t),null==i.sha){const t=i.line??e?.selection.active.line;if(null==t)return;try{const e=await this.container.git.getBlameForLine(d,t);if(null==e)return void(0,c.zk)("Unable to show commit file details");if(e.commit.isUncommitted)return void(0,c.f3)("Unable to show commit file details");i.sha=e.commit.sha,i.commit=e.commit}catch(e){return h.Yd.error(e,"ShowQuickCommitFileDetailsCommand",`getBlameForLine(${t})`),void(0,c.W8)("Unable to show commit file details")}}try{if(null==i.commit&&(null!=i.fileLog&&(i.commit=i.fileLog.commits.get(i.sha),null==i.commit&&(i.fileLog=void 0)),null==i.fileLog)){const e=i.commit?.repoPath??d.repoPath;if(i.commit=await this.container.git.getCommitForFile(e,d,{ref:i.sha}),null==i.commit)return void(0,c.G)("Unable to show commit file details")}if(null==i.commit)return void(0,c.G)("Unable to show commit file details");const e=i.commit?.file?.path??d.fsPath;(0,a.f_)(i.commit)&&null==i.commit.files&&await i.commit.ensureFullDetails(),i.inView?await(0,l.P0)(n.Gh.ShowCommitsInView,{refs:[i.commit.sha],repoPath:i.commit.repoPath}):await(0,s.m)({command:"show",state:{repo:i.commit.repoPath,reference:i.commit,fileName:e}})}catch(e){h.Yd.error(e,"ShowQuickCommitFileDetailsCommand"),(0,c.W8)("Unable to show commit file details")}}};m=((e,t,i,r)=>{for(var n,s=r>1?void 0:r?p(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&d(t,i,s),s})([(0,l.WD)()],m)},2540:(e,t,i)=>{i.d(t,{N4:()=>r,S4:()=>o,TA:()=>s,ef:()=>n,oE:()=>a});var r=(e=>(e.CopyRemoteCommitUrl="gitlens.copyRemoteCommitUrl",e.CopyRemoteFileUrl="gitlens.copyRemoteFileUrl",e.DiffWithPrevious="gitlens.diffWithPrevious",e.OpenCommitOnRemote="gitlens.openCommitOnRemote",e.OpenFileOnRemote="gitlens.openFileOnRemote",e.RevealCommitInView="gitlens.revealCommitInView",e.ShowCommitsInView="gitlens.showCommitsInView",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ToggleFileBlame="gitlens.toggleFileBlame",e.ToggleFileChanges="gitlens.toggleFileChanges",e.ToggleFileChangesOnly="gitlens.toggleFileChangesOnly",e.ToggleFileHeatmap="gitlens.toggleFileHeatmap",e))(r||{}),n=(e=>(e.CopyRemoteCommitUrl="gitlens.copyRemoteCommitUrl",e.CopyRemoteFileUrl="gitlens.copyRemoteFileUrl",e.DiffWithPrevious="gitlens.diffWithPrevious",e.DiffWithWorking="gitlens.diffWithWorking",e.OpenCommitOnRemote="gitlens.openCommitOnRemote",e.OpenFileOnRemote="gitlens.openFileOnRemote",e.RevealCommitInView="gitlens.revealCommitInView",e.ShowCommitsInView="gitlens.showCommitsInView",e.ShowQuickCommitDetails="gitlens.showQuickCommitDetails",e.ShowQuickCommitFileDetails="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ToggleCodeLens="gitlens.toggleCodeLens",e.ToggleFileBlame="gitlens.toggleFileBlame",e.ToggleFileChanges="gitlens.toggleFileChanges",e.ToggleFileChangesOnly="gitlens.toggleFileChangesOnly",e.ToggleFileHeatmap="gitlens.toggleFileHeatmap",e))(n||{});const s=["defaultItemLimit","formats","pageItemLimit","showRelativeDateMarkers"],o=["branches","commits","commitDetails","contributors","fileHistory","lineHistory","remotes","repositories","searchAndCompare","stashes","tags","worktrees"];function a(e){switch(e){case"silent":return"off";case"errors":return"error";case"verbose":return"info";case"debug":return"debug";default:return e}}},5255:(e,t,i)=>{i.d(t,{Gh:()=>a,NE:()=>l,XP:()=>h,ZY:()=>s,_h:()=>c,d$:()=>n,lw:()=>d,m1:()=>r,mN:()=>o,sN:()=>u});const r="gitlens",n=80,s={".png":"image/png",".gif":"image/gif",".jpg":"image/jpeg",".jpeg":"image/jpeg",".jpe":"image/jpeg",".webp":"image/webp",".tif":"image/tiff",".tiff":"image/tiff",".bmp":"image/bmp"};var o=(e=>(e[e.Hash=35]="Hash",e[e.Slash=47]="Slash",e[e.Digit0=48]="Digit0",e[e.Digit1=49]="Digit1",e[e.Digit2=50]="Digit2",e[e.Digit3=51]="Digit3",e[e.Digit4=52]="Digit4",e[e.Digit5=53]="Digit5",e[e.Digit6=54]="Digit6",e[e.Digit7=55]="Digit7",e[e.Digit8=56]="Digit8",e[e.Digit9=57]="Digit9",e[e.Backslash=92]="Backslash",e[e.A=65]="A",e[e.B=66]="B",e[e.C=67]="C",e[e.D=68]="D",e[e.E=69]="E",e[e.F=70]="F",e[e.Z=90]="Z",e[e.a=97]="a",e[e.b=98]="b",e[e.c=99]="c",e[e.d=100]="d",e[e.e=101]="e",e[e.f=102]="f",e[e.z=122]="z",e))(o||{}),a=(e=>(e.ActionPrefix="gitlens.action.",e.AddAuthors="gitlens.addAuthors",e.BrowseRepoAtRevision="gitlens.browseRepoAtRevision",e.BrowseRepoAtRevisionInNewWindow="gitlens.browseRepoAtRevisionInNewWindow",e.BrowseRepoBeforeRevision="gitlens.browseRepoBeforeRevision",e.BrowseRepoBeforeRevisionInNewWindow="gitlens.browseRepoBeforeRevisionInNewWindow",e.ClearFileAnnotations="gitlens.clearFileAnnotations",e.CloseUnchangedFiles="gitlens.closeUnchangedFiles",e.CloseWelcomeView="gitlens.closeWelcomeView",e.CompareWith="gitlens.compareWith",e.CompareHeadWith="gitlens.compareHeadWith",e.CompareWorkingWith="gitlens.compareWorkingWith",e.ComputingFileAnnotations="gitlens.computingFileAnnotations",e.ConnectRemoteProvider="gitlens.connectRemoteProvider",e.CopyAutolinkUrl="gitlens.copyAutolinkUrl",e.CopyCurrentBranch="gitlens.copyCurrentBranch",e.CopyDeepLinkToBranch="gitlens.copyDeepLinkToBranch",e.CopyDeepLinkToCommit="gitlens.copyDeepLinkToCommit",e.CopyDeepLinkToComparison="gitlens.copyDeepLinkToComparison",e.CopyDeepLinkToRepo="gitlens.copyDeepLinkToRepo",e.CopyDeepLinkToTag="gitlens.copyDeepLinkToTag",e.CopyDeepLinkToWorkspace="gitlens.copyDeepLinkToWorkspace",e.CopyMessageToClipboard="gitlens.copyMessageToClipboard",e.CopyRemoteBranchesUrl="gitlens.copyRemoteBranchesUrl",e.CopyRemoteBranchUrl="gitlens.copyRemoteBranchUrl",e.CopyRemoteCommitUrl="gitlens.copyRemoteCommitUrl",e.CopyRemoteComparisonUrl="gitlens.copyRemoteComparisonUrl",e.CopyRemoteFileUrl="gitlens.copyRemoteFileUrlToClipboard",e.CopyRemoteFileUrlWithoutRange="gitlens.copyRemoteFileUrlWithoutRange",e.CopyRemoteFileUrlFrom="gitlens.copyRemoteFileUrlFrom",e.CopyRemoteIssueUrl="gitlens.copyRemoteIssueUrl",e.CopyRemotePullRequestUrl="gitlens.copyRemotePullRequestUrl",e.CopyRemoteRepositoryUrl="gitlens.copyRemoteRepositoryUrl",e.CopyShaToClipboard="gitlens.copyShaToClipboard",e.CopyRelativePathToClipboard="gitlens.copyRelativePathToClipboard",e.CreatePullRequestOnRemote="gitlens.createPullRequestOnRemote",e.DiffDirectory="gitlens.diffDirectory",e.DiffDirectoryWithHead="gitlens.diffDirectoryWithHead",e.DiffWith="gitlens.diffWith",e.DiffWithNext="gitlens.diffWithNext",e.DiffWithNextInDiffLeft="gitlens.diffWithNextInDiffLeft",e.DiffWithNextInDiffRight="gitlens.diffWithNextInDiffRight",e.DiffWithPrevious="gitlens.diffWithPrevious",e.DiffWithPreviousInDiffLeft="gitlens.diffWithPreviousInDiffLeft",e.DiffWithPreviousInDiffRight="gitlens.diffWithPreviousInDiffRight",e.DiffLineWithPrevious="gitlens.diffLineWithPrevious",e.DiffWithRevision="gitlens.diffWithRevision",e.DiffWithRevisionFrom="gitlens.diffWithRevisionFrom",e.DiffWithWorking="gitlens.diffWithWorking",e.DiffWithWorkingInDiffLeft="gitlens.diffWithWorkingInDiffLeft",e.DiffWithWorkingInDiffRight="gitlens.diffWithWorkingInDiffRight",e.DiffLineWithWorking="gitlens.diffLineWithWorking",e.DisconnectRemoteProvider="gitlens.disconnectRemoteProvider",e.DisableDebugLogging="gitlens.disableDebugLogging",e.EnableDebugLogging="gitlens.enableDebugLogging",e.DisableRebaseEditor="gitlens.disableRebaseEditor",e.EnableRebaseEditor="gitlens.enableRebaseEditor",e.ExternalDiff="gitlens.externalDiff",e.ExternalDiffAll="gitlens.externalDiffAll",e.FetchRepositories="gitlens.fetchRepositories",e.GenerateCommitMessage="gitlens.generateCommitMessage",e.GetStarted="gitlens.getStarted",e.InviteToLiveShare="gitlens.inviteToLiveShare",e.OpenAutolinkUrl="gitlens.openAutolinkUrl",e.OpenBlamePriorToChange="gitlens.openBlamePriorToChange",e.OpenBranchesOnRemote="gitlens.openBranchesOnRemote",e.OpenBranchOnRemote="gitlens.openBranchOnRemote",e.OpenCurrentBranchOnRemote="gitlens.openCurrentBranchOnRemote",e.OpenChangedFiles="gitlens.openChangedFiles",e.OpenCommitOnRemote="gitlens.openCommitOnRemote",e.OpenComparisonOnRemote="gitlens.openComparisonOnRemote",e.OpenFileHistory="gitlens.openFileHistory",e.OpenFileFromRemote="gitlens.openFileFromRemote",e.OpenFileOnRemote="gitlens.openFileOnRemote",e.OpenFileOnRemoteFrom="gitlens.openFileOnRemoteFrom",e.OpenFileAtRevision="gitlens.openFileRevision",e.OpenFileAtRevisionFrom="gitlens.openFileRevisionFrom",e.OpenFolderHistory="gitlens.openFolderHistory",e.OpenOnRemote="gitlens.openOnRemote",e.OpenIssueOnRemote="gitlens.openIssueOnRemote",e.OpenPullRequestOnRemote="gitlens.openPullRequestOnRemote",e.OpenAssociatedPullRequestOnRemote="gitlens.openAssociatedPullRequestOnRemote",e.OpenRepoOnRemote="gitlens.openRepoOnRemote",e.OpenRevisionFile="gitlens.openRevisionFile",e.OpenRevisionFileInDiffLeft="gitlens.openRevisionFileInDiffLeft",e.OpenRevisionFileInDiffRight="gitlens.openRevisionFileInDiffRight",e.OpenWalkthrough="gitlens.openWalkthrough",e.OpenWorkingFile="gitlens.openWorkingFile",e.OpenWorkingFileInDiffLeft="gitlens.openWorkingFileInDiffLeft",e.OpenWorkingFileInDiffRight="gitlens.openWorkingFileInDiffRight",e.PullRepositories="gitlens.pullRepositories",e.PushRepositories="gitlens.pushRepositories",e.GitCommands="gitlens.gitCommands",e.GitCommandsBranch="gitlens.gitCommands.branch",e.GitCommandsCherryPick="gitlens.gitCommands.cherryPick",e.GitCommandsMerge="gitlens.gitCommands.merge",e.GitCommandsRebase="gitlens.gitCommands.rebase",e.GitCommandsReset="gitlens.gitCommands.reset",e.GitCommandsRevert="gitlens.gitCommands.revert",e.GitCommandsSwitch="gitlens.gitCommands.switch",e.GitCommandsTag="gitlens.gitCommands.tag",e.GitCommandsWorktree="gitlens.gitCommands.worktree",e.GitCommandsWorktreeOpen="gitlens.gitCommands.worktree.open",e.OpenOrCreateWorktreeForGHPR="gitlens.ghpr.views.openOrCreateWorktree",e.PlusHide="gitlens.plus.hide",e.PlusLoginOrSignUp="gitlens.plus.loginOrSignUp",e.PlusLogout="gitlens.plus.logout",e.PlusManage="gitlens.plus.manage",e.PlusPurchase="gitlens.plus.purchase",e.PlusResendVerification="gitlens.plus.resendVerification",e.PlusRestore="gitlens.plus.restore",e.PlusShowPlans="gitlens.plus.showPlans",e.PlusStartPreviewTrial="gitlens.plus.startPreviewTrial",e.PlusValidate="gitlens.plus.validate",e.QuickOpenFileHistory="gitlens.quickOpenFileHistory",e.RefreshFocus="gitlens.focus.refresh",e.RefreshGraph="gitlens.graph.refresh",e.RefreshHover="gitlens.refreshHover",e.RefreshTimelinePage="gitlens.timeline.refresh",e.ResetAvatarCache="gitlens.resetAvatarCache",e.ResetAIKey="gitlens.resetAIKey",e.ResetSuppressedWarnings="gitlens.resetSuppressedWarnings",e.ResetTrackedUsage="gitlens.resetTrackedUsage",e.ResetViewsLayout="gitlens.resetViewsLayout",e.RevealCommitInView="gitlens.revealCommitInView",e.SearchCommits="gitlens.showCommitSearch",e.SearchCommitsInView="gitlens.views.searchAndCompare.searchCommits",e.ShowBranchesView="gitlens.showBranchesView",e.ShowCommitDetailsView="gitlens.showCommitDetailsView",e.ShowCommitInView="gitlens.showCommitInView",e.ShowCommitsInView="gitlens.showCommitsInView",e.ShowCommitsView="gitlens.showCommitsView",e.ShowContributorsView="gitlens.showContributorsView",e.ShowFileHistoryView="gitlens.showFileHistoryView",e.ShowFocusPage="gitlens.showFocusPage",e.ShowGraph="gitlens.showGraph",e.ShowGraphPage="gitlens.showGraphPage",e.ShowGraphView="gitlens.showGraphView",e.ShowHomeView="gitlens.showHomeView",e.ShowAccountView="gitlens.showAccountView",e.ShowInCommitGraph="gitlens.showInCommitGraph",e.ShowInCommitGraphView="gitlens.showInCommitGraphView",e.ShowInDetailsView="gitlens.showInDetailsView",e.ShowLastQuickPick="gitlens.showLastQuickPick",e.ShowLineCommitInView="gitlens.showLineCommitInView",e.ShowLineHistoryView="gitlens.showLineHistoryView",e.OpenOnlyChangedFiles="gitlens.openOnlyChangedFiles",e.ShowQuickBranchHistory="gitlens.showQuickBranchHistory",e.ShowQuickCommit="gitlens.showQuickCommitDetails",e.ShowQuickCommitFile="gitlens.showQuickCommitFileDetails",e.ShowQuickCurrentBranchHistory="gitlens.showQuickRepoHistory",e.ShowQuickFileHistory="gitlens.showQuickFileHistory",e.ShowQuickRepoStatus="gitlens.showQuickRepoStatus",e.ShowQuickCommitRevision="gitlens.showQuickRevisionDetails",e.ShowQuickCommitRevisionInDiffLeft="gitlens.showQuickRevisionDetailsInDiffLeft",e.ShowQuickCommitRevisionInDiffRight="gitlens.showQuickRevisionDetailsInDiffRight",e.ShowQuickStashList="gitlens.showQuickStashList",e.ShowRemotesView="gitlens.showRemotesView",e.ShowRepositoriesView="gitlens.showRepositoriesView",e.ShowSearchAndCompareView="gitlens.showSearchAndCompareView",e.ShowSettingsPage="gitlens.showSettingsPage",e.ShowSettingsPageAndJumpToBranchesView="gitlens.showSettingsPage#branches-view",e.ShowSettingsPageAndJumpToCommitsView="gitlens.showSettingsPage#commits-view",e.ShowSettingsPageAndJumpToContributorsView="gitlens.showSettingsPage#contributors-view",e.ShowSettingsPageAndJumpToFileHistoryView="gitlens.showSettingsPage#file-history-view",e.ShowSettingsPageAndJumpToLineHistoryView="gitlens.showSettingsPage#line-history-view",e.ShowSettingsPageAndJumpToRemotesView="gitlens.showSettingsPage#remotes-view",e.ShowSettingsPageAndJumpToRepositoriesView="gitlens.showSettingsPage#repositories-view",e.ShowSettingsPageAndJumpToSearchAndCompareView="gitlens.showSettingsPage#search-compare-view",e.ShowSettingsPageAndJumpToStashesView="gitlens.showSettingsPage#stashes-view",e.ShowSettingsPageAndJumpToTagsView="gitlens.showSettingsPage#tags-view",e.ShowSettingsPageAndJumpToWorkTreesView="gitlens.showSettingsPage#worktrees-view",e.ShowSettingsPageAndJumpToViews="gitlens.showSettingsPage#views",e.ShowSettingsPageAndJumpToCommitGraph="gitlens.showSettingsPage#commit-graph",e.ShowSettingsPageAndJumpToAutolinks="gitlens.showSettingsPage#autolinks",e.ShowStashesView="gitlens.showStashesView",e.ShowTagsView="gitlens.showTagsView",e.ShowTimelinePage="gitlens.showTimelinePage",e.ShowTimelineView="gitlens.showTimelineView",e.ShowWelcomePage="gitlens.showWelcomePage",e.ShowWorktreesView="gitlens.showWorktreesView",e.ShowWorkspacesView="gitlens.showWorkspacesView",e.StashApply="gitlens.stashApply",e.StashSave="gitlens.stashSave",e.StashSaveFiles="gitlens.stashSaveFiles",e.SwitchAIModel="gitlens.switchAIModel",e.SwitchMode="gitlens.switchMode",e.ToggleCodeLens="gitlens.toggleCodeLens",e.ToggleFileBlame="gitlens.toggleFileBlame",e.ToggleFileBlameInDiffLeft="gitlens.toggleFileBlameInDiffLeft",e.ToggleFileBlameInDiffRight="gitlens.toggleFileBlameInDiffRight",e.ToggleFileChanges="gitlens.toggleFileChanges",e.ToggleFileChangesOnly="gitlens.toggleFileChangesOnly",e.ToggleFileHeatmap="gitlens.toggleFileHeatmap",e.ToggleFileHeatmapInDiffLeft="gitlens.toggleFileHeatmapInDiffLeft",e.ToggleFileHeatmapInDiffRight="gitlens.toggleFileHeatmapInDiffRight",e.ToggleGraph="gitlens.toggleGraph",e.ToggleMaximizedGraph="gitlens.toggleMaximizedGraph",e.ToggleLineBlame="gitlens.toggleLineBlame",e.ToggleReviewMode="gitlens.toggleReviewMode",e.ToggleZenMode="gitlens.toggleZenMode",e.ViewsCopy="gitlens.views.copy",e.ViewsOpenDirectoryDiff="gitlens.views.openDirectoryDiff",e.ViewsOpenDirectoryDiffWithWorking="gitlens.views.openDirectoryDiffWithWorking",e.Deprecated_DiffHeadWith="gitlens.diffHeadWith",e.Deprecated_DiffWorkingWith="gitlens.diffWorkingWith",e.Deprecated_OpenBranchesInRemote="gitlens.openBranchesInRemote",e.Deprecated_OpenBranchInRemote="gitlens.openBranchInRemote",e.Deprecated_OpenCommitInRemote="gitlens.openCommitInRemote",e.Deprecated_OpenFileInRemote="gitlens.openFileInRemote",e.Deprecated_OpenInRemote="gitlens.openInRemote",e.Deprecated_OpenRepoInRemote="gitlens.openRepoInRemote",e.Deprecated_ShowFileHistoryInView="gitlens.showFileHistoryInView",e))(a||{});const c=new Map([["workbench.view.scm",["branches","commits","remotes","repositories","stashes","tags","worktrees","contributors"]],["workbench.view.extension.gitlensPanel",["graph","graphDetails"]],["workbench.view.extension.gitlensInspect",["commitDetails","fileHistory","lineHistory","timeline","searchAndCompare"]],["workbench.view.extension.gitlens",["home","workspaces","account"]]]);var l=(e=>(e.AngleBracketLeftHeavy="❰",e.AngleBracketRightHeavy="❱",e.ArrowBack="↩",e.ArrowDown="↓",e.ArrowDownUp="⇵",e.ArrowDropRight="⤷",e.ArrowHeadRight="➤",e.ArrowLeft="←",e.ArrowLeftDouble="⇐",e.ArrowLeftRight="↔",e.ArrowLeftRightDouble="⇔",e.ArrowLeftRightDoubleStrike="⇎",e.ArrowLeftRightLong="⟷",e.ArrowRight="→",e.ArrowRightDouble="⇒",e.ArrowRightHollow="⇨",e.ArrowUp="↑",e.ArrowUpDown="⇅",e.ArrowUpRight="↗",e.ArrowsHalfLeftRight="⇋",e.ArrowsHalfRightLeft="⇌",e.ArrowsLeftRight="⇆",e.ArrowsRightLeft="⇄",e.Asterisk="∗",e.Check="✔",e.Dash="—",e.Dot="•",e.Ellipsis="…",e.EnDash="–",e.Envelope="✉",e.EqualsTriple="≡",e.Flag="⚑",e.FlagHollow="⚐",e.MiddleEllipsis="⋯",e.MuchLessThan="≪",e.MuchGreaterThan="≫",e.Pencil="✎",e.Space=" ",e.SpaceThin=" ",e.SpaceThinnest=" ",e.SquareWithBottomShadow="❏",e.SquareWithTopShadow="❐",e.Warning="⚠",e.ZeroWidthSpace="​",e))(l||{});const h=["left","alt+left","ctrl+left","right","alt+right","ctrl+right","alt+,","alt+.","alt+enter","ctrl+enter","escape"];var u=(e=>(e.DebugConsole="debug",e.File="file",e.Git="git",e.GitHub="github",e.GitLens="gitlens",e.Output="output",e.PRs="pr",e.Terminal="vscode-terminal",e.Vsls="vsls",e.VslsScc="vsls-scc",e.Virtual="vscode-vfs",e))(u||{}),d=(e=>(e.Version="gitlens:synced:version",e.PreReleaseVersion="gitlens:synced:preVersion",e.HomeViewWelcomeVisible="gitlens:views:welcome:visible",e))(d||{})},7759:(e,t,i)=>{i.d(t,{W:()=>Zs,N:()=>eo});var r=i(9496),n=i(185),s=i(5255),o=i(3148),a=i(4575),c=i(8887),l=i(6592),h=i(7462),u=i(5367),d=i(6450),p=i(439),m=i(1719),g=i(7881),f=i(4321),w=i(3050),v=i(3646),y=i(827),b=i(9502);var C=i(4336),A=i(2795);const S=/\/_git\/?/i,P=/^DefaultCollection\//i,k=/^(.*?)\/(.*?)\/(.*)/,R=/^(ssh|vs-ssh)\./i,D=/^\/?v\d\//i,_=/path=([^&]+)/i,T=/line=(\d+)(?:&lineEnd=(\d+))?/;class AzureDevOpsRemote extends A.x{constructor(e,t,i,r,n=!1){if(R.test(e)){t=t.replace(D,""),e=e.replace(R,"");const i=k.exec(t);if(null!=i){const[,r,s,o]=i;n?(e=`${r}.${e}`,t=`${s}/_git/${o}`):t=`${r}/${s}/_git/${o}`}}super(e,t=decodeURIComponent(t),i,r)}_autolinks;get autolinks(){if(void 0===this._autolinks){const e=this.baseUrl.replace(S,"/");this._autolinks=[{prefix:"#",url:`${e}/_workitems/edit/<num>`,title:`Open Work Item #<num> on ${this.name}`,type:"issue",description:`${this.name} Work Item #<num>`},{prefix:"PR ",url:`${this.baseUrl}/pullrequest/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]}return this._autolinks}get icon(){return"azdo"}get id(){return"azure-devops"}get name(){return"Azure DevOps"}_displayPath;get displayPath(){return void 0===this._displayPath&&(this._displayPath=this.path.replace(S,"/").replace(P,"")),this._displayPath}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return Promise.resolve(void 0);let r,n;if(t.query){const e=T.exec(t.query);if(null!=e){const[,t,i]=e;t&&(r=parseInt(t,10),i&&(n=parseInt(i,10)))}}const s=_.exec(t.query);if(null==s)return Promise.resolve(void 0);const[,o]=s,a=e.toAbsoluteUri(o,{validate:i?.validate});return Promise.resolve(null!=a?{uri:a,startLine:r,endLine:n}:void 0)}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/?version=GB${e}&_a=history`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branchCompare?baseVersion=GB${e}&targetVersion=GB${t}`)}getUrlForFile(e,t,i,r){let n;return n=null!=r?r.start.line===r.end.line?`&line=${r.start.line}&lineStartColumn=${r.start.character+1}&lineEndColumn=${r.end.character+1}`:`&line=${r.start.line}&lineEnd=${r.end.line}&lineStartColumn=${r.start.character+1}&lineEndColumn=${r.end.character+1}`:"",i?this.encodeUrl(`${this.baseUrl}?path=${e}&version=GC${i}${n}&_a=contents`):t?this.encodeUrl(`${this.baseUrl}/?path=/${e}&version=GB${t}&_a=contents${n}`):this.encodeUrl(`${this.baseUrl}?path=/${e}${n}`)}}const F=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,$=/^lines-(\d+)(?::(\d+))?$/;class BitbucketRemote extends A.x{constructor(e,t,i,r,n=!1){super(e,t,i,r,n)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"issue #",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"pull request #",url:`${this.baseUrl}/pull-requests/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]),this._autolinks}get icon(){return"bitbucket"}get id(){return"bitbucket"}get name(){return this.formatName("Bitbucket")}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let r,n;if(t.fragment){const e=$.exec(t.fragment);if(null!=e){const[,t,i]=e;t&&(r=parseInt(t,10),i&&(n=parseInt(i,10)))}}const s=F.exec(t.path);if(null==s)return;const[,,,o]=s;let a,c=o.indexOf("/",1);if(-1!==c){const t=o.substring(1,c);if((0,f.D3)(t)){const t=e.toAbsoluteUri(o.substr(c),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:n}}}const l=new Map;c=o.length;do{c=o.lastIndexOf("/",c-1),a=o.substring(1,c),l.set(a,o.substr(c))}while(c>0);if(0!==l.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&l.has(e.getNameWithoutRemote())});for(const s of t){const t=l.get(s.getNameWithoutRemote());if(null==t)continue;const o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:r,endLine:n}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/branch/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commits/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branches/compare/${e}%0D${t}`).replace("%250D","%0D")}getUrlForFile(e,t,i,r){let n;return n=null!=r?r.start.line===r.end.line?`#${e}-${r.start.line}`:`#${e}-${r.start.line}:${r.end.line}`:"",i?`${this.encodeUrl(`${this.baseUrl}/src/${i}/${e}`)}${n}`:t?`${this.encodeUrl(`${this.baseUrl}/src/${t}/${e}`)}${n}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${n}`}}const O=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,I=/^lines-(\d+)(?::(\d+))?$/;class BitbucketServerRemote extends A.x{constructor(e,t,i,r,n=!1){super(e,t,i,r,n)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"issue #",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"pull request #",ignoreCase:!0,url:`${this.baseUrl}/pull-requests/<num>`,title:`Open Pull Request #<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Pull Request #<num>`}]),this._autolinks}get baseUrl(){const[e,t]=this.path.startsWith("scm/")?this.path.replace("scm/","").split("/"):this.splitPath();return`${this.protocol}://${this.domain}/projects/${e}/repos/${t}`}get icon(){return"bitbucket"}get id(){return"bitbucket-server"}get name(){return this.formatName("Bitbucket Server")}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let r,n;if(t.fragment){const e=I.exec(t.fragment);if(null!=e){const[,t,i]=e;t&&(r=parseInt(t,10),i&&(n=parseInt(i,10)))}}const s=O.exec(t.path);if(null==s)return;const[,,,o]=s;let a,c=o.indexOf("/",1);if(-1!==c){const t=o.substring(1,c);if((0,f.D3)(t)){const t=e.toAbsoluteUri(o.substr(c),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:n}}}const l=new Map;c=o.length;do{c=o.lastIndexOf("/",c-1),a=o.substring(1,c),l.set(a,o.substr(c))}while(c>0);if(0!==l.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&l.has(e.getNameWithoutRemote())});for(const s of t){const t=l.get(s.getNameWithoutRemote());if(null==t)continue;const o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:r,endLine:n}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/commits?until=${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commits/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/branches/compare/${e}%0D${t}`).replace("%250D","%0D")}getUrlForFile(e,t,i,r){let n;return n=null!=r?r.start.line===r.end.line?`#${r.start.line}`:`#${r.start.line}-${r.end.line}`:"",i?`${this.encodeUrl(`${this.baseUrl}/browse/${e}?at=${i}`)}${n}`:t?`${this.encodeUrl(`${this.baseUrl}/browse/${e}?at=${t}`)}${n}`:`${this.encodeUrl(`${this.baseUrl}/browse/${e}`)}${n}`}}var E=i(3620);class CustomRemote extends A.x{urls;constructor(e,t,i,r,n){super(e,t,r,n,!0),this.urls=i}get id(){return"custom"}get name(){return this.formatName("Custom")}getLocalInfoFromRemoteUri(e,t){return Promise.resolve(void 0)}getUrlForRepository(){return this.getUrl(this.urls.repository,this.getContext())}getUrlForBranches(){return this.getUrl(this.urls.branches,this.getContext())}getUrlForBranch(e){return this.getUrl(this.urls.branch,this.getContext({branch:e}))}getUrlForCommit(e){return this.getUrl(this.urls.commit,this.getContext({id:e}))}getUrlForComparison(e,t,i){if(null!=this.urls.comparison)return this.getUrl(this.urls.comparison,this.getContext({ref1:e,ref2:t,notation:i}))}getUrlForFile(e,t,i,r){let n,s,o;n=null!=r?r.start.line===r.end.line?(0,E.sX)(this.urls.fileLine,{line:r.start.line,line_encoded:r.start.line}):(0,E.sX)(this.urls.fileRange,{start:r.start.line,start_encoded:r.start.line,end:r.end.line,end_encoded:r.end.line}):"",i?(s=this.urls.fileInCommit,o=this.getContext({id:i,file:e,line:n})):t?(s=this.urls.fileInBranch,o=this.getContext({branch:t,file:e,line:n})):(s=this.urls.file,o=this.getContext({file:e,line:n}));let a=(0,E.sX)(s,o);if((0,E.Gg)(s).some((e=>e.key.endsWith("_encoded"))))return a;const c=a.includes("#");if(a=this.encodeUrl(a),c){const e=a.lastIndexOf("%23");-1!==e&&(a=`${a.substring(0,e)}#${a.substring(e+3)}`)}return a}getUrl(e,t){const i=(0,E.sX)(e,t);return(0,E.Gg)(e).some((e=>e.key.endsWith("_encoded")))?i:this.encodeUrl(i)}getContext(e){const[t,i]=this.splitPath(),r={repo:this.path,repoBase:t,repoPath:i,...e??{}};for(const[e,t]of Object.entries(r))r[`${e}_encoded`]=encodeURIComponent(t);return r}}const x=/^\/([^/]+)\/\+(.+)$/i,B=/^(\d+)$/;class GerritRemote extends A.x{constructor(e,t,i,r,n=!1,s=!0){s&&"ssh"!==i&&(t=t.replace(/^a\//,"")),super(e,t,i,r,n)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"Change-Id: ",url:`${this.baseReviewUrl}/q/<num>`,title:`Open Change #<num> on ${this.name}`,alphanumeric:!0,description:`${this.name} Change #<num>`}]),this._autolinks}get icon(){return"gerrit"}get id(){return"gerrit"}get name(){return this.formatName("Gerrit")}get baseUrl(){return`${this.protocol}://${this.domain}/plugins/gitiles/${this.path}`}get baseReviewUrl(){return`${this.protocol}://${this.domain}`}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let r;if(t.fragment){const e=B.exec(t.fragment);if(null!=e){const[,t]=e;t&&(r=parseInt(t,10))}}const n=x.exec(t.path);if(null==n)return;const[,,s]=n;let o=s.indexOf("/",1);if(-1!==o){const t=s.substring(1,o);if((0,f.D3)(t)||"HEAD"==t){const t=e.toAbsoluteUri(s.substr(o),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r}}}if(s.startsWith("/refs/heads/")){const t=s.substr(12);let n;const a=new Map;o=t.length;do{o=t.lastIndexOf("/",o-1),n=t.substring(1,o),a.set(n,t.substr(o))}while(o>0);if(0!==a.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&a.has(e.getNameWithoutRemote())});for(const n of t){const t=a.get(n.getNameWithoutRemote());if(null==t)continue;const s=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=s)return{uri:s,startLine:r}}}}else if(s.startsWith("/refs/tags/")){const t=s.substr(11);let n;const a=new Map;o=t.length;do{o=t.lastIndexOf("/",o-1),n=t.substring(1,o),a.set(n,t.substr(o))}while(o>0);if(0!==a.size){const{values:t}=await e.getTags({filter:e=>a.has(e.name)});for(const n of t){const t=a.get(n.name);if(null==t)continue;const s=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=s)return{uri:s,startLine:r}}}}else;}getUrlForBranches(){return this.encodeUrl(`${this.baseReviewUrl}/admin/repos/${this.path},branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/+/refs/heads/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseReviewUrl}/q/${e}`)}getUrlForFile(e,t,i,r){const n=null!=r?`#${r.start.line}`:"";return i?`${this.encodeUrl(`${this.baseUrl}/+/${i}/${e}`)}${n}`:t?`${this.encodeUrl(`${this.getUrlForBranch(t)}/${e}`)}${n}`:`${this.encodeUrl(`${this.baseUrl}/+/HEAD/${e}`)}${n}`}}const W=/^\/([^/]+)\/([^/]+?)\/src(.+)$/i,N=/^L(\d+)(?:-L(\d+))?$/;class GiteaRemote extends A.x{constructor(e,t,i,r,n=!1){super(e,t,i,r,n)}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"#",url:`${this.baseUrl}/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`}]),this._autolinks}get icon(){return"gitea"}get id(){return"gitea"}get name(){return this.formatName("Gitea")}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let r,n;if(t.fragment){const e=N.exec(t.fragment);if(null!=e){const[,t,i]=e;t&&(r=parseInt(t,10),i&&(n=parseInt(i,10)))}}const s=W.exec(t.path);if(null==s)return;const[,,,o]=s;let a,c;if(o.startsWith("/commit/")&&(a=8,c=o.indexOf("/",a),-1!==c)){const t=o.substring(a,c);if((0,f.D3)(t)){const t=e.toAbsoluteUri(o.substr(c),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:n}}}if(o.startsWith("/branch/")){let t;const s=new Map;a=8,c=a;do{t=o.substring(a,c),s.set(t,o.substr(c)),c=o.indexOf("/",c+1)}while(c<o.length&&-1!==c);if(0!==s.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&s.has(e.getNameWithoutRemote())});for(const o of t){const t=s.get(o.getNameWithoutRemote());if(null==t)continue;const a=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=a)return{uri:a,startLine:r,endLine:n}}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/src/branch/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/compare/${e}...${t}`)}getUrlForFile(e,t,i,r){let n;return n=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-L${r.end.line}`:"",i?`${this.encodeUrl(`${this.baseUrl}/src/commit/${i}/${e}`)}${n}`:t?`${this.encodeUrl(`${this.baseUrl}/src/branch/${t}/${e}`)}${n}`:`${this.encodeUrl(`${this.baseUrl}/src/${e}`)}${n}`}}var M=i(2075),L=i(1219),U=i(8786),G=i(2509),H=i(3084),V=Object.defineProperty,q=Object.getOwnPropertyDescriptor;const Q=/\b(?<repo>[^/\s]+\/[^/\s]+)#(?<num>[0-9]+)\b(?!]\()/g,j=/\b(?<repo>[^/\s]+\/[^/\s]+)!(?<num>[0-9]+)\b(?!]\()/g,Y=/^\/([^/]+)\/([^/]+?)\/-\/blob(.+)$/i,z=/^L(\d+)(?:-(\d+))?$/,K=Object.freeze({id:"gitlab",scopes:["read_api","read_user","read_repository"]});class GitLabRemote extends H.D{get authProvider(){return K}constructor(e,t,i,r,n,s=!1){super(e,t,i,r,n,s)}get apiBaseUrl(){return this.custom?`${this.protocol}://${this.domain}/api`:`https://${this.domain}/api`}_autolinks;get autolinks(){return void 0===this._autolinks&&(this._autolinks=[{prefix:"#",url:`${this.baseUrl}/-/issues/<num>`,title:`Open Issue #<num> on ${this.name}`,type:"issue",description:`${this.name} Issue #<num>`},{prefix:"!",url:`${this.baseUrl}/-/merge_requests/<num>`,title:`Open Merge Request !<num> on ${this.name}`,type:"pullrequest",description:`${this.name} Merge Request !<num>`},{tokenize:(e,t,i)=>"plaintext"===t?e:e.replace(Q,((e,r,n)=>{const s=(0,U.M)(`${this.protocol}://${this.domain}/${r}/-/issues/${n}`),o=` "Open Issue #${n} from ${r} on ${this.name}"`,a=`\0${i.size}\0`;return"markdown"===t?i.set(a,`[${e}](${s}${o})`):"html"===t&&i.set(a,`<a href="${s}" title=${o}>${e}</a>`),a})),parse:(e,t)=>{let i,r,n;for(;;){if(n=Q.exec(e),null==n?.groups)break;({repo:i,num:r}=n.groups),t.set(r,{provider:this,id:r,prefix:`${i}#`,url:`${this.protocol}://${this.domain}/${i}/-/issues/${r}`,title:`Open Issue #<num> from ${i} on ${this.name}`,type:"issue",description:`${this.name} Issue ${i}#${r}`})}}},{tokenize:(e,t,i)=>"plaintext"===t?e:e.replace(j,((e,r,n)=>{const s=(0,U.M)(`${this.protocol}://${this.domain}/${r}/-/merge_requests/${n}`),o=` "Open Merge Request !${n} from ${r} on ${this.name}"`,a=`\0${i.size}\0`;return"markdown"===t?i.set(a,`[${e}](${s}${o})`):"html"===t&&i.set(a,`<a href="${s}" title=${o}>${e}</a>`),a})),parse:(e,t)=>{let i,r,n;for(;;){if(n=j.exec(e),null==n?.groups)break;({repo:i,num:r}=n.groups),t.set(r,{provider:this,id:r,prefix:`${i}!`,url:`${this.protocol}://${this.domain}/${i}/-/merge_requests/${r}`,title:`Open Merge Request !<num> from ${i} on ${this.name}`,type:"pullrequest",description:`Merge Request !${r} from ${i} on ${this.name}`})}}}]),this._autolinks}get icon(){return"gitlab"}get id(){return"gitlab"}get name(){return this.formatName("GitLab")}async connect(){return!(!(0,E.qq)(this.domain,"gitlab.com")&&!await(0,H.e)("GitLab self-managed instance",this.container))&&super.connect()}async getLocalInfoFromRemoteUri(e,t,i){if(t.authority!==this.domain)return;if((i?.validate??1)&&!t.path.startsWith(`/${this.path}/`))return;let r,n;if(t.fragment){const e=z.exec(t.fragment);if(null!=e){const[,t,i]=e;t&&(r=parseInt(t,10),i&&(n=parseInt(i,10)))}}const s=Y.exec(t.path);if(null==s)return;const[,,,o]=s;let a,c=o.indexOf("/",1);if(-1!==c){const t=o.substring(1,c);if((0,f.D3)(t)){const t=e.toAbsoluteUri(o.substr(c),{validate:i?.validate});if(null!=t)return{uri:t,startLine:r,endLine:n}}}const l=new Map;c=o.length;do{c=o.lastIndexOf("/",c-1),a=o.substring(1,c),l.set(a,o.substr(c))}while(c>0);if(0!==l.size){const{values:t}=await e.getBranches({filter:e=>e.remote&&l.has(e.getNameWithoutRemote())});for(const s of t){const t=l.get(s.getNameWithoutRemote());if(null==t)continue;const o=e.toAbsoluteUri(t,{validate:i?.validate});if(null!=o)return{uri:o,startLine:r,endLine:n}}}}getUrlForBranches(){return this.encodeUrl(`${this.baseUrl}/-/branches`)}getUrlForBranch(e){return this.encodeUrl(`${this.baseUrl}/-/tree/${e}`)}getUrlForCommit(e){return this.encodeUrl(`${this.baseUrl}/-/commit/${e}`)}getUrlForComparison(e,t,i){return this.encodeUrl(`${this.baseUrl}/-/compare/${e}${i}${t}`)}getUrlForFile(e,t,i,r){let n;return n=null!=r?r.start.line===r.end.line?`#L${r.start.line}`:`#L${r.start.line}-${r.end.line}`:"",i?`${this.encodeUrl(`${this.baseUrl}/-/blob/${i}/${e}`)}${n}`:t?`${this.encodeUrl(`${this.baseUrl}/-/blob/${t}/${e}`)}${n}`:`${this.encodeUrl(`${this.baseUrl}?path=${e}`)}${n}`}async getProviderAccountForCommit({accessToken:e},t,i){const[r,n]=this.splitPath();return(await this.container.gitlab)?.getAccountForCommit(this,e,r,n,t,{...i,baseUrl:this.apiBaseUrl})}async getProviderAccountForEmail({accessToken:e},t,i){const[r,n]=this.splitPath();return(await this.container.gitlab)?.getAccountForEmail(this,e,r,n,t,{...i,baseUrl:this.apiBaseUrl})}async getProviderDefaultBranch({accessToken:e}){const[t,i]=this.splitPath();return(await this.container.gitlab)?.getDefaultBranch(this,e,t,i,{baseUrl:this.apiBaseUrl})}async getProviderIssueOrPullRequest({accessToken:e},t){const[i,r]=this.splitPath();return(await this.container.gitlab)?.getIssueOrPullRequest(this,e,i,r,Number(t),{baseUrl:this.apiBaseUrl})}async getProviderPullRequestForBranch({accessToken:e},t,r){const[n,s]=this.splitPath(),{include:o,...a}=r??{},c=(await Promise.resolve().then(i.bind(i,6630))).toGitLabMergeRequestState;return(await this.container.gitlab)?.getPullRequestForBranch(this,e,n,s,t,{...a,include:o?.map((e=>c(e))),baseUrl:this.apiBaseUrl})}async getProviderPullRequestForCommit({accessToken:e},t){const[i,r]=this.splitPath();return(await this.container.gitlab)?.getPullRequestForCommit(this,e,i,r,t,{baseUrl:this.apiBaseUrl})}async getProviderRepositoryMetadata({accessToken:e}){const[t,i]=this.splitPath();return(await this.container.gitlab)?.getRepositoryMetadata(this,e,t,i,{baseUrl:this.apiBaseUrl})}async searchProviderMyPullRequests(e){return Promise.resolve(void 0)}async searchProviderMyIssues(e){return Promise.resolve(void 0)}}((e,t,i,r)=>{for(var n,s=r>1?void 0:r?q(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);r&&s&&V(t,i,s)})([(0,L.cM)()],GitLabRemote.prototype,"connect",1);class GitLabAuthenticationProvider{_disposable;constructor(e){this._disposable=e.integrationAuthentication.registerProvider("gitlab",this)}dispose(){this._disposable.dispose()}getSessionId(e){return e?.domain??""}async createSession(e){const t=r.window.createInputBox();t.ignoreFocusOut=!0;const i=[];let n;try{const s={iconPath:new r.ThemeIcon("link-external"),tooltip:"Open the GitLab Access Tokens Page"};n=await new Promise((n=>{i.push(t.onDidHide((()=>n(void 0))),t.onDidChangeValue((()=>t.validationMessage=void 0)),t.onDidAccept((()=>{const e=t.value.trim();e?n(e):t.validationMessage="A personal access token is required"})),t.onDidTriggerButton((t=>{t===s&&r.env.openExternal(r.Uri.parse(`https://${e?.domain??"gitlab.com"}/-/profile/personal_access_tokens`))}))),t.password=!0,t.title="GitLab Authentication"+(e?.domain?`  • ${e.domain}`:""),t.placeholder=`Requires ${e?.scopes.join(", ")??"all"} scopes`,t.prompt=t.prompt=(0,G.gn)("input-prompt-links")?`Paste your [GitLab Personal Access Token](https://${e?.domain??"gitlab.com"}/-/profile/personal_access_tokens "Get your GitLab Access Token")`:"Paste your GitLab Personal Access Token",t.buttons=[s],t.show()}))}finally{t.dispose(),i.forEach((e=>{e.dispose()}))}if(n)return{id:this.getSessionId(e),accessToken:n,scopes:[],account:{id:"",label:""}}}}class GoogleSourceRemote extends GerritRemote{constructor(e,t,i,r,n=!1){super(e,t,i,r,n,!1)}get id(){return"google-source"}get name(){return this.formatName("Google Source")}get baseUrl(){return`${this.protocol}://${this.domain}/${this.path}`}get reviewDomain(){const[e,...t]=this.domain.split(".");return[`${e}-review`,...t].join(".")}get baseReviewUrl(){return`${this.protocol}://${this.reviewDomain}`}}const J=[{custom:!1,matcher:"bitbucket.org",creator:(e,t,i)=>new BitbucketRemote(t,i)},{custom:!1,matcher:"github.com",creator:(e,t,i)=>new M.gu(e,t,i)},{custom:!1,matcher:"gitlab.com",creator:(e,t,i)=>new GitLabRemote(e,t,i)},{custom:!1,matcher:/\bdev\.azure\.com$/i,creator:(e,t,i)=>new AzureDevOpsRemote(t,i)},{custom:!0,matcher:/^(.+\/(?:bitbucket|stash))\/scm\/(.+)$/i,creator:(e,t,i)=>new BitbucketServerRemote(t,i)},{custom:!1,matcher:/\bgitlab\b/i,creator:(e,t,i)=>new GitLabRemote(e,t,i)},{custom:!1,matcher:/\bvisualstudio\.com$/i,creator:(e,t,i)=>new AzureDevOpsRemote(t,i,void 0,void 0,!0)},{custom:!1,matcher:/\bgitea\b/i,creator:(e,t,i)=>new GiteaRemote(t,i)},{custom:!1,matcher:/\bgerrithub\.io$/i,creator:(e,t,i)=>new GerritRemote(t,i)},{custom:!1,matcher:/\bgooglesource\.com$/i,creator:(e,t,i)=>new GoogleSourceRemote(t,i)}];function X(e){switch(e.type){case"AzureDevOps":return(t,i,r)=>new AzureDevOpsRemote(i,r,e.protocol,e.name,!0);case"Bitbucket":return(t,i,r)=>new BitbucketRemote(i,r,e.protocol,e.name,!0);case"BitbucketServer":return(t,i,r)=>new BitbucketServerRemote(i,r,e.protocol,e.name,!0);case"Custom":return(t,i,r)=>new CustomRemote(i,r,e.urls,e.protocol,e.name);case"Gerrit":return(t,i,r)=>new GerritRemote(i,r,e.protocol,e.name,!0);case"GoogleSource":return(t,i,r)=>new GoogleSourceRemote(i,r,e.protocol,e.name,!0);case"Gitea":return(t,i,r)=>new GiteaRemote(i,r,e.protocol,e.name,!0);case"GitHub":return(t,i,r)=>new M.gu(t,i,r,e.protocol,e.name,!0);case"GitLab":return(t,i,r)=>new GitLabRemote(t,i,r,e.protocol,e.name,!0);default:return}}function Z(e,t){return(i,r,n)=>function(e,t,i,r,n){try{const s=r.toLowerCase();for(const{custom:o,matcher:a,creator:c}of t){if("string"==typeof a){if(a===s)return c(e,r,n);continue}if(a.test(s))return c(e,r,n);if(!o)continue;const t=a.exec(i);if(null!=t)return c(e,t[1],t[2])}return}catch(e){return void C.Yd.error(e,"createRemoteProvider")}}(e,t,i,r,n)}var ee=i(6934),te=i(5148),ie=i(2061),re=i(5432),ne=i(3105),se=i(6004),oe=i(3700),ae=i(7469),ce=i(9701),le=i(2185),he=i(9796);class TrackedDocument{constructor(e,t,i,r){this.document=e,this.dirty=t,this._eventDelegates=i,this.container=r}static async create(e,t,i,r){const n=new TrackedDocument(e,t,i,r);return await n.initialize(),n}_onDidBlameStateChange=new r.EventEmitter;get onDidBlameStateChange(){return this._onDidBlameStateChange.event}state;_disposable;_disposed=!1;_uri;dispose(){this.state=void 0,this._disposed=!0,this._disposable?.dispose()}initializing=!0;async initialize(){const e=this.document.uri;this._uri=await h.YY.fromUri(e),this._disposed||await this.update(),this.initializing=!1}_forceDirtyStateChangeOnNextDocumentChange=!1;get forceDirtyStateChangeOnNextDocumentChange(){return this._forceDirtyStateChangeOnNextDocumentChange}_hasRemotes=!1;get hasRemotes(){return this._hasRemotes}get isBlameable(){return!this._blameFailed&&this._isTracked}_isDirtyIdle=!1;get isDirtyIdle(){return this._isDirtyIdle}set isDirtyIdle(e){this._isDirtyIdle=e}get isRevision(){return null!=this._uri&&(Boolean(this._uri.sha)&&this._uri.sha!==p.Ii)}_isTracked=!1;get isTracked(){return this._isTracked}get lineCount(){return this.document.lineCount}get uri(){return this._uri}async activate(){this._requiresUpdate&&await this.update(),(0,ie.v)("gitlens:activeFileStatus",this.getStatus())}is(e){return e===this.document}_updateDebounced;reset(e){this._requiresUpdate=!0,this._blameFailed=!1,this._isDirtyIdle=!1,null!=this.state&&(this.state=void 0,C.Yd.log(`Reset state for '${this.document.uri.toString(!0)}', reason=${e}`)),"repository"===e&&(0,G.$S)(this.document)&&(null==this._updateDebounced&&(this._updateDebounced=(0,he.Ds)(this.update.bind(this),250)),this._updateDebounced())}_blameFailed=!1;setBlameFailure(){const e=this.isBlameable;this._blameFailed=!0,e&&(0,G.$S)(this.document)&&this.update({forceBlameChange:!0})}resetForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!1}setForceDirtyStateChangeOnNextDocumentChange(){this._forceDirtyStateChangeOnNextDocumentChange=!0}_requiresUpdate=!0;async update({forceBlameChange:e}={}){if(this._requiresUpdate=!1,this._disposed||null==this._uri)return this._hasRemotes=!1,void(this._isTracked=!1);this._isDirtyIdle=!1;const t=(0,G.aW)(this.document),i=e?void 0:this.isBlameable,r=this.container.git.getRepository(this._uri);if(null==r?(this._isTracked=!1,this._hasRemotes=!1):[this._isTracked,this._hasRemotes]=await Promise.all([this.container.git.isTracked(this._uri),r.hasRemotes()]),null!=t){const e=this.isBlameable;if((0,ie.v)("gitlens:activeFileStatus",this.getStatus()),!this.initializing&&i!==e){const i={editor:t,document:this,blameable:e};this._onDidBlameStateChange.fire(i),this._eventDelegates.onDidBlameStateChange(i)}}}getStatus(){let e="";return this.isTracked&&(e+="tracked|"),this.isBlameable&&(e+="blameable|"),this.isRevision&&(e+="revision|"),this.hasRemotes&&(e+="remotes|"),e||void 0}}var ue=Object.defineProperty,de=Object.getOwnPropertyDescriptor;class DocumentTracker{constructor(e){this.container=e,this._disposable=r.Disposable.from((0,le.IH)(e.onReady)(this.onReady,this),te.D.onDidChange(this.onConfigurationChanged,this),r.window.onDidChangeActiveTextEditor(this.onActiveTextEditorChanged,this),r.workspace.onDidChangeTextDocument((0,he.Ds)(this.onTextDocumentChanged,50),this),r.workspace.onDidCloseTextDocument(this.onTextDocumentClosed,this),r.workspace.onDidSaveTextDocument(this.onTextDocumentSaved,this),this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this)),this._dirtyIdleTriggerDelay=te.D.get("advanced.blame.delayAfterEdit")}_onDidChangeBlameState=new r.EventEmitter;get onDidChangeBlameState(){return this._onDidChangeBlameState.event}_onDidChangeContent=new r.EventEmitter;get onDidChangeContent(){return this._onDidChangeContent.event}_onDidChangeDirtyState=new r.EventEmitter;get onDidChangeDirtyState(){return this._onDidChangeDirtyState.event}_onDidTriggerDirtyIdle=new r.EventEmitter;get onDidTriggerDirtyIdle(){return this._onDidTriggerDirtyIdle.event}_dirtyIdleTriggerDelay;_disposable;_documentMap=new Map;dispose(){this._disposable.dispose(),this.clear()}onReady(){this.onConfigurationChanged(),this.onActiveTextEditorChanged(r.window.activeTextEditor)}_timer;onActiveTextEditorChanged(e){if(null!=e&&!(0,G.PH)(e))return;if(null!=this._timer&&(clearTimeout(this._timer),this._timer=void 0),null==e)return void(this._timer=setTimeout((()=>{this._timer=void 0,(0,ie.v)("gitlens:activeFileStatus",void 0)}),250));const t=this._documentMap.get(e.document);null==t?this.addCore(e.document):t.then((e=>e.activate()),(()=>{}))}onConfigurationChanged(e){null!=e&&(te.D.changed(e,"blame.ignoreWhitespace")||te.D.changed(e,"advanced.caching.enabled"))&&this.reset("config"),te.D.changed(e,"advanced.blame.delayAfterEdit")&&(this._dirtyIdleTriggerDelay=te.D.get("advanced.blame.delayAfterEdit"),this._dirtyIdleTriggeredDebounced=void 0)}onRepositoriesChanged(e){this.reset("repository",e.added.length?new Set(e.added.map((e=>e.path))):void 0,e.removed.length?new Set(e.removed.map((e=>e.path))):void 0)}onRepositoryChanged(e){e.changed(v.I6.Index,v.I6.Heads,v.I6.Status,v.I6.Unknown,v.du.Any)&&this.reset("repository",new Set([e.repository.path]))}async onTextDocumentChanged(e){const{scheme:t}=e.document.uri;if(!this.container.git.supportedSchemes.has(t))return;const i=await(this._documentMap.get(e.document)??this.addCore(e.document));i.reset("document");const n=e.document.isDirty,s=r.window.activeTextEditor;null!=this._dirtyIdleTriggeredDebounced&&(n?this._dirtyIdleTriggeredDebounced({editor:s,document:i}):this._dirtyIdleTriggeredDebounced.cancel()),s?.document===e.document&&this._onDidChangeContent.fire({editor:s,document:i,contentChanges:e.contentChanges}),(i.forceDirtyStateChangeOnNextDocumentChange||i.dirty!==n)&&(i.resetForceDirtyStateChangeOnNextDocumentChange(),i.dirty=n,null!=s&&s.document===e.document&&this.fireDocumentDirtyStateChanged({editor:s,document:i,dirty:i.dirty}))}onTextDocumentClosed(e){this.remove(e)}async onTextDocumentSaved(e){const t=this._documentMap.get(e);null==t?(0,G.$S)(e)&&this.addCore(e):(await t).update({forceBlameChange:!0})}async add(e){let t;if((0,h.uy)(e))try{t=await r.workspace.openTextDocument(e.documentUri())}catch(i){const n=i?.toString()??"";if(r.env.language.startsWith("en"))if(n.includes("File seems to be binary and cannot be opened as text"))t=new BinaryTextDocument(e);else{if(!(n.includes("File not found")||n.includes("Unable to read file")||n.includes("Unable to resolve non-existing file")))throw i;t=new MissingRevisionTextDocument(e)}else{if(!n.includes("cannot open"))throw i;t=new MissingRevisionTextDocument(e)}}else t=e instanceof r.Uri?await r.workspace.openTextDocument(e):e;return this.addCore(t)}async addCore(e){const t=TrackedDocument.create(e,!1,{onDidBlameStateChange:e=>this._onDidChangeBlameState.fire(e)},this.container);return this._documentMap.set(e,t),t}async clear(){for(const e of this._documentMap.values())(await e).dispose();this._documentMap.clear()}get(e){if(e instanceof r.Uri){const t=(0,G.s5)(e);if(null==t)return;e=t}return this._documentMap.get(e)}async getOrAdd(e){e instanceof r.Uri&&(e=(0,G.s5)(e)??e);return this.get(e)??this.add(e)}has(e){if(e instanceof r.Uri){const t=(0,G.s5)(e);if(null==t)return!1;e=t}return this._documentMap.has(e)}async remove(e,t){let i;null!=t&&(i=this._documentMap.get(e)),this._documentMap.delete(e),(t??await i)?.dispose()}_dirtyIdleTriggeredDebounced;_dirtyStateChangedDebounced;fireDocumentDirtyStateChanged(e){if(e.dirty)return queueMicrotask((()=>{this._dirtyStateChangedDebounced?.cancel(),r.window.activeTextEditor===e.editor&&this._onDidChangeDirtyState.fire(e)})),void(this._dirtyIdleTriggerDelay>0&&(null==this._dirtyIdleTriggeredDebounced&&(this._dirtyIdleTriggeredDebounced=(0,he.Ds)((e=>{this._dirtyIdleTriggeredDebounced?.pending()||(e.document.isDirtyIdle=!0,this._onDidTriggerDirtyIdle.fire(e))}),this._dirtyIdleTriggerDelay)),this._dirtyIdleTriggeredDebounced({editor:e.editor,document:e.document})));null==this._dirtyStateChangedDebounced&&(this._dirtyStateChangedDebounced=(0,he.Ds)((e=>{r.window.activeTextEditor===e.editor&&this._onDidChangeDirtyState.fire(e)}),250)),this._dirtyStateChangedDebounced(e)}reset(e,t,i){Promise.allSettled((0,ne.UI)((0,ne.hX)(this._documentMap,(([e])=>"string"==typeof e)),(async([,r])=>{const n=await r;i?.has(n.uri.repoPath)?this.remove(n.document,n):(null==t||t.has(n.uri.repoPath))&&n.reset(e)})))}}((e,t,i,r)=>{for(var n,s=r>1?void 0:r?de(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);r&&s&&ue(t,i,s)})([(0,L.fF)({args:{1:e=>null!=e?(0,ne.v_)(e,","):"",2:e=>null!=e?(0,ne.v_)(e,","):""}})],DocumentTracker.prototype,"reset",1);class EmptyTextDocument{constructor(e){this.gitUri=e,this.uri=e.documentUri(),this.eol=r.EndOfLine.LF,this.fileName=this.uri.fsPath,this.isClosed=!1,this.isDirty=!1,this.isUntitled=!1,this.languageId="",this.lineCount=0,this.version=0}eol;fileName;isClosed;isDirty;isUntitled;languageId;lineCount;uri;version;getText(e){throw new Error("Method not supported.")}getWordRangeAtPosition(e,t){throw new Error("Method not supported.")}lineAt(e){throw new Error("Method not supported.")}offsetAt(e){throw new Error("Method not supported.")}positionAt(e){throw new Error("Method not supported.")}save(){throw new Error("Method not supported.")}validatePosition(e){throw new Error("Method not supported.")}validateRange(e){throw new Error("Method not supported.")}}class BinaryTextDocument extends EmptyTextDocument{}class MissingRevisionTextDocument extends EmptyTextDocument{}class GitDocumentState{blameCache=new Map;diffCache=new Map;logCache=new Map;clearBlame(e){null!=e?this.blameCache.delete(e):this.blameCache.clear()}clearDiff(e){null!=e?this.diffCache.delete(e):this.diffCache.clear()}clearLog(e){null!=e?this.logCache.delete(e):this.logCache.clear()}getBlame(e){return this.blameCache.get(e)}getDiff(e){return this.diffCache.get(e)}getLog(e){return this.logCache.get(e)}setBlame(e,t){null!=t?this.blameCache.set(e,t):this.blameCache.delete(e)}setDiff(e,t){null!=t?this.diffCache.set(e,t):this.diffCache.delete(e)}setLog(e,t){null!=t?this.logCache.set(e,t):this.logCache.delete(e)}}class GitDocumentTracker extends DocumentTracker{async resetCache(e,t){const i=this.get(e);if(null!=i)switch(t){case"blame":(await i).state?.clearBlame();break;case"diff":(await i).state?.clearDiff();break;case"log":(await i).state?.clearLog()}}}async function pe(e){try{const e=r.extensions.getExtension("ms-vscode.remote-repositories")??r.extensions.getExtension("GitHub.remotehub");if(null==e)throw C.Yd.log("GitHub Repositories extension is not installed or enabled"),new a.R5("GitHub Repositories","GitHub.remotehub");return e.isActive?e.exports:await e.activate()}catch(t){if(C.Yd.error(t,"Unable to get required api from the GitHub Repositories extension"),a.R5,e)return;throw t}}var me=(e=>(e[e.Branch=0]="Branch",e[e.RemoteBranch=1]="RemoteBranch",e[e.Tag=2]="Tag",e[e.Commit=3]="Commit",e))(me||{}),ge=i(3878),fe=Object.defineProperty,we=Object.getOwnPropertyDescriptor,ve=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?we(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&fe(t,i,s),s};const ye=/"/g,be=Object.freeze([]),Ce=Object.freeze({values:[]}),Ae=Promise.resolve(void 0),Se=["repo","read:user","user:email"],Pe=/^[^/](?!.*\/\.)(?!.*\.\.)(?!.*\/\/)(?!.*@\{)[^\000-\037\177 ~^:?*[\\]+[^./]$/;class GitHubGitProvider{constructor(e){this.container=e,this._disposables.push(this.container.events.on("git:cache:reset",(e=>e.data.repoPath?this.resetCache(e.data.repoPath,...e.data.caches??be):this.resetCaches(...e.data.caches??be)),r.authentication.onDidChangeSessions(this.onAuthenticationSessionsChanged,this)))}descriptor={id:"github",name:"GitHub",virtual:!0};supportedSchemes=new Set([s.sN.Virtual,s.sN.GitHub,s.sN.PRs]);_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_onDidChangeRepository=new r.EventEmitter;get onDidChangeRepository(){return this._onDidChangeRepository.event}_onDidCloseRepository=new r.EventEmitter;get onDidCloseRepository(){return this._onDidCloseRepository.event}_onDidOpenRepository=new r.EventEmitter;get onDidOpenRepository(){return this._onDidOpenRepository.event}_branchesCache=new Map;_repoInfoCache=new Map;_tagsCache=new Map;_disposables=[];dispose(){this._disposables.forEach((e=>{e.dispose()}))}onAuthenticationSessionsChanged(e){"github"===e.provider.id&&(this._sessionPromise=void 0,this.ensureSession(!1,!0))}onRepositoryChanged(e,t){this._branchesCache.delete(e.path),this._tagsCache.delete(e.path),this._repoInfoCache.delete(e.path),this._onDidChangeRepository.fire(t)}async discoverRepositories(e,t){if(!this.supportedSchemes.has(e.scheme))return[];try{const{remotehub:i}=await this.ensureRepositoryContext(e.toString(),!0),r=i.getVirtualWorkspaceUri(e);return null==r?[]:this.openRepository(void 0,r,!0,void 0,t?.silent)}catch(t){return t.message.startsWith("No provider registered with")&&(C.Yd.error(t,"No GitHub provider registered with Remote Repositories (yet); queuing pending discovery"),this._pendingDiscovery.add(e),this.ensurePendingRepositoryDiscovery()),[]}}_pendingDiscovery=new Set;_pendingTimer;ensurePendingRepositoryDiscovery(){null==this._pendingTimer&&0!==this._pendingDiscovery.size&&(this._pendingTimer=setTimeout((async()=>{try{const e=await pe();for(const t of this._pendingDiscovery){if(null==e.getProvider(t))return this._pendingTimer=void 0,void this.ensurePendingRepositoryDiscovery();this._pendingDiscovery.delete(t)}this._pendingTimer=void 0,setTimeout((()=>this._onDidChange.fire()),1),0!==this._pendingDiscovery.size&&this.ensurePendingRepositoryDiscovery()}catch{this._pendingTimer=void 0,this.ensurePendingRepositoryDiscovery()}}),250))}updateContext(){(0,ie.v)("gitlens:hasVirtualFolders",this.container.git.hasOpenRepositories(this.descriptor.id))}openRepository(e,t,i,n,s){return[new v._j(this.container,this.onRepositoryChanged.bind(this),this.descriptor,e??r.workspace.getWorkspaceFolder(t),t,i,n??!r.window.state.focused,s)]}async supports(e){switch(e){case c.A.Stashes:case c.A.Worktrees:case c.A.StashOnlyStaged:return!1;default:return!0}}async visibility(e){const t=await this.getRemotes(e,{sort:!0});if(0===t.length)return["local",void 0];for await(const e of(0,ae.rX)(t.map((e=>this.getRemoteVisibility(e)))))if("fulfilled"===e.status&&"public"===e.value[0])return["public",(0,w.Ym)(e.value[1])];return["private",(0,w.Ym)(t)]}async getRemoteVisibility(e){if("github"===e.provider?.id){const{github:t,metadata:i,session:r}=await this.ensureRepositoryContext(e.repoPath);return[await t.getRepositoryVisibility(r.accessToken,i.repo.owner,i.repo.name)??"private",e]}return["private",e]}async getOpenScmRepositories(){return[]}async getScmRepository(e){}async getOrOpenScmRepository(e){}canHandlePathOrUri(e,t){if(this.supportedSchemes.has(e))return"string"==typeof t?t:t.toString()}getAbsoluteUri(e,t){if("string"==typeof t){if(!(0,oe.tE)(t))throw r.window.showErrorMessage(`Unable to get absolute uri between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be a uri`),new Error(`Base path '${t}' must be a uri`);t=r.Uri.parse(t,!0)}if("string"==typeof e&&!(0,oe.tE)(e)){const i=(0,oe.AH)(e);if(!(0,oe.YP)(i))return r.Uri.joinPath(t,i)}const i=this.getRelativePath(e,t);return r.Uri.joinPath(t,i)}async getBestRevisionUri(e,t,i){return i?this.createProviderUri(e,i,t):this.createVirtualUri(e,i,t)}getRelativePath(e,t){if("string"==typeof t){if(!(0,oe.tE)(t))throw r.window.showErrorMessage(`Unable to get relative path between ${"string"==typeof e?e:e.toString(!0)} and ${t}; Base path '${t}' must be a uri`),new Error(`Base path '${t}' must be a uri`);t=r.Uri.parse(t,!0)}let i;if("string"==typeof e){if(!(0,oe.tE)(e))return e=(0,oe.AH)(e),i=(0,oe.YP)(e)&&e.startsWith(t.path)?e.slice(t.path.length):e,i.charCodeAt(0)===s.mN.Slash&&(i=i.slice(1)),i;e=r.Uri.parse(e,!0)}return i=(0,oe.AH)((0,oe.Gf)(t.path.slice(1),e.path.slice(1))),i}getRevisionUri(e,t,i){const r=this.createProviderUri(e,i,t);return i===p.Ii?r.with({query:"~"}):r}async getWorkingUri(e,t){return this.createVirtualUri(e,void 0,t.path)}async addRemote(e,t,i,r){}async pruneRemote(e,t){}async removeRemote(e,t){}async applyChangesToWorkingFile(e,t,i){}async branchContainsCommit(e,t,i){return!1}async checkout(e,t,i){}resetCache(e,...t){(0===t.length||t.includes("branches"))&&this._branchesCache.delete(e),(0===t.length||t.includes("tags"))&&this._tagsCache.delete(e),0===t.length&&this._repoInfoCache.delete(e)}resetCaches(...e){(0===e.length||e.includes("branches"))&&this._branchesCache.clear(),(0===e.length||e.includes("tags"))&&this._tagsCache.clear(),0===e.length&&this._repoInfoCache.clear()}async excludeIgnoredUris(e,t){return t}async fetch(e,t){}async pull(e,t){}async push(e,t){}async findRepositoryUri(e,t){const i=(0,se.UH)();try{const t=await this.ensureRemoteHubApi();return t.getProviderRootUri(e).with({scheme:s.sN.Virtual})}catch(e){return a.R5,void C.Yd.error(e,i)}}async getAheadBehindCommitCount(e,t){}async getBlame(e,t){const i=(0,se.UH)();if(t?.isDirty)return;let r="blame";null!=e.sha&&(r+=`:${e.sha}`);const n=await this.container.tracker.getOrAdd(e);if(null!=n.state){const e=n.state.getBlame(r);if(null!=e)return C.Yd.debug(i,`Cache hit: '${r}'`),e.item}C.Yd.debug(i,`Cache miss: '${r}'`),null==n.state&&(n.state=new GitDocumentState);const s=this.getBlameCore(e,n,r,i);if(null!=n.state){C.Yd.debug(i,`Cache add: '${r}'`);const e={item:s};n.state.setBlame(r,e)}return s}async getBlameCore(e,t,i,n){try{const t=await this.ensureRepositoryContext(e.repoPath);if(null==t)return;const{metadata:i,github:n,remotehub:o,session:a}=t,c=o.getVirtualUri(o.getProviderRootUri(e)),l=this.getRelativePath(e,c);if(e.scheme===s.sN.Virtual){const[t,i]=await Promise.allSettled([r.workspace.fs.stat(e),r.workspace.fs.stat(e.with({scheme:s.sN.GitHub}))]);if("fulfilled"!==t.status||"fulfilled"!==i.status||t.value.mtime!==i.value.mtime)return}const h=e.sha&&"HEAD"!==e.sha?e.sha:(await i.getRevision()).revision,u=await n.getBlame(a.accessToken,i.repo.owner,i.repo.name,h,l),p=new Map,m=new Map,f=[];for(const t of u.ranges){const i=t.commit,{viewer:r=a.account.label}=u,n=null!=r&&i.author.name===r?"You":i.author.name,s=null!=r&&i.committer.name===r?"You":i.committer.name;let o=p.get(n);null==o&&(o={name:n,lineCount:0},p.set(n,o)),o.lineCount+=t.endingLine-t.startingLine+1;let h=m.get(i.oid);null==h&&(h=new d.aM(this.container,e.repoPath,i.oid,new d._j(n,i.author.email,new Date(i.author.date),i.author.avatarUrl),new d._j(s,i.committer.email,new Date(i.author.date)),i.message.split("\n",1)[0],i.parents.nodes[0]?.oid?[i.parents.nodes[0]?.oid]:[],i.message,new g.K8(c.toString(),l,g.NV.Modified),{changedFiles:i.changedFiles??0,additions:i.additions??0,deletions:i.deletions??0},[]),m.set(i.oid,h));for(let e=t.startingLine;e<=t.endingLine;e++){const t={sha:i.oid,originalLine:e,line:e};h.lines.push(t),f[e-1]=t}}const w=new Map([...p.entries()].sort(((e,t)=>t[1].lineCount-e[1].lineCount)));return{repoPath:e.repoPath,authors:w,commits:m,lines:f}}catch(e){if(null!=t.state&&!String(e).includes("No provider registered with")){const r=e?.toString()??"";C.Yd.debug(n,`Cache replace (with empty promise): '${i}'`);const s={item:Ae,errorMessage:r};return t.state.setBlame(i,s),t.setBlameFailure(),Ae}return}}async getBlameContents(e,t){}async getBlameForLine(e,t,i,r){const n=(0,se.UH)();if(!i?.isDirty){if(!r?.forceSingleLine){const i=await this.getBlame(e);if(null==i)return;let r=i.lines[t];if(null==r){if(i.lines.length!==t)return;r=i.lines[t-1]}const n=i.commits.get(r.sha);if(null==n)return;return{author:{...i.authors.get(n.author.name),lineCount:n.lines.length},commit:n,line:r}}try{const i=await this.ensureRepositoryContext(e.repoPath);if(null==i)return;const{metadata:r,github:n,remotehub:s,session:o}=i,a=s.getVirtualUri(s.getProviderRootUri(e)),c=this.getRelativePath(e,a),l=e.sha&&"HEAD"!==e.sha?e.sha:(await r.getRevision()).revision,h=await n.getBlame(o.accessToken,r.repo.owner,r.repo.name,l,c),u=t+1,p=h.ranges.find((e=>e.startingLine===u));if(null==p)return;const m=p.commit,{viewer:f=o.account.label}=h,w=null!=f&&m.author.name===f?"You":m.author.name,v=null!=f&&m.committer.name===f?"You":m.committer.name,y=new d.aM(this.container,e.repoPath,m.oid,new d._j(w,m.author.email,new Date(m.author.date),m.author.avatarUrl),new d._j(v,m.committer.email,new Date(m.author.date)),m.message.split("\n",1)[0],m.parents.nodes[0]?.oid?[m.parents.nodes[0]?.oid]:[],m.message,new g.K8(a.toString(),c,g.NV.Modified),{changedFiles:m.changedFiles??0,additions:m.additions??0,deletions:m.deletions??0},[]);for(let e=p.startingLine;e<=p.endingLine;e++){const t={sha:m.oid,originalLine:e,line:e};y.lines.push(t)}return{author:{name:w,lineCount:p.endingLine-p.startingLine+1},commit:y,line:{sha:m.oid,originalLine:p.startingLine,line:p.startingLine}}}catch(e){return void C.Yd.error(n,e)}}}async getBlameForLineContents(e,t,i,r){}async getBlameForRange(e,t){const i=await this.getBlame(e);if(null!=i)return this.getBlameRange(i,e,t)}async getBlameForRangeContents(e,t,i){const r=await this.getBlameContents(e,i);if(null!=r)return this.getBlameRange(r,e,t)}getBlameRange(e,t,i){if(0===e.lines.length)return{allLines:e.lines,...e};if(0===i.start.line&&i.end.line===e.lines.length-1)return{allLines:e.lines,...e};const r=e.lines.slice(i.start.line,i.end.line+1),n=new Set(r.map((e=>e.sha))),s=i.start.line+1,o=i.end.line+1,a=new Map,c=new Map;for(const t of e.commits.values()){if(!n.has(t.sha))continue;const e=t.with({lines:t.lines.filter((e=>e.line>=s&&e.line<=o))});c.set(t.sha,e);let i=a.get(e.author.name);null==i&&(i={name:e.author.name,lineCount:0},a.set(i.name,i)),i.lineCount+=e.lines.length}const l=new Map([...a.entries()].sort(((e,t)=>t[1].lineCount-e[1].lineCount)));return{repoPath:t.repoPath,authors:l,commits:c,lines:r,allLines:e.lines}}async getBranch(e){const{values:[t]}=await this.getBranches(e,{filter:e=>e.current});return t}async getBranches(e,t){if(null==e)return Ce;const i=(0,se.UH)();let r=t?.cursor?void 0:this._branchesCache.get(e);if(null==r){async function s(){try{const{metadata:i,github:r,session:n}=await this.ensureRepositoryContext(e),s=await i.getRevision(),o=0===s.type?s.name:void 0,a=[];let c=t?.cursor;const l=null==c;for(;;){const t=await r.getBranches(n.accessToken,i.repo.owner,i.repo.name,{cursor:c});for(const i of t.values){const t=new Date("author-date"===te.D.get("advanced.commitOrdering")?i.target.authoredDate:i.target.committedDate),r=i.target.oid;a.push(new u.XI(this.container,e,i.name,!1,i.name===o,t,r,{name:`origin/${i.name}`,missing:!1}),new u.XI(this.container,e,`origin/${i.name}`,!0,!1,t,r))}if(!t.paging?.more||!l)return{...t,values:a};c=t.paging.cursor}}catch(t){return C.Yd.error(t,i),this._branchesCache.delete(e),Ce}}r=s.call(this),null==t?.cursor&&this._branchesCache.set(e,r)}let n=await r;return null!=t?.filter&&(n={...n,values:n.values.filter(t.filter)}),null!=t?.sort&&(0,u.YF)(n.values,"boolean"==typeof t.sort?void 0:t.sort),n}async getChangedFilesCount(e,t){if(!t)return;const i=await this.getCommit(e,t);if(null==i?.stats)return;const{stats:r}=i,n=(0,d.By)(r.changedFiles);return{additions:r.additions,deletions:r.deletions,changedFiles:n}}async getCommit(e,t){if(null==e)return;const i=(0,se.UH)();try{const{metadata:i,github:r,session:n}=await this.ensureRepositoryContext(e),s=await r.getCommit(n.accessToken,i.repo.owner,i.repo.name,t);if(null==s)return;const{viewer:o=n.account.label}=s,a=null!=o&&s.author.name===o?"You":s.author.name,c=null!=o&&s.committer.name===o?"You":s.committer.name;return new d.aM(this.container,e,s.oid,new d._j(a,s.author.email,new Date(s.author.date),s.author.avatarUrl),new d._j(c,s.committer.email,new Date(s.committer.date)),s.message.split("\n",1)[0],s.parents.nodes.map((e=>e.oid)),s.message,s.files?.map((t=>new g.K8(e,t.filename??"",(0,ge.fromCommitFileStatus)(t.status)??g.NV.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0})))??[],{changedFiles:s.changedFiles??0,additions:s.additions??0,deletions:s.deletions??0},[])}catch(e){return void C.Yd.error(e,i)}}async getCommitBranches(e,t,i,r){if(null==e||null==r?.commitDate)return[];const n=(0,se.UH)();try{const{metadata:n,github:s,session:o}=await this.ensureRepositoryContext(e);let a;return a=i?await s.getCommitOnBranch(o.accessToken,n.repo.owner,n.repo.name,i,t,r?.commitDate):await s.getCommitBranches(o.accessToken,n.repo.owner,n.repo.name,t,r?.commitDate),a}catch(e){return C.Yd.error(e,n),[]}}async getCommitCount(e,t){if(null==e)return;const i=(0,se.UH)();try{const{metadata:i,github:r,session:n}=await this.ensureRepositoryContext(e);return await r.getCommitCount(n?.accessToken,i.repo.owner,i.repo.name,t)}catch(e){return void C.Yd.error(e,i)}}async getCommitForFile(e,t,i){if(null==e)return;const r=(0,se.UH)();try{const{metadata:r,github:n,remotehub:s,session:o}=await this.ensureRepositoryContext(e),a=this.getRelativePath(t,s.getProviderRootUri(t)),c=i?.ref&&"HEAD"!==i.ref?i.ref:(await r.getRevision()).revision,l=await n.getCommitForFile(o.accessToken,r.repo.owner,r.repo.name,c,a);if(null==l)return;const{viewer:h=o.account.label}=l,u=null!=h&&l.author.name===h?"You":l.author.name,p=null!=h&&l.committer.name===h?"You":l.committer.name,m=l.files?.map((t=>new g.K8(e,t.filename??"",(0,ge.fromCommitFileStatus)(t.status)??g.NV.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0}))),f=m?.find((e=>e.path===a));return new d.aM(this.container,e,l.oid,new d._j(u,l.author.email,new Date(l.author.date),l.author.avatarUrl),new d._j(p,l.committer.email,new Date(l.committer.date)),l.message.split("\n",1)[0],l.parents.nodes.map((e=>e.oid)),l.message,{file:f,files:m},{changedFiles:l.changedFiles??0,additions:l.additions??0,deletions:l.deletions??0},[])}catch(e){return void C.Yd.error(e,r)}}async getCommitsForGraph(e,t,i){const r=i?.limit??te.D.get("graph.defaultItemLimit")??5e3,n=te.D.get("graph.commitOrdering",void 0,"date"),s=te.D.get("graph.avatars",void 0,!0),[o,a,c,l,h,u]=await Promise.allSettled([this.getLog(e,{all:!0,ordering:n,limit:r}),this.getBranch(e),this.getBranches(e,{filter:e=>e.remote}),this.getRemotes(e),this.getTags(e),this.getCurrentUser(e)]),d=new Map,p=(0,ae.Sb)(a),m=new Map,g=new Map;null!=p&&(m.set(p.name,p),null!=p.sha&&g.set(p.sha,[p.name]));const f=(0,ae.Sb)(c)?.values;if(null!=f)for(const e of f){if(m.set(e.name,e),null==e.sha)continue;const t=g.get(e.sha);null==t?g.set(e.sha,[e.name]):t.push(e.name)}const w=new Set,v=(0,ae.Sb)(l)[0],y=null!=v?new Map([[v.name,v]]):new Map,b=new Map,C=(0,ae.Sb)(h)?.values;if(null!=C)for(const e of C){if(null==e.sha)continue;const t=b.get(e.sha);null==t?b.set(e.sha,[e.name]):t.push(e.name)}return this.getCommitsForGraphCore(e,t,(0,ae.Sb)(o),p,m,g,v,y,b,(0,ae.Sb)(u),d,w,{...i,useAvatars:s})}async getCommitsForGraphCore(e,t,i,r,n,s,a,c,l,h,p,m,g){const v={...g?.include,stats:!0},y=new Map;if(null==i)return{repoPath:e,avatars:p,ids:m,includes:v,branches:n,remotes:c,downstreams:y,rows:[]};const C=(i.pagedCommits?.()??i.commits)?.values();if(null==C)return{repoPath:e,avatars:p,ids:m,includes:v,branches:n,remotes:c,downstreams:y,rows:[]};const A=[];let S,P,k,R,D,_,T,F,$,O,I=!1,E=!1;const x=r.upstream?.name;for(const i of C){if(m.add(i.sha),I=i.sha===r.sha,I)if(k={webviewItem:`gitlens:branch${I?"+current":""}${null!=r?.upstream?"+tracking":""}`,webviewItemValue:{type:"branch",ref:(0,f.xB)(r.name,e,{id:r.id,refType:"branch",name:r.name,remote:!1,upstream:r.upstream})}},D=[{id:r.id,name:r.name,isCurrentHead:!0,context:(0,ce.BH)(k),upstream:null!=r.upstream?{name:r.upstream.name,id:(0,u.Vx)(e,!0,r.upstream.name)}:void 0}],null!=r.upstream){if(F=(0,u.Vx)(e,!0,r.name),S=((g?.useAvatars?a.provider?.avatarUri:void 0)??(0,w.dM)(this.container,a,t))?.toString(!0),k={webviewItem:"gitlens:branch+remote",webviewItemValue:{type:"branch",ref:(0,f.xB)(r.name,e,{id:F,refType:"branch",name:r.name,remote:!0,upstream:{name:a.name,missing:!1}})}},_=[{id:F,name:r.name,owner:a.name,url:a.url,avatarUrl:S,context:(0,ce.BH)(k),current:!0,hostingServiceType:a.provider?.id}],null!=x){let e=y.get(x);null==e&&(e=[],y.set(x,e)),e.push(r.name)}}else _=[];else{D=[],_=[];const r=s.get(i.sha);if(null!=r)for(const i of r)F=(0,u.Vx)(e,!0,i),P=(0,u.S3)(i),S=((g?.useAvatars?a.provider?.avatarUri:void 0)??(0,w.dM)(this.container,a,t))?.toString(!0),k={webviewItem:"gitlens:branch+remote",webviewItemValue:{type:"branch",ref:(0,f.xB)(i,e,{id:F,refType:"branch",name:i,remote:!0,upstream:{name:a.name,missing:!1}})}},_.push({id:F,name:P,owner:a.name,url:a.url,avatarUrl:S,context:(0,ce.BH)(k),hostingServiceType:a.provider?.id})}T=[];const n=l.get(i.sha);if(null!=n)for(const t of n)O=(0,b.YU)(e,t),k={webviewItem:"gitlens:tag",webviewItemValue:{type:"tag",ref:(0,f.xB)(t,e,{id:O,refType:"tag",name:t})}},T.push({id:O,name:t,annotated:!0,context:(0,ce.BH)(k)});if(i.author.email&&!p.has(i.author.email)){const e=i.getCachedAvatarUri();null!=e&&p.set(i.author.email,e.toString(!0))}E="You"===i.author.name,R={row:(0,ce.BH)({webviewItem:`gitlens:commit${I?"+HEAD":""}+current`,webviewItemValue:{type:"commit",ref:(0,f.xB)(i.sha,e,{refType:"revision",message:i.message})}}),avatar:(0,ce.BH)({webviewItem:"gitlens:contributor"+(E?"+current":""),webviewItemValue:{type:"contributor",repoPath:e,name:E&&null!=h?.name?h.name:i.author.name,email:i.author.email,current:E}})},A.push({sha:i.sha,parents:i.parents,author:i.author.name,email:i.author.email??"",date:i.committer.date.getTime(),message:(0,o.X)(i.message&&String(i.message).length?i.message:i.summary),type:i.parents.length>1?"merge-node":"commit-node",heads:D,remotes:_,tags:T,contexts:R}),null!=i.stats&&(null==$&&($=new Map),$.set(i.sha,{files:(0,d.By)(i.stats.changedFiles),additions:i.stats.additions,deletions:i.stats.deletions}))}return"HEAD"===g?.ref?g.ref=(0,ne.Ps)(i.commits.values())?.sha:null!=g?.ref&&(g.ref=void 0),{repoPath:e,avatars:p,ids:m,includes:v,branches:n,remotes:c,downstreams:y,rows:A,id:g?.ref,paging:{limit:i.limit,startingCursor:i.startingCursor,hasMore:i.hasMore},more:async o=>{const u=await(i.more?.(o));return this.getCommitsForGraphCore(e,t,u,r,n,s,a,c,l,h,p,m,g)}}}async getCommitTags(e,t,i){if(null==e||null==i?.commitDate)return[];const r=(0,se.UH)();try{const{metadata:r,github:n,session:s}=await this.ensureRepositoryContext(e);return await n.getCommitTags(s.accessToken,r.repo.owner,r.repo.name,t,i?.commitDate)}catch(e){return C.Yd.error(e,r),[]}}async getContributors(e,t){if(null==e)return[];const i=(0,se.UH)();try{const{metadata:t,github:i,session:a}=await this.ensureRepositoryContext(e),c=await i.getContributors(a.accessToken,t.repo.owner,t.repo.name),l=await this.getCurrentUser(e),h=[];for(const t of c)"User"===t.type&&h.push(new m.V(e,t.name,t.email,t.contributions,void 0,(r=l,n=t.name,s=t.email,o=t.login,!(null==r||null==r.name&&null==r.email&&null==r.username||null!=r.name&&r.name!==n||null!=r.email&&r.email!==s||null!=r.username&&r.username!==o)),void 0,t.login,t.avatar_url,t.node_id));return h}catch(e){return C.Yd.error(e,i),[]}var r,n,s,o}async getCurrentUser(e){if(!e)return;const t=(0,se.UH)(),i=this._repoInfoCache.get(e);let r=i?.user;if(null!=r)return r;if(null!==r)try{const{metadata:t,github:n,session:s}=await this.ensureRepositoryContext(e);return r=await n.getCurrentUser(s.accessToken,t.repo.owner,t.repo.name),this._repoInfoCache.set(e,{...i,user:r??null}),r}catch(r){return C.Yd.error(r,t),void this._repoInfoCache.set(e,{...i,user:null})}}async getDefaultBranchName(e,t){if(null==e)return;const i=(0,se.UH)();try{const{metadata:t,github:i,session:r}=await this.ensureRepositoryContext(e);return await i.getDefaultBranchName(r.accessToken,t.repo.owner,t.repo.name)}catch(e){return void C.Yd.error(e,i)}}async getDiffForFile(e,t,i){}async getDiffForFileContents(e,t,i){}async getDiffForLine(e,t,i,r){}async getDiffStatus(e,t,i,r){}async getFileStatusForCommit(e,t,i){if(i===p.Ii||(0,f.l3)(i))return;const r=await this.getCommitForFile(e,t,{ref:i});return null!=r?r.findFile(t):void 0}async getLastFetchedTimestamp(e){}async getLog(e,t){if(null==e)return;const i=(0,se.UH)(),r=this.getPagingLimit(t?.limit);try{const{metadata:i,github:n,session:s}=await this.ensureRepositoryContext(e),o=t?.ref&&"HEAD"!==t.ref?t.ref:(await i.getRevision()).revision,a=await n.getCommits(s.accessToken,i.repo.owner,i.repo.name,o,{all:t?.all,authors:t?.authors,after:t?.cursor,limit:r,since:t?.since?new Date(t.since):void 0}),c=new Map,{viewer:l=s.account.label}=a;for(const t of a.values){const i=null!=l&&t.author.name===l?"You":t.author.name,r=null!=l&&t.committer.name===l?"You":t.committer.name;let n=c.get(t.oid);null==n&&(n=new d.aM(this.container,e,t.oid,new d._j(i,t.author.email,new Date(t.author.date),t.author.avatarUrl),new d._j(r,t.committer.email,new Date(t.committer.date)),t.message.split("\n",1)[0],t.parents.nodes.map((e=>e.oid)),t.message,t.files?.map((t=>new g.K8(e,t.filename??"",(0,ge.fromCommitFileStatus)(t.status)??g.NV.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0}))),{changedFiles:t.changedFiles??0,additions:t.additions??0,deletions:t.deletions??0},[]),c.set(t.oid,n))}const h={repoPath:e,commits:c,sha:o,range:void 0,count:c.size,limit:r,hasMore:a.paging?.more??!1,endingCursor:a.paging?.cursor,query:i=>this.getLog(e,{...t,limit:i})};return h.hasMore&&(h.more=this.getLogMoreFn(h,t)),h}catch(e){return void C.Yd.error(e,i)}}async getLogRefsOnly(e,t){const i=await this.getLog(e,t);if(null!=i)return new Set([...i.commits.values()].map((e=>e.ref)))}getLogMoreFn(e,t){return async i=>{const r=null!=i&&"object"==typeof i?i.until:void 0;let n="number"==typeof i?i:void 0;if(r&&(0,ne.G)(e.commits.values(),(e=>e.ref===r)))return e;n=this.getPagingLimit(n);const s=await this.getLog(e.repoPath,{...t,limit:n,cursor:e.endingCursor});if(null==s)return{...e,hasMore:!1,more:void 0};const o=new Map([...e.commits,...s.commits]),a={repoPath:e.repoPath,commits:o,sha:e.sha,range:void 0,count:o.size,limit:null==r?(e.limit??0)+n:void 0,hasMore:null!=r||s.hasMore,startingCursor:(0,ne.Z$)(e.commits)?.[0],endingCursor:s.endingCursor,pagedCommits:()=>{for(const t of e.commits.keys())s.commits.delete(t);return s.commits},query:e.query};return a.hasMore&&(a.more=this.getLogMoreFn(a,t)),a}}async getLogForFile(e,t,i){if(null==e)return;const r=(0,se.UH)(),n=this.getRelativePath(t,e);if(null!=e&&e===n)throw new Error(`File name cannot match the repository path; path=${n}`);(i={reverse:!1,...i}).renames=!1,i.all=!1;let s="log";null!=i.ref&&(s+=`:${i.ref}`),i.limit=this.getPagingLimit(i?.limit),i.limit&&(s+=`:n${i.limit}`),i.renames&&(s+=":follow"),i.reverse&&(s+=":reverse"),i.since&&(s+=`:since=${i.since}`),i.skip&&(s+=`:skip${i.skip}`),i.cursor&&(s+=`:cursor=${i.cursor}`);const o=await this.container.tracker.getOrAdd(h.YY.fromFile(n,e,i.ref));if(!i.force&&null==i.range){if(null!=o.state){const n=o.state.getLog(s);if(null!=n)return C.Yd.debug(r,`Cache hit: '${s}'`),n.item;if(null!=i.ref||null!=i.limit){const n=o.state.getLog(`log${i.renames?":follow":""}${i.reverse?":reverse":""}`);if(null!=n){if(null==i.ref)return C.Yd.debug(r,`Cache hit: ~'${s}'`),n.item;C.Yd.debug(r,`Cache ?: '${s}'`);let o=await n.item;if(null!=o&&!o.hasMore&&o.commits.has(i.ref)){C.Yd.debug(r,`Cache hit: '${s}'`);let n=!0,a=0;const c=new Map((0,ne.DZ)(o.commits.entries(),(([e,t])=>{if(n){if(e!==i?.ref)return;n=!1}if(a++,!(null!=i?.limit&&a>i.limit))return[e,t]}))),l={...i};return o={...o,limit:i.limit,count:c.size,commits:c,query:i=>this.getLogForFile(e,t,{...l,limit:i})},o}}}}C.Yd.debug(r,`Cache miss: '${s}'`),null==o.state&&(o.state=new GitDocumentState)}const a=this.getLogForFileCore(e,n,o,s,r,i);if(null!=o.state&&null==i.range){C.Yd.debug(r,`Cache add: '${s}'`);const e={item:a};o.state.setLog(s,e)}return a}async getLogForFileCore(e,t,i,r,n,s){if(null==e)return;const o=this.getPagingLimit(s?.limit);try{const i=await this.ensureRepositoryContext(e);if(null==i)return;const{metadata:r,github:n,remotehub:a,session:c}=i,l=this.getAbsoluteUri(t,e),h=this.getRelativePath(l,a.getProviderRootUri(l)),u=s?.ref&&"HEAD"!==s.ref?s.ref:(await r.getRevision()).revision,p=await n.getCommits(c.accessToken,r.repo.owner,r.repo.name,u,{all:s?.all,after:s?.cursor,path:h,limit:o,since:s?.since?new Date(s.since):void 0}),m=new Map,{viewer:f=c.account.label}=p;for(const t of p.values){const i=null!=f&&t.author.name===f?"You":t.author.name,r=null!=f&&t.committer.name===f?"You":t.committer.name;let n=m.get(t.oid);if(null==n){const s=t.files?.map((t=>new g.K8(e,t.filename??"",(0,ge.fromCommitFileStatus)(t.status)??g.NV.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0}))),o=(0,oe.Mh)(h)?void 0:s?.find((e=>e.path===h))??new g.K8(e,h,g.NV.Modified,void 0,void 0,1===t.changedFiles?{additions:t.additions??0,deletions:t.deletions??0,changes:0}:void 0);n=new d.aM(this.container,e,t.oid,new d._j(i,t.author.email,new Date(t.author.date),t.author.avatarUrl),new d._j(r,t.committer.email,new Date(t.committer.date)),t.message.split("\n",1)[0],t.parents.nodes.map((e=>e.oid)),t.message,{file:o,files:s},{changedFiles:t.changedFiles??0,additions:t.additions??0,deletions:t.deletions??0},[]),m.set(t.oid,n)}}const w={repoPath:e,commits:m,sha:u,range:void 0,count:m.size,limit:o,hasMore:p.paging?.more??!1,endingCursor:p.paging?.cursor,query:i=>this.getLogForFile(e,t,{...s,limit:i})};return w.hasMore&&(w.more=this.getLogForFileMoreFn(w,t,s)),w}catch(e){if(null!=i.state&&null==s?.range&&!s?.reverse){const t=e?.toString()??"";C.Yd.debug(n,`Cache replace (with empty promise): '${r}'`);const s={item:Ae,errorMessage:t};return i.state.setLog(r,s),Ae}return}}getLogForFileMoreFn(e,t,i){return async r=>{const n=null!=r&&"object"==typeof r?r.until:void 0;let s="number"==typeof r?r:void 0;if(n&&(0,ne.G)(e.commits.values(),(e=>e.ref===n)))return e;s=this.getPagingLimit(s);const o=await this.getLogForFile(e.repoPath,t,{...i,limit:null==n?s:0,cursor:e.endingCursor});if(null==o)return{...e,hasMore:!1,more:void 0};const a=new Map([...e.commits,...o.commits]),c={repoPath:e.repoPath,commits:a,sha:e.sha,range:e.range,count:a.size,limit:null==n?(e.limit??0)+s:void 0,hasMore:null!=n||o.hasMore,endingCursor:o.endingCursor,query:e.query};return c.hasMore&&(c.more=this.getLogForFileMoreFn(c,t,i)),c}}async getMergeBase(e,t,i,r){}async getMergeStatus(e){}async getRebaseStatus(e){}async getNextComparisonUris(e,t,i,r=0){if(!i)return;const n=(0,se.UH)();try{const n=await this.ensureRepositoryContext(e);if(null==n)return;const{metadata:s,github:o,remotehub:a,session:c}=n,l=this.getRelativePath(t,a.getProviderRootUri(t)),u=(await s.getRevision()).revision;"HEAD"===i&&(i=u);const d=await o.getNextCommitRefs(c.accessToken,s.repo.owner,s.repo.name,u,l,i);return{current:0===r?h.YY.fromFile(l,e,i):new h.YY(await this.getBestRevisionUri(e,l,d[r-1])),next:new h.YY(await this.getBestRevisionUri(e,l,d[r]))}}catch(e){throw C.Yd.error(e,n),e}}async getOldestUnpushedRefForFile(e,t){}async getPreviousComparisonUris(e,t,i,r=0){if(i===p.Ii)return;const n=(0,se.UH)();i===p.CL&&(i=void 0);try{const n=await this.ensureRepositoryContext(e);if(null==n)return;const{metadata:s,github:o,remotehub:a,session:c}=n,l=this.getRelativePath(t,a.getProviderRootUri(t)),u=null!=i?1:0,d=await o.getCommitRefs(c.accessToken,s.repo.owner,s.repo.name,i&&"HEAD"!==i?i:(await s.getRevision()).revision,{path:l,first:u+r+1});if(null==d)return;const m=0===r?h.YY.fromFile(l,e,i):new h.YY(await this.getBestRevisionUri(e,l,d.values[u+r-1]?.oid??p.Ii));if(null==m||m.sha===p.Ii)return;return{current:m,previous:new h.YY(await this.getBestRevisionUri(e,l,d.values[u+r]?.oid??p.Ii))}}catch(e){throw C.Yd.error(e,n),e}}async getPreviousComparisonUrisForLine(e,t,i,r,n=0){if(r===p.Ii)return;const s=(0,se.UH)();try{const s=await this.ensureRepositoryContext(e);if(null==s)return;const{remotehub:o}=s;let a,c=this.getRelativePath(t,o.getProviderRootUri(t)),l=h.YY.fromFile(c,e,r),u=i,d=i,p=i;for(let t=0;t<Math.max(0,n)+2;t++){const t=await this.getBlameForLine(a??l,p,void 0,{forceSingleLine:!0});if(null==t)break;r=t.commit.sha,c=t.commit.file?.path??t.commit.file?.originalPath??c,p=t.line.originalLine-1;const i=h.YY.fromFile(c,e,r);null==a?(a=i,d=p):(l=a,u=d,a=i,d=p)}if(null==l)return;return{current:l,previous:a,line:(u??i)+1}}catch(e){throw C.Yd.error(e,s),e}}async getIncomingActivity(e,t){}async getRemotes(e,t){if(null==e)return[];const i=function(e){const t=[];if(e?.length)for(const i of e){const e=X(i);if(null==e)continue;let r;try{if(r=i.regex?new RegExp(i.regex,"i"):i.domain?.toLowerCase(),null==r)throw new Error("No matcher found")}catch(e){C.Yd.error(e,`Loading remote provider '${i.name??""}' failed`)}t.push({custom:!0,matcher:r,creator:e})}return t.push(...J),t}(te.D.get("remotes",null)),n=r.Uri.parse(e,!0),[,s,o]=n.path.split("/",3),a=`https://github.com/${s}/${o}.git`,c="github.com",l=`${s}/${o}`;return[new w.ss(e,"origin","https",c,l,Z(this.container,i)(a,c,l),[{type:"fetch",url:a},{type:"push",url:a}])]}async getRevisionContent(e,t,i){const n=i?this.createProviderUri(e,i,t):this.createVirtualUri(e,i,t);return r.workspace.fs.readFile(n)}async getStash(e){}async getStatusForFile(e,t){}async getStatusForFiles(e,t){}async getStatusForRepo(e){if(null==e)return;const t=await this.ensureRepositoryContext(e);if(null==t)return;const i=await t.metadata.getRevision();return null!=i?new y.Hk(e,i.name,i.revision,[],{ahead:0,behind:0},i.type===me.Branch||i.type===me.RemoteBranch?`origin/${i.name}`:void 0):void 0}async getTags(e,t){if(null==e)return Ce;const i=(0,se.UH)();let r=t?.cursor?void 0:this._tagsCache.get(e);if(null==r){async function s(){try{const{metadata:i,github:r,session:n}=await this.ensureRepositoryContext(e),s=[];let o=t?.cursor;const a=null==o;let c,l;for(;;){const t=await r.getTags(n.accessToken,i.repo.owner,i.repo.name,{cursor:o});for(const i of t.values)c=i.target.authoredDate??i.target.target?.authoredDate??i.target.tagger?.date,l=i.target.committedDate??i.target.target?.committedDate??i.target.tagger?.date,s.push(new b.gE(e,i.name,i.target.target?.oid??i.target.oid,i.target.message??i.target.target?.message??"",null!=c?new Date(c):void 0,null!=l?new Date(l):void 0));if(!t.paging?.more||!a)return{...t,values:s};o=t.paging.cursor}}catch(t){return C.Yd.error(t,i),this._tagsCache.delete(e),Ce}}r=s.call(this),null==t?.cursor&&this._tagsCache.set(e,r)}let n=await r;return null!=t?.filter&&(n={...n,values:n.values.filter(t.filter)}),null!=t?.sort&&(0,b.Pj)(n.values,"boolean"==typeof t.sort?void 0:t.sort),n}async getTreeEntryForRevision(e,t,i){if(null==e||!t)return;if("HEAD"===i){const t=await this.ensureRepositoryContext(e);if(null==t)return;const r=await t.metadata.getRevision();i=r?.revision}const n=i?this.createProviderUri(e,i,t):this.createVirtualUri(e,i,t),s=await r.workspace.fs.stat(n);return null!=s?{path:this.getRelativePath(n,e),commitSha:i,size:s.size,type:(s.type&r.FileType.Directory)===r.FileType.Directory?"tree":"blob"}:void 0}async getTreeForRevision(e,t){if(null==e)return[];if("HEAD"===t){const i=await this.ensureRepositoryContext(e);if(null==i)return[];const r=await i.metadata.getRevision();t=r?.revision}const i=t?this.createProviderUri(e,t):this.createVirtualUri(e,t),n=await r.workspace.fs.readDirectory(i);if(null==n)return[];const s=[];for(const[e,o]of n){const n=this.getAbsoluteUri(e,i);s.push({path:this.getRelativePath(e,n),commitSha:t,size:0,type:(o&r.FileType.Directory)===r.FileType.Directory?"tree":"blob"})}return[]}async hasBranchOrTag(e,t){const[{values:i},{values:r}]=await Promise.all([this.getBranches(e,{filter:t?.filter?.branches,sort:!1}),this.getTags(e,{filter:t?.filter?.tags,sort:!1})]);return 0!==i.length||0!==r.length}async hasCommitBeenPushed(e,t){return!0}isTrackable(e){return this.supportedSchemes.has(e.scheme)}async isTracked(e){if(!this.isTrackable(e)||null==this.container.git.getRepository(e))return!1;const t=e.with({scheme:s.sN.GitHub});return null!=await r.workspace.fs.stat(t)}async getDiffTool(e){}async openDiffTool(e,t,i){}async openDirectoryCompare(e,t,i,r){}async resolveReference(e,t,i,r){if(!t||t===p.Ii||null==i&&(0,f.D3)(t)||null!=i&&(0,f.l3)(t))return t;let n;if(null!=i)n=this.getRelativePath(i,e);else if(!(0,f.yo)(t)||t.endsWith("^3"))return t;const s=await this.ensureRepositoryContext(e);if(null==s)return t;const{metadata:o,github:a,session:c}=s,l=await a.resolveReference(c.accessToken,o.repo.owner,o.repo.name,t,n);return null!=l?l:n?p.Ii:t}async richSearchCommits(e,t,i){if(null==e)return;const r=(0,se.UH)(),n=(0,ee.pD)(t),s=n.get("commit:");if(null!=s){const t=await this.getCommit(e,s[0]);if(null==t)return;return{repoPath:e,commits:new Map([[t.sha,t]]),sha:t.sha,range:void 0,count:1,limit:1,hasMore:!1}}const o=await this.getQueryArgsFromSearchQuery(t,n,e);if(0===o.length)return;const a=this.getPagingLimit(i?.limit);try{const{metadata:r,github:n,session:s}=await this.ensureRepositoryContext(e),c=`repo:${r.repo.owner}/${r.repo.name}+${o.join("+").trim()}`,l=await n.searchCommits(s.accessToken,c,{cursor:i?.cursor,limit:a,sort:"date"===i?.ordering?"committer-date":"author-date"===i?.ordering?"author-date":void 0});if(null==l)return;const h=new Map,u=s.account.label;for(const t of l.values){const i=null!=u&&t.author.name===u?"You":t.author.name,r=null!=u&&t.committer.name===u?"You":t.committer.name;let n=h.get(t.oid);null==n&&(n=new d.aM(this.container,e,t.oid,new d._j(i,t.author.email,new Date(t.author.date),t.author.avatarUrl),new d._j(r,t.committer.email,new Date(t.committer.date)),t.message.split("\n",1)[0],t.parents.nodes.map((e=>e.oid)),t.message,t.files?.map((t=>new g.K8(e,t.filename??"",(0,ge.fromCommitFileStatus)(t.status)??g.NV.Modified,t.previous_filename,void 0,{additions:t.additions??0,deletions:t.deletions??0,changes:t.changes??0}))),{changedFiles:t.changedFiles??0,additions:t.additions??0,deletions:t.deletions??0},[]),h.set(t.oid,n))}const p={repoPath:e,commits:h,sha:void 0,range:void 0,count:h.size,limit:a,hasMore:l.pageInfo?.hasNextPage??!1,endingCursor:l.pageInfo?.endCursor??void 0,query:t=>this.getLog(e,{...i,limit:t})};if(p.hasMore){let e=function(r){return async n=>{n=this.getPagingLimit(n);const s=await this.richSearchCommits(r.repoPath,t,{...i,limit:n,cursor:r.endingCursor});if(null==s)return{...r,hasMore:!1,more:void 0};const o=new Map([...r.commits,...s.commits]),a={repoPath:r.repoPath,commits:o,sha:r.sha,range:void 0,count:o.size,limit:(r.limit??0)+n,hasMore:s.hasMore,endingCursor:s.endingCursor,query:r.query};return a.hasMore&&(a.more=e.call(this,a)),a}};p.more=e.call(this,p)}return p}catch(e){return void C.Yd.error(e,r)}}async searchCommits(e,t,i){t={matchAll:!1,matchCase:!1,matchRegex:!0,...t};const r=(0,ee.FL)(t);try{const n=new Map,s=(0,ee.pD)(t),o=s.get("commit:");if(null!=o){const m=await Promise.allSettled(o.map((t=>this.getCommit(e,t.replace(ye,"")))));let g=0;for(const f of m){const w=(0,ae.Sb)(f);null!=w&&n.set(w.sha,{i:g++,date:Number("author-date"===i?.ordering?w.author.date:w.committer.date)})}return{repoPath:e,query:t,comparisonKey:r,results:n}}const a=await this.getQueryArgsFromSearchQuery(t,s,e);if(0===a.length)return{repoPath:e,query:t,comparisonKey:r,results:n};const{metadata:c,github:h,session:u}=await this.ensureRepositoryContext(e),d=`repo:${c.repo.owner}/${c.repo.name}+${a.join("+").trim()}`;async function p(s,o){if(i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:r,results:n};s=this.getPagingLimit(s??te.D.get("advanced.maxSearchItems"));const a=await h.searchCommitShas(u.accessToken,d,{cursor:o,limit:s,sort:"date"===i?.ordering?"committer-date":"author-date"===i?.ordering?"author-date":void 0});if(null==a||i?.cancellation?.isCancellationRequested)return{repoPath:e,query:t,comparisonKey:r,results:n};for(const e of a.values)n.set(e.sha,{i:n.size,date:Number("author-date"===i?.ordering?e.authorDate:e.committerDate)});return o=a.pageInfo?.endCursor??void 0,{repoPath:e,query:t,comparisonKey:r,results:n,paging:a.pageInfo?.hasNextPage?{limit:s,hasMore:!0}:void 0,more:async e=>p.call(this,e,o)}}return p.call(this,i?.limit)}catch(v){if(v instanceof l.l0)throw v;throw new l.l0(v)}}async validateBranchOrTagName(e,t){return Pe.test(e)}async validateReference(e,t){return!0}async stageFile(e,t){}async stageDirectory(e,t){}async unstageFile(e,t){}async unstageDirectory(e,t){}async ensureRepositoryContext(e,t){let i=r.Uri.parse(e,!0);if(!/^github\+?/.test(i.authority))throw new a.kX(e,a.sh.NotAGitHubRepository);if(!t){const t=this.container.git.getRepository(i);if(null==t)throw new a.kX(e,a.sh.NotAGitHubRepository);i=t.uri}let n=this._remotehub;if(null==n)try{n=await this.ensureRemoteHubApi()}catch(t){throw a.R5,new a.kX(e,a.sh.RemoteHubApiNotFound,t)}const s=await(n?.getMetadata(i));if("github"!==s?.provider.id)throw new a.kX(e,a.sh.NotAGitHubRepository);let o,c;try{[o,c]=await Promise.all([this.ensureGitHub(),this.ensureSession()])}catch(t){if(t instanceof a._7)throw new a.kX(e,t.reason===a.Jx.UserDidNotConsent?a.sh.GitHubAuthenticationDenied:a.sh.GitHubAuthenticationNotFound,t);throw new a.kX(e)}if(null==o)throw new a.kX(e);return{github:o,metadata:s,remotehub:n,session:c}}_github;async ensureGitHub(){if(null==this._github){const e=await this.container.github;null!=e&&this._disposables.push(e.onDidReauthenticate((()=>{this.ensureSession(!0)}))),this._github=e}return this._github}_remotehub;_remotehubPromise;async ensureRemoteHubApi(e){if(null==this._remotehubPromise&&(this._remotehubPromise=pe(),this._remotehubPromise.then((e=>this._remotehub=e),(()=>this._remotehub=void 0))),!e)return this._remotehubPromise;try{return await this._remotehubPromise}catch{return}}_sessionPromise;async ensureSession(e=!1,t=!1){if(e||null==this._sessionPromise){async function i(){let n=this.container.storage.get(`provider:authentication:skip:${this.descriptor.id}`,!1);try{if(e)return n=!1,this.container.storage.delete(`provider:authentication:skip:${this.descriptor.id}`),await r.authentication.getSession("github",Se,{forceNewSession:!0});if(!n&&!t)return await r.authentication.getSession("github",Se,{createIfNone:!0});const i=await r.authentication.getSession("github",Se,{createIfNone:!1,silent:t});if(null!=i)return i;throw new Error("User did not consent")}catch(s){if(s instanceof Error&&s.message.includes("User did not consent")){if(!t&&(await this.container.storage.store(`provider:authentication:skip:${this.descriptor.id}`,!0),!n))return e||queueMicrotask((async()=>{const e="Re-enable";await r.window.showInformationMessage("GitLens has been disabled. Authentication is required for GitLens to work with remote GitHub repositories.",e)===e&&this.ensureSession(!0)})),e=!1,i.call(this);throw new a._7("github",a.Jx.UserDidNotConsent)}throw C.Yd.error(s),new a._7("github",void 0,s)}}this._sessionPromise=i.call(this)}return this._sessionPromise}createVirtualUri(e,t,i){let n;if("string"==typeof t)t&&(n=(0,f.D3)(t)?{v:1,ref:{id:t,type:2}}:{v:1,ref:{id:t,type:4}});else switch(t?.refType){case"revision":case"stash":n={v:1,ref:{id:t.ref,type:2}};break;case"branch":case"tag":n={v:1,ref:{id:t.name,type:4}}}if("string"==typeof e&&(e=r.Uri.parse(e,!0)),i){let t=e.path;t.endsWith("/")&&(t=t.slice(0,-1)),i=`${t}/${(i=this.getRelativePath(i,e)).startsWith("/")?i.slice(0,-1):i}`}return e.with({scheme:s.sN.Virtual,authority:ke("github",n),path:i??e.path})}createProviderUri(e,t,i){const r=this.createVirtualUri(e,t,i);return null==this._remotehub?r.scheme!==s.sN.Virtual?r:r.with({scheme:s.sN.GitHub}):this._remotehub.getProviderUri(r)}getPagingLimit(e){return 0===(e=Math.min(100,e??te.D.get("advanced.maxListItems")??100))&&(e=100),e}async resolveReferenceCore(e,t,i){if(null==i||"HEAD"===i){return(await t.getRevision()).revision}if((0,f.D3)(i))return i;if((0,f.yk)(i))return;const[r,n]=await Promise.allSettled([this.getBranches(e,{filter:e=>e.name===i}),this.getTags(e,{filter:e=>e.name===i})]);return i=(0,ae.Sb)(r)?.values[0]?.sha??(0,ae.Sb)(n)?.values[0]?.sha}async getQueryArgsFromSearchQuery(e,t,i){const r=[];for(const[n,s]of t.entries())switch(n){case"message:":r.push(...s.map((e=>e.replace(/ /g,"+"))));break;case"author:":{let t;s.includes("@me")&&(t=await this.getCurrentUser(i));for(let i of s)if(i&&(i=i.replace(ye,e.matchRegex?"\\b":""),i)){if("@me"===i){if(null==t?.username)continue;i=`@${t.username}`}i=i.replace(/ /g,"+"),i.startsWith("@")?r.push(`author:${i.slice(1)}`):i.includes("@")?r.push(`author-email:${i}`):r.push(`author-name:${i}`)}break}}return r}}function ke(e,t){return`${e}${null!=t?`+${(0,n.e)(JSON.stringify(t))}`:""}`}ve([(0,L.cM)()],GitHubGitProvider.prototype,"getBestRevisionUri",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getWorkingUri",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"addRemote",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"pruneRemote",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"removeRemote",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"applyChangesToWorkingFile",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"branchContainsCommit",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"checkout",1),ve([(0,L.cM)({singleLine:!0})],GitHubGitProvider.prototype,"resetCache",1),ve([(0,L.cM)({singleLine:!0})],GitHubGitProvider.prototype,"resetCaches",1),ve([(0,L.cM)({args:{1:e=>e.length}})],GitHubGitProvider.prototype,"excludeIgnoredUris",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"fetch",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"pull",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"push",1),ve([(0,re.H)(),(0,L.fF)()],GitHubGitProvider.prototype,"findRepositoryUri",1),ve([(0,L.cM)({args:{1:e=>e.join(",")}})],GitHubGitProvider.prototype,"getAheadBehindCommitCount",1),ve([(0,re.H)(((e,t)=>`${e.toString()}|${t?.isDirty}`)),(0,L.cM)({args:{1:e=>e?.isDirty}})],GitHubGitProvider.prototype,"getBlame",1),ve([(0,L.cM)({args:{1:"<contents>"}})],GitHubGitProvider.prototype,"getBlameContents",1),ve([(0,re.H)(((e,t,i,r)=>`${e.toString()}|${t}|${i?.isDirty}|${r?.forceSingleLine}`)),(0,L.cM)({args:{2:e=>e?.isDirty}})],GitHubGitProvider.prototype,"getBlameForLine",1),ve([(0,L.cM)({args:{2:"<contents>"}})],GitHubGitProvider.prototype,"getBlameForLineContents",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getBlameForRange",1),ve([(0,L.cM)({args:{2:"<contents>"}})],GitHubGitProvider.prototype,"getBlameForRangeContents",1),ve([(0,L.cM)({args:{0:"<blame>"}})],GitHubGitProvider.prototype,"getBlameRange",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getBranch",1),ve([(0,L.cM)({args:{1:!1}})],GitHubGitProvider.prototype,"getBranches",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getChangedFilesCount",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getCommit",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getCommitBranches",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getCommitCount",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getCommitForFile",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getCommitsForGraph",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getCommitTags",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getContributors",1),ve([(0,re.H)(),(0,L.cM)()],GitHubGitProvider.prototype,"getCurrentUser",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getDefaultBranchName",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getDiffForFile",1),ve([(0,L.cM)({args:{1:e=>"<contents>"}})],GitHubGitProvider.prototype,"getDiffForFileContents",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getDiffForLine",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getDiffStatus",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getFileStatusForCommit",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getLog",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getLogRefsOnly",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getLogForFile",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getMergeBase",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getMergeStatus",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getRebaseStatus",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getNextComparisonUris",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getOldestUnpushedRefForFile",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getPreviousComparisonUris",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getPreviousComparisonUrisForLine",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getIncomingActivity",1),ve([(0,L.cM)({args:{1:!1}})],GitHubGitProvider.prototype,"getRemotes",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getRevisionContent",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getStash",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getStatusForFile",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getStatusForFiles",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getStatusForRepo",1),ve([(0,L.cM)({args:{1:!1}})],GitHubGitProvider.prototype,"getTags",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getTreeEntryForRevision",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getTreeForRevision",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"hasBranchOrTag",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"hasCommitBeenPushed",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"getDiffTool",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"openDiffTool",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"openDirectoryCompare",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"resolveReference",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"richSearchCommits",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"searchCommits",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"validateBranchOrTagName",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"validateReference",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"stageFile",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"stageDirectory",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"unstageFile",1),ve([(0,L.cM)()],GitHubGitProvider.prototype,"unstageDirectory",1),ve([(0,re.H)()],GitHubGitProvider.prototype,"ensureRepositoryContext",1),ve([(0,re.H)()],GitHubGitProvider.prototype,"ensureGitHub",1);class RepositoryWebPathMappingProvider{constructor(e){this._container=e}dispose(){}async getLocalRepoPaths(e){return[]}async writeLocalRepoPath(e,t){}}class WorkspacesWebPathMappingProvider{async getCloudWorkspaceRepoPath(e,t){}async getCloudWorkspaceCodeWorkspacePath(e){}async removeCloudWorkspaceCodeWorkspaceFilePath(e){}async writeCloudWorkspaceCodeWorkspaceFilePathToMap(e,t){}async confirmCloudWorkspaceCodeWorkspaceFilePath(e){return!1}async writeCloudWorkspaceRepoDiskPathToMap(e,t,i){}async getLocalWorkspaceData(){return{workspaces:{}}}async writeCodeWorkspaceFile(e,t,i){return!1}async updateCodeWorkspaceFileSettings(e,t){return!1}}var Re=i(9827);class AnthropicProvider{constructor(e){this.container=e}id="anthropic";name="Anthropic";get model(){return te.D.get("ai.experimental.anthropic.model")||"claude-v1"}dispose(){}async generateCommitMessage(e,t){const i=await De(this.container.storage);if(null==i)return;const n=this.model,s=_e(n),o=e.substring(0,s);e.length>s&&r.window.showWarningMessage(`The diff of the staged changes had to be truncated to ${s} characters to fit within the Anthropic's limits.`);let a=te.D.get("experimental.generateCommitMessagePrompt");a.endsWith(".")||(a+=".");let c="\n\nHuman: You are an AI programming assistant tasked with writing a meaningful commit message by summarizing code changes.\n- Follow the user's instructions carefully & to the letter!\n- Don't repeat yourself or make anything up!\n- Minimize any other prose.";c+=`\n${a}\n- Avoid phrases like "this commit", "this change", etc.`,c+="\n\nAssistant: OK",t?.context&&(c+=`\n\nHuman: Use "${t.context}" to help craft the commit message.\n\nAssistant: OK`),c+=`\n\nHuman: Write a meaningful commit message for the following code changes:\n\n${o}`,c+="\n\nAssistant:";const l={model:n,prompt:c,stream:!1,max_tokens_to_sample:5e3,stop_sequences:["\n\nHuman:"]},h=await this.fetch(i,l);if(!h.ok){let e;try{e=await h.json()}catch{}throw new Error(`Unable to generate commit message: (${this.name}:${h.status}) ${e?.error.message||h.statusText})`)}return(await h.json()).completion.trim()}async explainChanges(e,t){const i=await De(this.container.storage);if(null==i)return;const n=this.model,s=_e(n),o=t.substring(0,s);t.length>s&&r.window.showWarningMessage(`The diff of the commit changes had to be truncated to ${s} characters to fit within the OpenAI's limits.`);let a="\n\nHuman: You are an AI programming assistant tasked with providing an easy to understand but detailed explanation of a commit by summarizing the code changes while also using the commit message as additional context and framing.\nDon't make anything up!";a+=`\nUse the following user-provided commit message, which should provide some explanation to why these changes where made, when attempting to generate the rich explanation:\n\n${e}`,a+="\n\nAssistant: OK",a+=`\n\nHuman: Explain the following code changes:\n\n${o}`,a+="\n\nAssistant:";const c={model:n,prompt:a,stream:!1,max_tokens_to_sample:5e3,stop_sequences:["\n\nHuman:"]},l=await this.fetch(i,c);if(!l.ok){let e;try{e=await l.json()}catch{}throw new Error(`Unable to explain commit: (${this.name}:${l.status}) ${e?.error.message||l.statusText})`)}return(await l.json()).completion.trim()}fetch(e,t){return(0,Re.he)("https://api.anthropic.com/v1/complete",{headers:{Accept:"application/json",Authorization:`Bearer ${e}`,"Content-Type":"application/json","X-API-Key":e,"anthropic-version":"2023-06-01"},method:"POST",body:JSON.stringify(t)})}}async function De(e){let t=await e.getSecret("gitlens.anthropic.key");if(!t){const i=r.window.createInputBox();i.ignoreFocusOut=!0;const n=[];try{const e={iconPath:new r.ThemeIcon("link-external"),tooltip:"Open the Anthropic API Key Page"};t=await new Promise((t=>{n.push(i.onDidHide((()=>t(void 0))),i.onDidChangeValue((e=>{!e||/(?:sk-)?[a-zA-Z0-9-_]{32,}/.test(e)?i.validationMessage=void 0:i.validationMessage="Please enter a valid Anthropic API key"})),i.onDidAccept((()=>{const e=i.value.trim();e&&/(?:sk-)?[a-zA-Z0-9-_]{32,}/.test(e)?t(e):i.validationMessage="Please enter a valid Anthropic API key"})),i.onDidTriggerButton((t=>{t===e&&r.env.openExternal(r.Uri.parse("https://console.anthropic.com/account/keys"))}))),i.password=!0,i.title="Connect to Anthropic",i.placeholder="Please enter your Anthropic API key to use this feature",i.prompt=(0,G.gn)("input-prompt-links")?'Enter your [Anthropic API Key](https://console.anthropic.com/account/keys "Get your Anthropic API key")':"Enter your Anthropic API Key",i.buttons=[e],i.show()}))}finally{i.dispose(),n.forEach((e=>{e.dispose()}))}if(!t)return;e.storeSecret("gitlens.anthropic.key",t)}return t}function _e(e){return"claude-2"===e||"claude-v1-100k"===e||"claude-instant-v1-100k"===e?135e3:12e3}class OpenAIProvider{constructor(e){this.container=e}id="openai";name="OpenAI";get model(){return te.D.get("ai.experimental.openai.model")||"gpt-3.5-turbo"}dispose(){}get url(){return te.D.get("ai.experimental.openai.url")??"https://api.openai.com/v1/chat/completions"}async generateCommitMessage(e,t){const i=await Te(this.container.storage);if(null==i)return;const n=this.model,s=Fe(n),o=e.substring(0,s);e.length>s&&r.window.showWarningMessage(`The diff of the staged changes had to be truncated to ${s} characters to fit within the OpenAI's limits.`);let a=te.D.get("experimental.generateCommitMessagePrompt");a.endsWith(".")||(a+=".");const c={model:n,messages:[{role:"system",content:"You are an AI programming assistant tasked with writing a meaningful commit message by summarizing code changes.\n\n- Follow the user's instructions carefully & to the letter!\n- Don't repeat yourself or make anything up!\n- Minimize any other prose."},{role:"user",content:`${a}\n- Avoid phrases like "this commit", "this change", etc.`}]};t?.context&&c.messages.push({role:"user",content:`Use "${t.context}" to help craft the commit message.`}),c.messages.push({role:"user",content:`Write a meaningful commit message for the following code changes:\n\n${o}`});const l=await this.fetch(i,c);if(!l.ok){if(429===l.status)throw new Error(`Unable to generate commit message: (${this.name}:${l.status}) Too many requests (rate limit exceeded) or your API key is associated with an expired trial`);throw new Error(`Unable to generate commit message: (${this.name}:${l.status}) ${l.statusText}`)}return(await l.json()).choices[0].message.content.trim()}async explainChanges(e,t){const i=await Te(this.container.storage);if(null==i)return;const n=this.model,s=Fe(n),o=t.substring(0,s);t.length>s&&r.window.showWarningMessage(`The diff of the commit changes had to be truncated to ${s} characters to fit within the OpenAI's limits.`);const a={model:n,messages:[{role:"system",content:"You are an AI programming assistant tasked with providing an easy to understand but detailed explanation of a commit by summarizing the code changes while also using the commit message as additional context and framing.\n\n- Don't make anything up!"},{role:"user",content:`Use the following user-provided commit message, which should provide some explanation to why these changes where made, when attempting to generate the rich explanation:\n\n${e}`},{role:"assistant",content:"OK"},{role:"user",content:`Explain the following code changes:\n\n${o}`}]},c=await this.fetch(i,a);if(!c.ok){if(404===c.status)throw new Error(`Unable to explain commit: Your API key doesn't seem to have access to the selected '${n}' model`);if(429===c.status)throw new Error(`Unable to explain commit: (${this.name}:${c.status}) Too many requests (rate limit exceeded) or your API key is associated with an expired trial`);throw new Error(`Unable to explain commit: (${this.name}:${c.status}) ${c.statusText}`)}return(await c.json()).choices[0].message.content.trim()}fetch(e,t){const i=this.url,r=i.includes(".azure.com");return(0,Re.he)(i,{headers:{Accept:"application/json","Content-Type":"application/json",...r?{"api-key":e}:{Authorization:`Bearer ${e}`}},method:"POST",body:JSON.stringify(t)})}}async function Te(e){let t=await e.getSecret("gitlens.openai.key");if(!t){const i=r.window.createInputBox();i.ignoreFocusOut=!0;const n=[];try{const e={iconPath:new r.ThemeIcon("link-external"),tooltip:"Open the OpenAI API Key Page"};t=await new Promise((t=>{n.push(i.onDidHide((()=>t(void 0))),i.onDidChangeValue((e=>{!e||/(?:sk-)?[a-zA-Z0-9]{32,}/.test(e)?i.validationMessage=void 0:i.validationMessage="Please enter a valid OpenAI API key"})),i.onDidAccept((()=>{const e=i.value.trim();e&&/(?:sk-)?[a-zA-Z0-9]{32,}/.test(e)?t(e):i.validationMessage="Please enter a valid OpenAI API key"})),i.onDidTriggerButton((t=>{t===e&&r.env.openExternal(r.Uri.parse("https://platform.openai.com/account/api-keys"))}))),i.password=!0,i.title="Connect to OpenAI",i.placeholder="Please enter your OpenAI API key to use this feature",i.prompt=(0,G.gn)("input-prompt-links")?'Enter your [OpenAI API Key](https://platform.openai.com/account/api-keys "Get your OpenAI API key")':"Enter your OpenAI API Key",i.buttons=[e],i.show()}))}finally{i.dispose(),n.forEach((e=>{e.dispose()}))}if(!t)return;e.storeSecret("gitlens.openai.key",t)}return t}function Fe(e){switch(e){case"gpt-4-32k":case"gpt-4-32k-0613":return 43e3;case"gpt-3.5-turbo-16k":return 21e3;default:return 12e3}}class AIProviderService{constructor(e){this.container=e}_provider;get provider(){const e=te.D.get("ai.experimental.provider");return e===this._provider?.id||(this._provider?.dispose(),this._provider="anthropic"===e?new AnthropicProvider(this.container):new OpenAIProvider(this.container)),this._provider}dispose(){this._provider?.dispose()}get providerId(){return this.provider?.id}async generateCommitMessage(e,t){const i=(0,v.uC)(e)?e:this.container.git.getRepository(e);if(null==i)throw new Error("Unable to find repository");const n=await this.container.git.getDiff(i.uri,p.pw);if(null==n)throw new Error("No staged changes to generate a commit message from.");const s=this.provider;if(await $e(s,this.container.storage))return null!=t?.progress?r.window.withProgress(t.progress,(async()=>s.generateCommitMessage(n.contents,{context:t?.context}))):s.generateCommitMessage(n.contents,{context:t?.context})}async explainCommit(e,t,i){let n;if("string"==typeof e||e instanceof r.Uri){if("string"!=typeof t||!t)throw new Error("Invalid arguments provided");n=await this.container.git.getCommit(e,t)}else{if("string"==typeof t)throw new Error("Invalid arguments provided");n=(0,d.f_)(e)?e:await this.container.git.getCommit(e.repoPath,e.ref),i=t}if(null==n)throw new Error("Unable to find commit");const s=await this.container.git.getDiff(n.repoPath,n.sha);if(null==s)throw new Error("No changes found to explain.");const o=this.provider;if(await $e(o,this.container.storage))return n.hasFullDetails()||(await n.ensureFullDetails(),(0,d.yp)(n)),null!=i?.progress?r.window.withProgress(i.progress,(async()=>o.explainChanges(n.message,s.contents))):o.explainChanges(n.message,s.contents)}reset(){const{providerId:e}=this;null!=e&&(this.container.storage.deleteSecret(`gitlens.${e}.key`),this.container.storage.delete(`confirm:ai:tos:${e}`),this.container.storage.deleteWorkspace(`confirm:ai:tos:${e}`))}}async function $e(e,t){if(t.get(`confirm:ai:tos:${e.id}`,!1)||t.getWorkspace(`confirm:ai:tos:${e.id}`,!1))return!0;const i={title:"Yes"},n={title:"Always for this Workspace"},s={title:"Always"},o=await r.window.showInformationMessage(`This GitLens experimental feature requires sending a diff of the code changes to ${e.name}. This may contain sensitive information.\n\nDo you want to continue?`,{modal:!0},i,n,s,{title:"No",isCloseAffordance:!0});return o===i||(o===n?(t.storeWorkspace(`confirm:ai:tos:${e.id}`,!0),!0):o===s&&(t.store(`confirm:ai:tos:${e.id}`,!0),!0))}var Oe=i(3139),Ie=i(623),Ee=i(9338),xe=i(1062),Be=i(2226),We=i(248),Ne=Object.defineProperty,Me=Object.getOwnPropertyDescriptor,Le=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Me(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Ne(t,i,s),s};const Ue=r.window.createTextEditorDecorationType({after:{margin:"0 0 0 3em",textDecoration:"none"},rangeBehavior:r.DecorationRangeBehavior.ClosedOpen}),Ge=2**30;class LineAnnotationController{constructor(e){this.container=e,this._disposable=r.Disposable.from((0,le.IH)(e.onReady)(this.onReady,this),te.D.onDidChange(this.onConfigurationChanged,this),e.fileAnnotations.onDidToggleAnnotations(this.onFileAnnotationsToggled,this),e.richRemoteProviders.onAfterDidChangeConnectionState((0,he.Ds)((()=>{this.refresh(r.window.activeTextEditor)}),250)))}_cancellation;_disposable;_editor;_enabled=!1;dispose(){this.clearAnnotations(this._editor),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){te.D.changed(e,"currentLine")&&(te.D.changed(e,"currentLine.enabled")&&(te.D.get("currentLine.enabled")?(this._enabled=!0,this.resume()):(this._enabled=!1,this.setLineTracker(!1))),this.refresh(r.window.activeTextEditor))}_suspended=!1;get suspended(){return!this._enabled||this._suspended}resume(){return this.setLineTracker(!0),!!this._suspended&&(this._suspended=!1,!0)}suspend(){return this.setLineTracker(!1),!this._suspended&&(this._suspended=!0,!0)}onActiveLinesChanged(e){e.pending||void 0===e.selections?this.clear(e.editor):this.refresh(e.editor)}onFileAnnotationsToggled(){this.refresh(r.window.activeTextEditor)}clear(e){this._cancellation?.cancel(),this._editor!==e&&null!=this._editor&&this.clearAnnotations(this._editor),this.clearAnnotations(e)}async toggle(e){this._enabled=!(this._enabled&&!this.suspended),this._enabled?this.resume()&&await this.refresh(e):this.suspend()&&await this.refresh(e)}clearAnnotations(e){void 0!==e&&!0!==e._disposed&&e.setDecorations(Ue,[])}getPullRequestsForLines(e,t){const i=new Map;if(0===t.size)return i;const r=this.container.git.getBestRemoteWithRichProvider(e);for(const[,e]of t){if(e.commit.isUncommitted)continue;let t=i.get(e.commit.ref);null==t&&(t=r.then((t=>e.commit.getAssociatedPullRequest(t))),i.set(e.commit.ref,t))}return i}async refresh(e){if(null==e&&null==this._editor)return;const t=(0,se.UH)(),i=this.container.lineTracker.selections;if(null==e||null==i||!(0,G.PH)(e))return(0,se.lH)(t,` ${s.NE.Dot} Skipped because there is no valid editor or no valid selections`),void this.clear(this._editor);this._editor!==e&&(this.clear(this._editor),this._editor=e);const n=te.D.get("currentLine");if(this.suspended)return(0,se.lH)(t,` ${s.NE.Dot} Skipped because the controller is suspended`),void this.clear(e);const o=await this.container.tracker.getOrAdd(e.document);if(!o.isBlameable&&this.suspended)return null!=t&&(t.exitDetails=` ${s.NE.Dot} Skipped because the ${this.suspended?"controller is suspended":`document(${o.uri.toString(!0)}) is not blameable`}`),void this.clear(e);if(null==e.document||!this.container.lineTracker.includes(i))return void(null!=t&&(t.exitDetails=` ${s.NE.Dot} Skipped because the ${null==e.document?"editor is gone":`selection(s)=${i.map((e=>`[${e.anchor}-${e.active}]`)).join()} are no longer current`}`));null!=t&&(t.exitDetails=` ${s.NE.Dot} selection(s)=${i.map((e=>`[${e.anchor}-${e.active}]`)).join()}`);const a=new Map,c=new Map;for(const e of i){const i=this.container.lineTracker.getState(e.active);null!=i?.commit?(null!=i.commit.message||a.has(i.commit.ref)||a.set(i.commit.ref,i.commit.ensureFullDetails()),c.set(e.active,i)):C.Yd.debug(t,`Line ${e.active} returned no commit`)}const l=o.uri.repoPath;let h;if(e.document.uri.scheme===s.sN.Vsls||e.document.uri.scheme===s.sN.VslsScc){const e=te.D.get("hovers");h={autolinks:e.autolinks.enabled,dateFormat:te.D.get("defaultDateFormat"),format:e.detailsMarkdownFormat,pullRequests:e.pullRequests.enabled}}const u=null!=l&&n.pullRequests.enabled&&Ee.i.has(n.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState");this._cancellation?.cancel(),this._cancellation=new r.CancellationTokenSource;const d=this._cancellation.token,p=Ee.i.has(n.format,"tips")?this.container.git.getBranchesAndTagsTipsFn(l):void 0;async function m(e,t,i,a,l){const u=[];for(const[d,p]of c){const c=p.commit;if(null==c||c.isUncommitted&&""===n.uncommittedChangesFormat)continue;const m=a?.get(c.ref),g=(0,We.sV)(c,c.isUncommitted?n.uncommittedChangesFormat??n.format:n.format,{dateFormat:null===n.dateFormat?te.D.get("defaultDateFormat"):n.dateFormat,getBranchAndTagTips:i,pullRequest:m?.value,pullRequestPendingMessage:`PR ${s.NE.Ellipsis}`},n.scrollable);g.range=t.document.validateRange(new r.Range(d,Ge,d,Ge)),null!=h&&(g.hoverMessage=await(0,xe.nN)(e,c,o.uri,d,{...h,pullRequest:m?.value,timeout:l})),u.push(g)}t.setDecorations(Ue,u)}const g=u?await(0,Be.T0)(this.getPullRequestsForLines(l,c),!0,d,100,(async i=>{if("timedout"!==i.reason||d.isCancellationRequested||e!==this._editor)return;C.Yd.debug(t,`${s.NE.Dot} pull request queries took too long (over 100 ms)`);const[r,n]=await Promise.allSettled([p,i.value]);if(d.isCancellationRequested||e!==this._editor)return;const o=(0,ae.Sb)(n),a=(0,ae.Sb)(r);C.Yd.debug(t,`${s.NE.Dot} pull request queries completed; updating...`),m(this.container,e,a,o)})):void 0,[f]=await Promise.allSettled([p,...a.values()]);d.isCancellationRequested||await m(this.container,e,(0,ae.Sb)(f),g,100)}setLineTracker(e){e?this.container.lineTracker.subscribed(this)||this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this)):this.container.lineTracker.unsubscribe(this)}}Le([(0,L.cM)()],LineAnnotationController.prototype,"resume",1),Le([(0,L.cM)()],LineAnnotationController.prototype,"suspend",1),Le([(0,L.fF)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map((e=>`[${e.anchor}-${e.active}]`)).join(",")}, pending=${Boolean(e.pending)}, reason=${e.reason}`}})],LineAnnotationController.prototype,"onActiveLinesChanged",1),Le([(0,L.fF)({args:!1,singleLine:!0})],LineAnnotationController.prototype,"clear",1),Le([(0,L.cM)({args:!1})],LineAnnotationController.prototype,"toggle",1),Le([(0,L.fF)({args:!1})],LineAnnotationController.prototype,"refresh",1);var He=i(8294),Ve=i(8388);class CacheProvider{_cache=new Map;constructor(e){}dispose(){this._cache.clear()}delete(e,t){this._cache.delete(`${e}:${t}`)}get(e,t,i,r){const n=this._cache.get(`${e}:${t}`);if(null==n||null!=n.expiresAt&&n.expiresAt>0&&n.expiresAt<Date.now()||null!=n.etag&&n.etag!==i){const{value:n,expiresAt:s}=r();return this.set(e,t,n,i,s)?.value}return n.value}getIssueOrPullRequest(e,t,i){const{key:r,etag:n}=Qe(t);return this.get("issuesOrPrsById",`id:${e}:${r}`,n,i)}getPullRequestForBranch(e,t,i){const{key:r,etag:n}=Qe(t);return this.get("prByBranch",`branch:${e}:${r}`,n,this.wrapPullRequestCacheable(i,r,n))}getPullRequestForSha(e,t,i){const{key:r,etag:n}=Qe(t);return this.get("prsBySha",`sha:${e}:${r}`,n,this.wrapPullRequestCacheable(i,r,n))}getRepositoryDefaultBranch(e,t){const{key:i,etag:r}=Qe(e);return this.get("defaultBranch",`repo:${i}`,r,t)}getRepositoryMetadata(e,t){const{key:i,etag:r}=Qe(e);return this.get("repoMetadata",`repo:${i}`,r,t)}set(e,t,i,r,n){let s;return(0,ae.tI)(i)?(i.then((i=>{this.set(e,t,i,r,n)}),(()=>{this.delete(e,t)})),s={value:i,etag:r}):s={value:i,etag:r,expiresAt:n??qe(e,i)},this._cache.set(`${e}:${t}`,s),s}wrapPullRequestCacheable(e,t,i){return()=>{const r=e();return(0,ae.tI)(r.value)&&r.value.then((e=>{null!=e&&this.set("issuesOrPrsById",`id:${e.id}:${t}`,e,i)})),r}}}function qe(e,t){const i=Date.now(),r=i+36e5;switch(e){case"defaultBranch":case"repoMetadata":return 0;case"issuesOrPrsById":{if(null==t)return 0;const e=t;if(!e.closed)return r;return i+60*(i-(e.closedDate??e.date).getTime()>12096e5?12:1)*60*1e3}case"prByBranch":case"prsBySha":{if(null==t)return"prByBranch"===e?r:0;const n=t;if("opened"===n.state)return r;return i+60*(i-(n.closedDate??n.mergedDate??n.date).getTime()>12096e5?12:1)*60*1e3}default:return null==t?0:r}}function Qe(e){return{key:e.remoteKey,etag:e.hasRichIntegration()?`${e.remoteKey}:${e.maybeConnected??!1}`:e.remoteKey}}class GitCodeLensController{constructor(e){this.container=e,this._disposable=r.Disposable.from((0,le.IH)(e.onReady)(this.onReady,this),te.D.onDidChange(this.onConfigurationChanged,this))}_canToggle=!1;_disposable;_provider;_providerDisposable;dispose(){this._providerDisposable?.dispose(),this._disposable?.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(te.D.changed(e,["codeLens","defaultDateFormat","defaultDateSource","defaultDateStyle"])){null!=e&&C.Yd.log("CodeLens config changed; resetting CodeLens provider");const t=te.D.get("codeLens");t.enabled&&(t.recentChange.enabled||t.authors.enabled)?this.ensureProvider():(this._providerDisposable?.dispose(),this._provider=void 0),this._canToggle=t.recentChange.enabled||t.authors.enabled,(0,ie.v)("gitlens:disabledToggleCodeLens",!this._canToggle)}}onBlameStateChanged(e){null!=this._provider&&e.blameable&&(C.Yd.log("Blame state changed; resetting CodeLens provider"),this._provider.reset("saved"))}onDirtyIdleTriggered(e){if(null==this._provider||!e.document.isBlameable)return;const t=te.D.get("advanced.blame.sizeThresholdAfterEdit");t>0&&e.document.lineCount>t||(C.Yd.log("Dirty idle triggered; resetting CodeLens provider"),this._provider.reset("idle"))}toggleCodeLens(){if(this._canToggle){if(C.Yd.log("toggleCodeLens()"),null!=this._provider)return this._providerDisposable?.dispose(),void(this._provider=void 0);this.ensureProvider()}}async ensureProvider(){if(null!=this._provider)return void this._provider.reset();this._providerDisposable?.dispose();const{GitCodeLensProvider:e}=await Promise.resolve().then(i.bind(i,5183));this._provider=new e(this.container),this._providerDisposable=r.Disposable.from(r.languages.registerCodeLensProvider(e.selector,this._provider),this.container.tracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.tracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this))}}var je=i(2540);const Ye=new Set(["commit:selected","file:selected"]),ze=new Map;class EventBus{_emitter=new r.EventEmitter;dispose(){this._emitter.dispose()}fire(e,t,i){(function(e){return Ye.has(e)})(e)&&ze.set(e,t),this._emitter.fire({name:e,data:t,source:i?.source})}fireAsync(e,t,i){queueMicrotask((()=>this.fire(e,t,i)))}getCachedEventArgs(e){return ze.get(e)}on(e,t,i,r){return this._emitter.event((function(r){e===r.name&&t.call(i,r)}),i,r)}}var Ke=i(429);const Je={done:!0,value:void 0};class StringIterator{_value="";_pos=0;reset(e){return this._value=e,this._pos=0,this}next(){return this._pos+=1,this}hasNext(){return this._pos<this._value.length-1}cmp(e){return e.charCodeAt(0)-this._value.charCodeAt(this._pos)}value(){return this._value[this._pos]}}class PathIterator{constructor(e=!0,t=!0){this._splitOnBackslash=e,this._caseSensitive=t}_value;_from;_to;reset(e){return this._value=e.replace(/\\$|\/$/,""),this._from=0,this._to=0,this.next()}hasNext(){return this._to<this._value.length}next(){this._from=this._to;let e=!0;for(;this._to<this._value.length;this._to++){const t=this._value.charCodeAt(this._to);if(t===s.mN.Slash||this._splitOnBackslash&&t===s.mN.Backslash){if(!e)break;this._from++}else e=!1}return this}cmp(e){return this._caseSensitive?(0,E.TT)(e,this._value,0,e.length,this._from,this._to):(0,E.j_)(e,this._value,0,e.length,this._from,this._to)}value(){return this._value.substring(this._from,this._to)}}class TernarySearchTreeNode{segment;value;key;left;mid;right;isEmpty(){return!(this.left||this.mid||this.right||this.value)}}class TernarySearchTree{static forPaths(){return new TernarySearchTree(new PathIterator)}static forStrings(){return new TernarySearchTree(new StringIterator)}_iter;_root;constructor(e){this._iter=e}clear(){this._root=void 0}set(e,t){const i=this._iter.reset(e);let r;for(this._root||(this._root=new TernarySearchTreeNode,this._root.segment=i.value()),r=this._root;;){const e=i.cmp(r.segment);if(e>0)r.left||(r.left=new TernarySearchTreeNode,r.left.segment=i.value()),r=r.left;else if(e<0)r.right||(r.right=new TernarySearchTreeNode,r.right.segment=i.value()),r=r.right;else{if(!i.hasNext())break;i.next(),r.mid||(r.mid=new TernarySearchTreeNode,r.mid.segment=i.value()),r=r.mid}}const n=r.value;return r.value=t,r.key=e,n}get(e){return this._getNode(e)?.value}_getNode(e){const t=this._iter.reset(e);let i=this._root;for(;i;){const e=t.cmp(i.segment);if(e>0)i=i.left;else if(e<0)i=i.right;else{if(!t.hasNext())break;t.next(),i=i.mid}}return i}has(e){const t=this._getNode(e);return!(void 0===t?.value&&void 0===t?.mid)}delete(e){this._delete(e,!1)}deleteSuperstr(e){this._delete(e,!0)}_delete(e,t){const i=this._iter.reset(e),r=[];let n=this._root;for(;n;){const e=i.cmp(n.segment);if(e>0)r.push([1,n]),n=n.left;else if(e<0)r.push([-1,n]),n=n.right;else{if(!i.hasNext()){for(t?(n.left=void 0,n.mid=void 0,n.right=void 0):n.value=void 0;r.length>0&&n.isEmpty();){const[e,t]=r.pop();switch(e){case 1:t.left=void 0;break;case 0:t.mid=void 0;break;case-1:t.right=void 0}n=t}break}i.next(),r.push([0,n]),n=n.mid}}}findSubstr(e){const t=this._iter.reset(e);let i,r=this._root;for(;r;){const e=t.cmp(r.segment);if(e>0)r=r.left;else if(e<0)r=r.right;else{if(!t.hasNext())break;t.next(),i=r.value||i,r=r.mid}}return r?.value||i}findSuperstr(e,t=!1){const i=this._iter.reset(e);let r=this._root;for(;r;){const e=i.cmp(r.segment);if(e>0)r=r.left;else if(e<0)r=r.right;else{if(!i.hasNext()){if(!r.mid)return;return r=r.mid,{[Symbol.iterator]:()=>this._nodeIterator(r,t)}}i.next(),r=r.mid}}}_nodeIterator(e,t=!1){let i,r,n;return{next:()=>(n||(n=[],r=0,this._forEach(e,(e=>n.push(e)),t)),r>=n.length?Je:(i?i.value=n[r++]:i={done:!1,value:n[r++]},i))}}forEach(e){this._forEach(this._root,e)}_forEach(e,t,i=!1){void 0!==e&&(this._forEach(e.left,t,i),e.value&&t(e.value,e.key),i||this._forEach(e.mid,t,i),this._forEach(e.right,t,i))}any(){return void 0!==this._root&&!this._root.isEmpty()}count(e){return void 0===this._root||this._root.isEmpty()?0:(0,ne.QX)(this.entries(),void 0===e?void 0:([,t])=>e(t))}entries(){return this._iterator(this._root)}values(){return(0,ne.UI)(this.entries(),(([,e])=>e))}highlander(){if(void 0===this._root||this._root.isEmpty())return;const e=this.entries();let t,i,r=0;for(;t=e.next(),!t.done;)if(i=t.value,r++,r>1)return;return i}some(e){return void 0!==this._root&&!this._root.isEmpty()&&(0,ne.G)(this.entries(),(([,t])=>e(t)))}*[Symbol.iterator](){yield*this._iterator(this._root)}*_iterator(e){e&&(yield*this._iterator(e.left),e.value&&(yield[e.key,e.value]),yield*this._iterator(e.mid),yield*this._iterator(e.right))}}var Xe=Object.defineProperty,Ze=Object.getOwnPropertyDescriptor,et=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Ze(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Xe(t,i,s),s};const tt=new Uint8Array(0);function it(e){const t=(0,h.uy)(e)?e:h.YY.fromRevisionUri(e);return{path:t.relativePath,ref:t.sha,repoPath:t.repoPath}}class GitFileSystemProvider{constructor(e){this.container=e,this._disposable=r.Disposable.from(r.workspace.registerFileSystemProvider(s.sN.GitLens,this,{isCaseSensitive:Ke.IJ,isReadonly:!0}))}_disposable;_searchTreeMap=new Map;dispose(){this._disposable.dispose()}_onDidChangeFile=new r.EventEmitter;get onDidChangeFile(){return this._onDidChangeFile.event}copy(e,t,i){throw r.FileSystemError.NoPermissions(e)}createDirectory(e){throw r.FileSystemError.NoPermissions(e)}delete(e,t){throw r.FileSystemError.NoPermissions(e)}async readDirectory(e){const{path:t,ref:i,repoPath:n}=it(e),s=await this.getTree(t,i,n);if(void 0===s)throw r.FileSystemError.FileNotFound(e);return[...(0,ne.UI)(s,(e=>[null!=t&&0!==t.length?(0,oe.AH)((0,oe.Gf)(t,e.path)):e.path,rt(e.type)]))]}async readFile(e){const{path:t,ref:i,repoPath:r}=it(e);if(i===p.Ii)return tt;const n=await this.container.git.getRevisionContent(r,t,i);return null!=n?n:tt}rename(e,t,i){throw r.FileSystemError.NoPermissions(e)}async stat(e){const{path:t,ref:i,repoPath:n}=it(e);if(i===p.Ii)return{type:r.FileType.File,size:0,ctime:0,mtime:0};let s;const o=this._searchTreeMap.get(i);if(void 0!==o)s=(await o).get(`/~/${t}`);else{if(null==t||0===t.length){if(void 0===await this.getTree(t,i,n))throw r.FileSystemError.FileNotFound(e);return{type:r.FileType.Directory,size:0,ctime:0,mtime:0}}s=await this.container.git.getTreeEntryForRevision(n,t,i)}if(void 0===s)throw r.FileSystemError.FileNotFound(e);return{type:rt(s.type),size:s.size,ctime:0,mtime:0}}watch(){return{dispose:()=>{}}}writeFile(e){throw r.FileSystemError.NoPermissions(e)}async createSearchTree(e,t){const i=TernarySearchTree.forPaths(),r=await this.container.git.getTreeForRevision(t,e);i.set("~",{commitSha:"",path:"~",size:0,type:"tree"});for(const e of r)i.set(`~/${e.path}`,e);return i}getOrCreateSearchTree(e,t){let i=this._searchTreeMap.get(e);return void 0===i&&(i=this.createSearchTree(e,t),this._searchTreeMap.set(e,i)),i}async getTree(e,t,i){return(await this.getOrCreateSearchTree(t,i)).findSuperstr(`/~/${e}`,!0)}}function rt(e){switch(e){case"blob":return r.FileType.File;case"tree":return r.FileType.Directory;default:return r.FileType.Unknown}}et([(0,L.fF)()],GitFileSystemProvider.prototype,"readDirectory",1),et([(0,L.fF)()],GitFileSystemProvider.prototype,"readFile",1),et([(0,L.fF)()],GitFileSystemProvider.prototype,"stat",1);var nt=i(2133),st=i(4968),ot=i(2800),at=i(9529),ct=i(1526),lt=Object.defineProperty,ht=Object.getOwnPropertyDescriptor,ut=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?ht(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&lt(t,i,s),s};const dt=Object.freeze([]),pt=Object.freeze({dispose:()=>{}}),mt=new Map([["master",100],["main",15],["default",10],["develop",5],["development",1]]);class GitProviderService{constructor(e){this.container=e,this._disposable=r.Disposable.from(e.subscription.onDidChange(this.onSubscriptionChanged,this),r.window.onDidChangeWindowState(this.onWindowStateChanged,this),r.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this),te.D.onDidChange(this.onConfigurationChanged,this),e.richRemoteProviders.onAfterDidChangeConnectionState((e=>{"connected"===e.reason&&(0,Ve.E3)("failed"),this.resetCaches("providers"),this.updateContext()})),r.workspace.isTrusted?pt:r.workspace.onDidGrantWorkspaceTrust((()=>{r.workspace.isTrusted&&r.workspace.workspaceFolders?.length&&this.discoverRepositories(r.workspace.workspaceFolders,{force:!0})})),...this.registerCommands()),this.container.BranchDateFormatting.reset(),this.container.CommitDateFormatting.reset(),this.container.CommitShaFormatting.reset(),this.container.PullRequestDateFormatting.reset(),this.updateContext()}_onDidChangeProviders=new r.EventEmitter;get onDidChangeProviders(){return this._onDidChangeProviders.event}fireProvidersChanged(e,t){this.container.telemetry.enabled&&(this.container.telemetry.setGlobalAttributes({"providers.count":this._providers.size,"providers.ids":(0,ne.v_)(this._providers.keys(),",")}),this.container.telemetry.sendEvent("providers/changed",{"providers.added":e?.length??0,"providers.removed":t?.length??0})),this._etag=Date.now(),this._onDidChangeProviders.fire({added:e??[],removed:t??[],etag:this._etag})}_onDidChangeRepositories=new r.EventEmitter;get onDidChangeRepositories(){return this._onDidChangeRepositories.event}fireRepositoriesChanged(e,t){if(this.container.telemetry.enabled){const i=this.openRepositories.map((e=>e.uri.scheme));this.container.telemetry.setGlobalAttributes({"repositories.count":i.length,"repositories.schemes":(0,ot.h8)(i,",")}),this.container.telemetry.sendEvent("repositories/changed",{"repositories.added":e?.length??0,"repositories.removed":t?.length??0})}this._etag=Date.now(),this._accessCache.clear(),this._reposVisibilityCache=void 0,this._onDidChangeRepositories.fire({added:e??[],removed:t??[],etag:this._etag}),e?.length&&this.container.telemetry.enabled&&setTimeout((async()=>{for(const t of e){const e=new Set,i=await t.getRemotes();for(const t of i)e.add(t.provider?.id??"unknown");this.container.telemetry.sendEvent("repository/opened",{"repository.id":t.idHash,"repository.scheme":t.uri.scheme,"repository.closed":t.closed,"repository.folder.scheme":t.folder?.uri.scheme,"repository.provider.id":t.provider.id,"repository.remoteProviders":(0,ne.v_)(e,",")})}}),0)}_onDidChangeRepository=new r.EventEmitter;get onDidChangeRepository(){return this._onDidChangeRepository.event}supportedSchemes=new Set;_bestRemotesCache=new Map;_disposable;_pendingRepositories=new Map;_providers=new Map;_repositories=new nt.x8;_visitedPaths=new ct.u$;dispose(){this._disposable.dispose(),this._providers.clear(),this._repositories.forEach((e=>e.dispose())),this._repositories.clear()}_etag=0;get etag(){return this._etag}onConfigurationChanged(e){(te.D.changed(e,"defaultDateFormat")||te.D.changed(e,"defaultDateSource")||te.D.changed(e,"defaultDateStyle"))&&(this.container.BranchDateFormatting.reset(),this.container.CommitDateFormatting.reset(),this.container.PullRequestDateFormatting.reset()),te.D.changed(e,"advanced.abbreviatedShaLength")&&this.container.CommitShaFormatting.reset(),te.D.changed(e,"views.contributors.showAllBranches")&&this.resetCaches("contributors"),null!=e&&te.D.changed(e,"integrations.enabled")&&this.updateContext()}registerCommands(){return[(0,at.xR)("gitlens.plus.resetRepositoryAccess",(()=>this.clearAllRepoVisibilityCaches())),(0,at.xR)("gitlens.plus.refreshRepositoryAccess",(()=>this.clearAllOpenRepoVisibilityCaches()))]}onSubscriptionChanged(e){this._accessCache.clear(),this._subscription=e.current}onWindowStateChanged(e){e.focused?this._repositories.forEach((e=>e.resume())):this._repositories.forEach((e=>e.suspend()))}onWorkspaceFoldersChanged(e){if(this.container.telemetry.enabled){const e=r.workspace.workspaceFolders?.map((e=>e.uri.scheme));this.container.telemetry.setGlobalAttributes({"folders.count":e?.length??0,"folders.schemes":null!=e?(0,ot.h8)(e,", "):""})}if(e.added.length&&this.discoverRepositories(e.added),e.removed.length){const t=[];for(const i of e.removed){const e=this._repositories.getClosest(i.uri);null!=e&&(this._repositories.remove(e.uri,!1),t.push(e))}t.length&&(this.updateContext(),queueMicrotask((()=>{this.fireRepositoriesChanged([],t),t.forEach((e=>e.dispose()))})))}}get hasProviders(){return 0!==this._providers.size}get registeredProviders(){return[...(0,ne.UI)(this._providers.values(),(e=>({...e.descriptor})))]}get openRepositories(){if(0===this.repositoryCount)return dt;const e=[...(0,ne.hX)(this.repositories,(e=>!e.closed))];return 0===e.length?e:v._j.sort(e)}get openRepositoryCount(){return 0===this.repositoryCount?0:(0,ne.QX)(this.repositories,(e=>!e.closed))}get repositories(){return this._repositories.values()}get repositoryCount(){return this._repositories.count}get highlander(){return 1===this.repositoryCount?(0,ne.Ps)(this._repositories.values()):void 0}register(e,t){if(e!==t.descriptor.id)throw new Error(`Id '${e}' must match provider id '${t.descriptor.id}'`);if(this._providers.has(e))throw new Error(`Provider '${e}' has already been registered`);this._providers.set(e,t);for(const e of t.supportedSchemes)this.supportedSchemes.add(e);const i=[],n=t.openRepositoryInitWatcher?.();null!=n&&i.push(n,n.onDidCreate((e=>{const t=r.workspace.getWorkspaceFolder(e);null!=t&&this.discoverRepositories([t],{force:!0})})));const s=r.Disposable.from(t,...i,t.onDidChange((()=>{const{workspaceFolders:e}=r.workspace;e?.length&&this.discoverRepositories(e,{force:!0})})),t.onDidChangeRepository((async e=>{if(e.changed(v.I6.Remotes,v.I6.RemoteProviders,v.du.Any)&&this._bestRemotesCache.clear(),e.changed(v.I6.Closed,v.du.Any)?(this.updateContext(),queueMicrotask((()=>this.fireRepositoriesChanged([],[e.repository])))):e.changed(v.I6.Opened,v.du.Any)&&(this.updateContext(),queueMicrotask((()=>this.fireRepositoriesChanged([e.repository],[])))),e.changed(v.I6.Remotes,v.du.Any)){const i=await t.getRemotes(e.repository.path),r=this.getVisibilityInfoFromCache(e.repository.path);null!=r&&this.checkVisibilityCachedRemotes(e.repository.path,r,i)}this._onDidChangeRepository.fire(e)})),t.onDidCloseRepository((e=>{const t=this._repositories.get(e.uri);null!=t&&(t.closed=!0)})),t.onDidOpenRepository((e=>{const t=this._repositories.get(e.uri);null!=t?t.closed=!1:this.getOrOpenRepository(e.uri)})));return this.fireProvidersChanged([t]),this._initializing||this.onWorkspaceFoldersChanged({added:r.workspace.workspaceFolders??[],removed:[]}),{dispose:()=>{s.dispose(),this._providers.delete(e);const i=[];for(const t of[...this._repositories.values()])t?.provider.id===e&&(this._repositories.remove(t.uri,!1),i.push(t));const{deactivating:r}=this.container;r||this.updateContext(),i.length&&queueMicrotask((()=>{r||this.fireRepositoriesChanged([],i),i.forEach((e=>e.dispose()))})),r||this.fireProvidersChanged([],[t])}}}_initializing=!0;async registrationComplete(){const e=(0,se.UH)();this._initializing=!1;let{workspaceFolders:t}=r.workspace;t?.length?(await this.discoverRepositories(t),0===this.repositoryCount&&Ke.$L&&setTimeout((()=>{({workspaceFolders:t}=r.workspace),t?.length&&this.discoverRepositories(t,{force:!0})}),1e3)):this.updateContext();const i=te.D.getAny("git.autoRepositoryDetection");this.container.telemetry.enabled&&setTimeout((()=>this.container.telemetry.sendEvent("providers/registrationComplete",{"config.git.autoRepositoryDetection":i})),0),(0,se.lH)(e,` ${s.NE.Dot} workspaceFolders=${t?.length}, git.autoRepositoryDetection=${i}`)}getOpenProviders(){return[...this.getOpenRepositoriesByProvider().keys()].map((e=>this._providers.get(e)))}getOpenRepositories(e){return(0,ne.hX)(this.repositories,(t=>!t.closed&&(null==e||e===t.provider.id)))}getOpenRepositoriesByProvider(){const e=[...(0,ne.hX)(this.repositories,(e=>!e.closed))];return 0===e.length?new Map:(0,ot.XI)(e,(e=>e.provider.id))}hasOpenRepositories(e){return(0,ne.G)(this.repositories,(t=>!t.closed&&(null==e||e===t.provider.id)))}_discoveredWorkspaceFolders=new Map;_isDiscoveringRepositories;get isDiscoveringRepositories(){return this._isDiscoveringRepositories}async discoverRepositories(e,t){null!=this._isDiscoveringRepositories&&(await this._isDiscoveringRepositories,this._isDiscoveringRepositories=void 0);const i=(0,ae.PQ)();this._isDiscoveringRepositories=i.promise;try{const i=[];for(const r of e){if(!t?.force&&this._discoveredWorkspaceFolders.has(r))continue;const e=this.discoverRepositoriesCore(r);i.push(e),this._discoveredWorkspaceFolders.set(r,e)}if(0===i.length)return;const r=await Promise.allSettled(i),n=(0,ne.VS)((0,ne.hX)(r,(e=>"fulfilled"===e.status)),(e=>e.value)),s=[];for(const e of n)this._repositories.add(e),e.closed||s.push(e);this.updateContext(),s.length&&queueMicrotask((()=>this.fireRepositoriesChanged(s)))}finally{queueMicrotask((()=>i.fulfill(this._etag)))}}async discoverRepositoriesCore(e){const{provider:t}=this.getProvider(e.uri);try{return await t.discoverRepositories(e.uri)}catch(i){return this._discoveredWorkspaceFolders.delete(e),C.Yd.error(i,`${t.descriptor.name} Provider(${t.descriptor.id}) failed discovering repositories in ${e.uri.toString(!0)}`),[]}}async findRepositories(e,t){const{provider:i}=this.getProvider(e);return i.discoverRepositories(e,t)}_subscription;async getSubscription(){return this._subscription??(this._subscription=await this.container.subscription.getSubscription())}_accessCache=new Map;async access(e,t){if(null==t){let i=this._accessCache.get(void 0);return null==i&&(i=this.accessCore(e,t),this._accessCache.set(void 0,i)),i}const{path:i}=this.getProvider(t),r=i;let n=this._accessCache.get(r);return null==n&&(n=this.accessCore(e,t),this._accessCache.set(r,n)),n}async accessCore(e,t){const i=await this.getSubscription();this.container.telemetry.enabled&&queueMicrotask((()=>{this.visibility()}));const r=i.plan.effective.id;if((0,st.aG)(r))return{allowed:!1!==i.account?.verified,subscription:{current:i}};function n(e,t=!1){const{path:r}=this.getProvider(e);let n=t?void 0:this._accessCache.get(r);return null==n&&(n=this.visibility(e).then((e=>"private"===e?{allowed:!1,subscription:{current:i,required:st.Cx.Pro},visibility:e}:{allowed:!0,subscription:{current:i},visibility:e}),(()=>({allowed:!0,subscription:{current:i}}))),this._accessCache.set(r,n)),n}if(null==t){const e=this.openRepositories;if(0===e.length)return{allowed:!1,subscription:{current:i}};if(1===e.length)return n.call(this,e[0].path);switch(await this.visibility()){case"private":return{allowed:!1,subscription:{current:i,required:st.Cx.Pro},visibility:"private"};case"mixed":return{allowed:"mixed",subscription:{current:i,required:st.Cx.Pro}};default:return{allowed:!0,subscription:{current:i},visibility:"public"}}}return n.call(this,t,!0)}async ensureAccess(e,t){const{allowed:i,subscription:r}=await this.access(e,t);if(!1===i)throw new a.$y(r.current,r.required)}supports(e,t){const{provider:i}=this.getProvider(e);return i.supports(t)}_reposVisibilityCache;_repoVisibilityCache;ensureRepoVisibilityCache(){if(null==this._repoVisibilityCache){const e=this.container.storage.get("repoVisibility")?.map((([e,t])=>[e,{visibility:t.visibility,timestamp:t.timestamp,remotesHash:t.remotesHash}]));this._repoVisibilityCache=new Map(e)}}clearRepoVisibilityCache(e){if(null==e)this._repoVisibilityCache=void 0,this.container.storage.delete("repoVisibility");else{e?.forEach((e=>this._repoVisibilityCache?.delete(e)));const t=Array.from(this._repoVisibilityCache?.entries()??[]);0===t.length?this.container.storage.delete("repoVisibility"):this.container.storage.store("repoVisibility",t)}}getVisibilityInfoFromCache(e){this.ensureRepoVisibilityCache();const t=this._repoVisibilityCache?.get(e);if(null==t)return;if(!(Date.now()-t.timestamp>2592e6))return t;this.clearRepoVisibilityCache([e])}checkVisibilityCachedRemotes(e,t,i){if(null==t)return!0;if("public"===t.visibility){if(0==i.length||!i.some((e=>e.remoteKey===t.remotesHash)))return this.clearRepoVisibilityCache([e]),!1}else if("private"===t.visibility){if((0,w.Ym)(i)!==t.remotesHash)return this.clearRepoVisibilityCache([e]),!1}return!0}updateVisibilityCache(e,t){this.ensureRepoVisibilityCache(),this._repoVisibilityCache?.set(e,t),this.container.storage.store("repoVisibility",Array.from(this._repoVisibilityCache.entries()))}clearAllRepoVisibilityCaches(){this.clearRepoVisibilityCache()}clearAllOpenRepoVisibilityCaches(){const e=this.openRepositories.map((e=>this.getProvider(e.path).path));this.clearRepoVisibilityCache(e)}async visibility(e){if(null==e){let e=this._reposVisibilityCache;return null==e&&(e=await this.visibilityCore(),this.container.telemetry.enabled&&(this.container.telemetry.setGlobalAttribute("repositories.visibility",e),this.container.telemetry.sendEvent("repositories/visibility")),this._reposVisibilityCache=e),e}const{path:t}=this.getProvider(e);let i=this.getVisibilityInfoFromCache(t)?.visibility;return null==i&&(i=await this.visibilityCore(e),this.container.telemetry.enabled&&setTimeout((()=>{const t=this.getRepository(e);this.container.telemetry.sendEvent("repository/visibility",{"repository.visibility":i,"repository.id":t?.idHash,"repository.scheme":t?.uri.scheme,"repository.closed":t?.closed,"repository.folder.scheme":t?.folder?.uri.scheme,"repository.provider.id":t?.provider.id})}),0)),i}async visibilityCore(e){async function t(e){const{provider:t,path:i}=this.getProvider(e),r=await t.getRemotes(i,{sort:!0}),n=this.getVisibilityInfoFromCache(i);if(null==n||!this.checkVisibilityCachedRemotes(i,n,r)){const[e,r]=await t.visibility(i);return"local"!==e&&this.updateVisibilityCache(i,{visibility:e,timestamp:Date.now(),remotesHash:r}),e}return n.visibility}if(null==e){const e=this.openRepositories;if(0===e.length)return"private";if(1===e.length)return t.call(this,e[0].path);let i=!1,r=!1,n=!1;for await(const s of(0,ae.rX)(e.map((e=>t.call(this,e.path)))))if("fulfilled"===s.status)if("public"===s.value){if(n||r)return"mixed";i=!0}else if("local"===s.value){if(i||r)return"mixed";n=!0}else if("private"===s.value){if(i||n)return"mixed";r=!0}return i?"public":n?"local":"private"}return t.call(this,e)}_context={enabled:!1,disabled:!1};async setEnabledContext(e){let t=!e;if(!e&&this._initializing&&(t=!this.container.storage.getWorkspace("assumeRepositoriesOnStartup")),this.container.telemetry.setGlobalAttribute("enabled",e),this._context.enabled===e&&this._context.disabled===t)return;const i=[];this._context.enabled!==e&&(this._context.enabled=e,i.push((0,ie.v)("gitlens:enabled",e))),this._context.disabled!==t&&(this._context.disabled=t,i.push((0,ie.v)("gitlens:disabled",t))),await Promise.allSettled(i),this._initializing||this.container.storage.storeWorkspace("assumeRepositoriesOnStartup",e).catch()}_sendProviderContextTelemetryDebounced;updateContext(){if(this.container.deactivating)return;const e=this.openRepositoryCount,t=0!==e;this.setEnabledContext(t),this._initializing||(this.container.telemetry.setGlobalAttributes({enabled:t,"repositories.count":e}),t&&(async function(){const e=te.D.get("integrations.enabled"),i=this.container.telemetry.enabled,r=new Set;let n=!1,s=!1,o=!1;if(t)for(const t of this._repositories.values()){if(i){const e=await t.getRemotes();for(const t of e)r.add(t.provider?.id??"unknown")}if(!o&&e&&(o=await t.hasRichRemote(!0),o&&(s=!0,n=!0)),!s&&e&&(s=await t.hasRichRemote(),s&&(n=!0)),n||(n=await t.hasRemotes()),n&&(s&&o||!e))break}i&&(this.container.telemetry.setGlobalAttributes({"repositories.hasRemotes":n,"repositories.hasRichRemotes":s,"repositories.hasConnectedRemotes":o,"repositories.remoteProviders":(0,ne.v_)(r,",")}),null==this._sendProviderContextTelemetryDebounced&&(this._sendProviderContextTelemetryDebounced=(0,he.Ds)((()=>this.container.telemetry.sendEvent("providers/context")),2500)),this._sendProviderContextTelemetryDebounced()),await Promise.allSettled([(0,ie.v)("gitlens:hasRemotes",n),(0,ie.v)("gitlens:hasRichRemotes",s),(0,ie.v)("gitlens:hasConnectedRemotes",o)])}.call(this),this._providers.forEach((e=>e.updateContext?.()))))}getProvider(e){if(null==e||"string"!=typeof e&&!this.supportedSchemes.has(e.scheme))throw new a.MO(e);let t;"string"==typeof e?t=(0,oe.UG)(e)??s.sN.File:({scheme:t}=e);const i=new Set;for(const r of this._providers.values()){const n=r.canHandlePathOrUri(t,e);null!=n&&i.add({provider:r,path:n})}if(0===i.size)throw new a.MO(e);if(i.size>1)for(const e of i)if(this.hasOpenRepositories(e.provider.descriptor.id))return e;return(0,ne.Ps)(i)}getAbsoluteUri(e,t){if(null==t)return"string"==typeof e?(0,oe.tE)(e)?r.Uri.parse(e,!0):r.Uri.file(e):e;if("string"!=typeof t&&"string"==typeof e){const i=(0,oe.AH)(e);if(!(0,oe.YP)(i))return r.Uri.joinPath(t,i)}const{provider:i}=this.getProvider(t);return i.getAbsoluteUri(e,t)}async getBestRevisionUri(e,t,i){if(null==e||i===p.Ii)return;const{provider:r,path:n}=this.getProvider(e);return r.getBestRevisionUri(n,r.getRelativePath(t,n),i)}getRelativePath(e,t){const{provider:i}=this.getProvider(e instanceof r.Uri?e:t);return i.getRelativePath(e,t)}getRevisionUri(e,t,i){let r,n;"string"==typeof e?(n=e,r="string"==typeof t?t:t?.originalPath??t?.path??""):(n=e.sha,i=e.repoPath,r=(0,oe.M)(e));const{provider:s,path:o}=this.getProvider(i);return s.getRevisionUri(o,s.getRelativePath(r,o),n)}getWorkingUri(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getWorkingUri(r,t)}addRemote(e,t,i,r){const{provider:n,path:s}=this.getProvider(e);return n.addRemote(s,t,i,r)}pruneRemote(e,t){const{provider:i,path:r}=this.getProvider(e);return i.pruneRemote(r,t)}removeRemote(e,t){const{provider:i,path:r}=this.getProvider(e);return i.removeRemote(r,t)}applyChangesToWorkingFile(e,t,i){const{provider:r}=this.getProvider(e);return r.applyChangesToWorkingFile(e,t,i)}checkout(e,t,i){const{provider:r,path:n}=this.getProvider(e);return r.checkout(n,t,i)}async clone(e,t){const{provider:i}=this.getProvider(t);return i.clone?.(e,t)}resetCaches(...e){(0===e.length||e.includes("providers"))&&this._bestRemotesCache.clear(),this.container.events.fire("git:cache:reset",{caches:e})}excludeIgnoredUris(e,t){const{provider:i,path:r}=this.getProvider(e);return i.excludeIgnoredUris(r,t)}fetch(e,t){const{provider:i,path:r}=this.getProvider(e);return i.fetch(r,t)}async fetchAll(e,t){null==e&&(e=this.openRepositories),0!==e.length&&(1!==e.length?await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Fetching ${e.length} repositories`},(()=>Promise.all(e.map((e=>e.fetch({progress:!1,...t})))))):await e[0].fetch(t))}pull(e,t){const{provider:i,path:r}=this.getProvider(e);return i.pull(r,t)}async pullAll(e,t){null==e&&(e=this.openRepositories),0!==e.length&&(1!==e.length?await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Pulling ${e.length} repositories`},(()=>Promise.all(e.map((e=>e.pull({progress:!1,...t})))))):await e[0].pull(t))}push(e,t){const{provider:i,path:r}=this.getProvider(e);return i.push(r,t)}async pushAll(e,t){null==e&&(e=this.openRepositories),0!==e.length&&(1!==e.length?await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Pushing ${e.length} repositories`},(()=>Promise.all(e.map((e=>e.push({progress:!1,...t})))))):await e[0].push(t))}getAheadBehindCommitCount(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getAheadBehindCommitCount(r,t)}async getBlame(e,t){const{provider:i}=this.getProvider(e);return i.getBlame(e,t)}async getBlameContents(e,t){const{provider:i}=this.getProvider(e);return i.getBlameContents(e,t)}async getBlameForLine(e,t,i,r){const{provider:n}=this.getProvider(e);return n.getBlameForLine(e,t,i,r)}async getBlameForLineContents(e,t,i,r){const{provider:n}=this.getProvider(e);return n.getBlameForLineContents(e,t,i,r)}async getBlameForRange(e,t){const{provider:i}=this.getProvider(e);return i.getBlameForRange(e,t)}async getBlameForRangeContents(e,t,i){const{provider:r}=this.getProvider(e);return r.getBlameForRangeContents(e,t,i)}getBlameRange(e,t,i){const{provider:r}=this.getProvider(t);return r.getBlameRange(e,t,i)}async getBranch(e){if(null==e)return;const{provider:t,path:i}=this.getProvider(e);return t.getBranch(i)}async getBranchAheadRange(e){if(e.state.ahead>0)return(0,f.oI)(e.upstream?.name,e.ref);if(null==e.upstream){const{values:t}=await this.getBranches(e.repoPath,{filter:e=>mt.has(e.name)});if(t.length>0){let i;for(const e of t){const t=mt.get(e.name);if((null==i||i.weight<t)&&(i={weight:t,branch:e}),100===i.weight)break}const r=i.branch.upstream?.name??i.branch.ref;if(r!==e.ref)return(0,f.oI)(r,e.ref)}}}async getBranches(e,t){if(null==e)return{values:[]};const{provider:i,path:r}=this.getProvider(e);return i.getBranches(r,t)}async getBranchesAndTagsTipsFn(e,t){const[i,r]=await Promise.allSettled([this.getBranches(e),this.getTags(e)]),n=(0,ae.Sb)(i)?.values??[],o=(0,ae.Sb)(r)?.values??[],a=(0,ot.Qy)(n.concat(o),(e=>e.sha),(e=>{if(t){if(e.name===t)return;if("branch"===e.refType&&e.getNameWithoutRemote()===t)return{name:e.name,compactName:e.getRemoteName(),type:e.refType}}return{name:e.name,compactName:void 0,type:e.refType}}));return(e,t)=>{const i=a.get(e);if(null!=i&&0!==i.length){if(!t?.compact)return i.map((e=>`${t?.icons?("tag"===e.type?"$(tag)":"$(git-branch)")+" ":""}${e.name}`)).join(", ");if(i.length>1){const[e]=i;return`${t?.icons?("tag"===e.type?"$(tag)":"$(git-branch)")+" ":""}${e.compactName??e.name}, ${s.NE.Ellipsis}`}return i.map((e=>`${t?.icons?("tag"===e.type?"$(tag)":"$(git-branch)")+" ":""}${e.compactName??e.name}`)).join(", ")}}}getChangedFilesCount(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getChangedFilesCount(r,t)}async getCommit(e,t){const{provider:i,path:r}=this.getProvider(e);if(t===p.CL||t===p.pw){const i=new Date,n=await this.getCurrentUser(e);return new d.aM(this.container,r,t,new d._j("You",n?.email??void 0,i),new d._j("You",n?.email??void 0,i),"Uncommitted changes",[],"Uncommitted changes",void 0,void 0,[])}return i.getCommit(r,t)}getCommitBranches(e,t,i,r){const{provider:n,path:s}=this.getProvider(e);return n.getCommitBranches(s,t,i,r)}getCommitCount(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getCommitCount(r,t)}async getCommitForFile(e,t,i){if(null==e)return;const{provider:r,path:n}=this.getProvider(e);return r.getCommitForFile(n,t,i)}getCommitsForGraph(e,t,i){const{provider:r,path:n}=this.getProvider(e);return r.getCommitsForGraph(n,t,i)}getCommitTags(e,t,i){const{provider:r,path:n}=this.getProvider(e);return r.getCommitTags(n,t,i)}async getConfig(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getConfig?.(r,t)}async setConfig(e,t,i){const{provider:r,path:n}=this.getProvider(e);return r.setConfig?.(n,t,i)}async getContributors(e,t){if(null==e)return[];const{provider:i,path:r}=this.getProvider(e);return i.getContributors(r,t)}getCurrentUser(e){const{provider:t,path:i}=this.getProvider(e);return t.getCurrentUser(i)}async getDefaultBranchName(e,t){if(null==e)return;const{provider:i,path:r}=this.getProvider(e);return i.getDefaultBranchName(r,t)}async getDiff(e,t,i,r){const{provider:n,path:s}=this.getProvider(e);return n.getDiff?.(s,t,i,r)}getDiffForFile(e,t,i){const{provider:r}=this.getProvider(e);return r.getDiffForFile(e,t,i)}getDiffForFileContents(e,t,i){const{provider:r}=this.getProvider(e);return r.getDiffForFileContents(e,t,i)}getDiffForLine(e,t,i,r){const{provider:n}=this.getProvider(e);return n.getDiffForLine(e,t,i,r)}getDiffStatus(e,t,i,r){const{provider:n,path:s}=this.getProvider(e);return n.getDiffStatus(s,t,i,r)}async getFileStatusForCommit(e,t,i){if(i===p.Ii||(0,f.l3)(i))return;const{provider:r,path:n}=this.getProvider(e);return r.getFileStatusForCommit(n,t,i)}getGitDir(e){const{provider:t,path:i}=this.getProvider(e);return Promise.resolve(t.getGitDir?.(i))}getLastFetchedTimestamp(e){const{provider:t,path:i}=this.getProvider(e);return t.getLastFetchedTimestamp(i)}async getLog(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getLog(r,t)}async getLogRefsOnly(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getLogRefsOnly(r,t)}async getLogForFile(e,t,i){if(null==e)return;const{provider:r,path:n}=this.getProvider(e);return r.getLogForFile(n,t,i)}async getMergeBase(e,t,i,r){const{provider:n,path:s}=this.getProvider(e);return n.getMergeBase(s,t,i,r)}async getMergeStatus(e){const{provider:t,path:i}=this.getProvider(e);return t.getMergeStatus(i)}async getRebaseStatus(e){const{provider:t,path:i}=this.getProvider(e);return t.getRebaseStatus(i)}getNextComparisonUris(e,t,i,r=0){if(!i)return Promise.resolve(void 0);const{provider:n,path:s}=this.getProvider(e);return n.getNextComparisonUris(s,t,i,r)}async getOldestUnpushedRefForFile(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getOldestUnpushedRefForFile(r,t)}getPreviousComparisonUris(e,t,i,r=0){if(i===p.Ii)return Promise.resolve(void 0);const{provider:n,path:s}=this.getProvider(e);return n.getPreviousComparisonUris(s,t,i,r)}getPreviousComparisonUrisForLine(e,t,i,r,n=0){if(r===p.Ii)return Promise.resolve(void 0);const{provider:s,path:o}=this.getProvider(e);return s.getPreviousComparisonUrisForLine(o,t,i,r,n)}async getMyPullRequests(e,t){let i,r;if(w.ss.is(e)){if(({provider:i}=e),!i?.hasRichIntegration())return}else i=e;null!=t&&({timeout:r,...t}=t);let n=i.searchMyPullRequests();if(null==n||!(0,ae.tI)(n))return n;null!=r&&r>0&&(n=(0,ae.HO)(n,r));try{return await n}catch(e){if(e instanceof ae.PK)throw e;return}}async getMyIssues(e,t){let i,r;if(w.ss.is(e)){if(({provider:i}=e),!i?.hasRichIntegration())return}else i=e;null!=t&&({timeout:r,...t}=t);let n=i.searchMyIssues();if(null==n||!(0,ae.tI)(n))return n;null!=r&&r>0&&(n=(0,ae.HO)(n,r));try{return await n}catch(e){if(e instanceof ae.PK)throw e;return}}async getIncomingActivity(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getIncomingActivity(r,t)}async getBestRemoteWithProvider(e,t){return(await this.getBestRemotesWithProviders(e,t))[0]}async getBestRemotesWithProviders(e,t){if(null==e)return[];"string"==typeof e&&(e=this.getAbsoluteUri(e));const i=(0,nt.YW)(e);let r=this._bestRemotesCache.get(i);if(null==r){async function n(){const i=await this.getRemotesWithProviders(e,{sort:!0},t);if(0===i.length)return[];if(1===i.length)return[...i];if(t?.isCancellationRequested)throw new a.FU;const r=i.find((e=>e.default))?.name,n=(await this.getBranch(i[0].repoPath))?.getRemoteName(),s=[];let o=!1;for(const e of i){let i;switch(e.name){case r:i=1e3;break;case n:i=6;break;case"upstream":i=5;break;case"origin":i=4;break;default:i=0}if(i>0&&i<1e3&&!o){const r=e.provider;if(r.hasRichIntegration()&&(r.maybeConnected||void 0===r.maybeConnected&&r.shouldConnect&&await r.isConnected())){if(t?.isCancellationRequested)throw new a.FU;const e=await r.getRepositoryMetadata(t);if(t?.isCancellationRequested)throw new a.FU;null!=e&&(i+=e.isFork?-3:3,o=!e.isFork)}}s.push([i,e])}return s.sort((([e,t],[i,r])=>0===i&&0===e?(0,E.dm)(t.name,r.name):i-e)),s.map((e=>e[1]))}r=n.call(this),this._bestRemotesCache.set(i,r)}return[...await r]}async getBestRemoteWithRichProvider(e,t,i){const r=await this.getBestRemotesWithProviders(e,i),n=t?.includeDisconnected??!1;for(const e of r)if(e.hasRichIntegration()){if(n||!0===e.provider.maybeConnected)return e;if(void 0===e.provider.maybeConnected&&e.default&&await e.provider.isConnected())return e}}async getRemotes(e,t,i){if(null==e)return[];const{provider:r,path:n}=this.getProvider(e);return r.getRemotes(n,t)}async getRemotesWithProviders(e,t,i){return(await this.getRemotes(e,t,i)).filter((e=>null!=e.provider))}async getRemotesWithRichProviders(e,t,i){return(await this.getRemotes(e,t,i)).filter((e=>e.hasRichIntegration()))}getBestRepository(e,t){const i=this.repositoryCount;if(0!==i){if(1===i)return this.highlander;if(null!=e&&e instanceof r.Uri){const t=this.getRepository(e);if(null!=t)return t;e=void 0}return(null!=(t=e??t??r.window.activeTextEditor)?this.getRepository(t.document.uri):void 0)??this.highlander}}getBestRepositoryOrFirst(e,t){const i=this.repositoryCount;if(0!==i){if(1===i)return(0,ne.Ps)(this._repositories.values());if(null!=e&&e instanceof r.Uri){const t=this.getRepository(e);if(null!=t)return t;e=void 0}return(null!=(t=e??t??r.window.activeTextEditor)?this.getRepository(t.document.uri):void 0)??(0,ne.Ps)(this._repositories.values())}}async getOrOpenRepository(e,t){if(null==e)return;const i=(0,se.UH)();let n;if("string"==typeof e){if(!e)return;n=this.getAbsoluteUri(e)}else n=e;const s=(0,oe.M)(n);let o,a;o=this.getRepository(n),null==o&&null!=this._isDiscoveringRepositories&&(await this._isDiscoveringRepositories,o=this.getRepository(n));if(t?.detectNested??te.D.get("detectNestedRepositories",n)){if(!t?.force&&this._visitedPaths.has(s))return o;if(((await r.workspace.fs.stat(n)).type&r.FileType.Directory)!==r.FileType.Directory&&(n=r.Uri.joinPath(n,".."),!t?.force&&this._visitedPaths.has((0,oe.M)(n))))return o;a=!0}else if(null!=o)return o;const c=(0,nt.YW)(n);let l=this._pendingRepositories.get(c);if(null==l){async function h(){const{provider:e}=this.getProvider(n),r=await e.findRepositoryUri(n,a);if(this._visitedPaths.set(s),null==r)return;let l;if(0!==this._repositories.count){if(o=this._repositories.get(r),null!=o)return o;l=this._repositories.getClosest(e.getAbsoluteUri(n,r))}const h=te.D.getAny("git.autoRepositoryDetection")??!0,u=t?.closeOnOpen??(!0!==h&&"openEditors"!==h);C.Yd.log(i,`Repository found in '${r.toString(!0)}'`);const d=e.openRepository(l?.folder,r,!1,void 0,u),p=[];for(const e of d)this._repositories.add(e),e.closed||p.push(e);return this._pendingRepositories.delete(c),this.updateContext(),p.length&&queueMicrotask((()=>this.fireRepositoriesChanged(p))),o=1===d.length?d[0]:this.getRepository(n),o}l=h.call(this),this._pendingRepositories.set(c,l)}return l}async getOrOpenRepositoryForEditor(e){return null==(e=e??r.window.activeTextEditor)?this.highlander:this.getOrOpenRepository(e.document.uri)}getRepository(e){if(0!==this.repositoryCount&&null!=e){if("string"==typeof e){if(!e)return;return this._repositories.getClosest(this.getAbsoluteUri(e))}return this._repositories.getClosest(e)}}async getLocalInfoFromRemoteUri(e,t){for(const i of this.openRepositories)for(const r of await i.getRemotes()){const n=await(r?.provider?.getLocalInfoFromRemoteUri(i,e,t));if(null!=n)return n}}async getStash(e){if(null==e)return;const{provider:t,path:i}=this.getProvider(e);return t.getStash(i)}async getStatusForFile(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getStatusForFile(r,t)}async getStatusForFiles(e,t){const{provider:i,path:r}=this.getProvider(e);return i.getStatusForFiles(r,t)}async getStatusForRepo(e){if(null==e)return;const{provider:t,path:i}=this.getProvider(e);return t.getStatusForRepo(i)}async getTags(e,t){if(null==e)return{values:[]};const{provider:i,path:r}=this.getProvider(e);return i.getTags(r,t)}async getTreeEntryForRevision(e,t,i){if(null==e||!t)return;const{provider:r,path:n}=this.getProvider(e);return r.getTreeEntryForRevision(n,r.getRelativePath(t,n),i)}async getTreeForRevision(e,t){if(null==e)return[];const{provider:i,path:r}=this.getProvider(e);return i.getTreeForRevision(r,t)}getRevisionContent(e,t,i){const{provider:r,path:n}=this.getProvider(e);return r.getRevisionContent(n,t,i)}async getFirstCommitSha(e){const{provider:t,path:i}=this.getProvider(e);try{return await(t.getFirstCommitSha?.(i))}catch{return}}getUniqueRepositoryId(e){return this.getFirstCommitSha(e)}async hasBranchOrTag(e,t){if(null==e)return!1;const{provider:i,path:r}=this.getProvider(e);return i.hasBranchOrTag(r,t)}async hasCommitBeenPushed(e,t){if(null==e)return!1;const{provider:i,path:r}=this.getProvider(e);return i.hasCommitBeenPushed(r,t)}async hasRemotes(e){if(null==e)return!1;const t=this.getRepository(e);return null!=t&&t.hasRemotes()}async hasTrackingBranch(e){if(null==e)return!1;const t=this.getRepository(e);return null!=t&&t.hasUpstreamBranch()}hasUnsafeRepositories(){for(const e of this._providers.values())if(e.hasUnsafeRepositories?.())return!0;return!1}isRepositoryForEditor(e,t){return null!=(t=t??r.window.activeTextEditor)&&e===this.getRepository(t.document.uri)}isTrackable(e){if(!this.supportedSchemes.has(e.scheme))return!1;const{provider:t}=this.getProvider(e);return t.isTrackable(e)}async isTracked(e){if(!this.supportedSchemes.has(e.scheme))return!1;const{provider:t}=this.getProvider(e);return t.isTracked(e)}async getDiffTool(e){if(null==e)return;const{provider:t,path:i}=this.getProvider(e);return t.getDiffTool(i)}async openDiffTool(e,t,i){const{provider:r,path:n}=this.getProvider(e);return r.openDiffTool(n,t,i)}async openDirectoryCompare(e,t,i,r){const{provider:n,path:s}=this.getProvider(e);return n.openDirectoryCompare(s,t,i,r)}async resolveReference(e,t,i,r){if(null!=i&&(0,f.j$)(t)&&(t="HEAD"),!t||t===p.Ii||null==i&&(0,f.D3)(t)||null!=i&&(0,f.l3)(t))return t;const{provider:n,path:s}=this.getProvider(e);return n.resolveReference(s,t,i,r)}async richSearchCommits(e,t,i){const{provider:r,path:n}=this.getProvider(e);return r.richSearchCommits(n,t,i)}searchCommits(e,t,i){const{provider:r,path:n}=this.getProvider(e);return r.searchCommits(n,t,i)}async runGitCommandViaTerminal(e,t,i,r){const{provider:n,path:s}=this.getProvider(e);return n.runGitCommandViaTerminal?.(s,t,i,r)}validateBranchOrTagName(e,t){const{provider:i,path:r}=this.getProvider(e);return i.validateBranchOrTagName(r,t)}async validateReference(e,t){if(null==t||0===t.length)return!1;if(t===p.Ii||(0,f.l3)(t))return!0;const{provider:i,path:r}=this.getProvider(e);return i.validateReference(r,t)}stageFile(e,t){const{provider:i,path:r}=this.getProvider(e);return i.stageFile(r,t)}stageDirectory(e,t){const{provider:i,path:r}=this.getProvider(e);return i.stageDirectory(r,t)}unstageFile(e,t){const{provider:i,path:r}=this.getProvider(e);return i.unstageFile(r,t)}unstageDirectory(e,t){const{provider:i,path:r}=this.getProvider(e);return i.unstageDirectory(r,t)}async stashApply(e,t,i){const{provider:r,path:n}=this.getProvider(e);return r.stashApply?.(n,t,i)}async stashDelete(e,t,i){const{provider:r,path:n}=this.getProvider(e);return r.stashDelete?.(n,t,i)}async stashRename(e,t,i,r,n){const{provider:s,path:o}=this.getProvider(e);return s.stashRename?.(o,t,i,r,n)}async stashSave(e,t,i,r){const{provider:n,path:s}=this.getProvider(e);return n.stashSave?.(s,t,i,r)}createWorktree(e,t,i){const{provider:r,path:n}=this.getProvider(e);return Promise.resolve(r.createWorktree?.(n,t,i))}async getWorktree(e,t){const{provider:i,path:r}=this.getProvider(e);return(await(i.getWorktrees?.(r))??[]).find(t)}async getWorktrees(e){const{provider:t,path:i}=this.getProvider(e);return await(t.getWorktrees?.(i))??[]}async getWorktreesDefaultUri(e){const{provider:t,path:i}=this.getProvider(e);let n=await(t.getWorktreesDefaultUri?.(i));return null!=n||(n=this.getRepository(i)?.uri,null!=n&&(n=r.Uri.joinPath(n,".."))),n}deleteWorktree(e,t,i){const{provider:r,path:n}=this.getProvider(e);return Promise.resolve(r.deleteWorktree?.(n,t,i))}async getOpenScmRepositories(){const e=await Promise.allSettled([...this._providers.values()].map((e=>e.getOpenScmRepositories())));return[...(0,ne.VS)((0,ne.hX)(e,(e=>"fulfilled"===e.status)),(e=>e.value))]}getScmRepository(e){const{provider:t,path:i}=this.getProvider(e);return t.getScmRepository(i)}getOrOpenScmRepository(e){const{provider:t,path:i}=this.getProvider(e);return t.getOrOpenScmRepository(i)}}ut([(0,L.fF)()],GitProviderService.prototype,"onSubscriptionChanged",1),ut([(0,L.fF)({args:{0:e=>`focused=${e.focused}`}})],GitProviderService.prototype,"onWindowStateChanged",1),ut([(0,L.fF)({args:{0:e=>`added=${e.added.length}, removed=${e.removed.length}`},singleLine:!0})],GitProviderService.prototype,"onWorkspaceFoldersChanged",1),ut([(0,L.cM)({args:{1:!1},singleLine:!0})],GitProviderService.prototype,"register",1),ut([(0,L.cM)({singleLine:!0})],GitProviderService.prototype,"registrationComplete",1),ut([(0,L.cM)({args:{0:e=>e.length}})],GitProviderService.prototype,"discoverRepositories",1),ut([(0,L.fF)({exit:!0})],GitProviderService.prototype,"discoverRepositoriesCore",1),ut([(0,L.cM)()],GitProviderService.prototype,"findRepositories",1),ut([(0,L.fF)({exit:!0})],GitProviderService.prototype,"access",1),ut([(0,L.fF)({exit:!0})],GitProviderService.prototype,"accessCore",1),ut([(0,L.fF)({exit:!0})],GitProviderService.prototype,"supports",1),ut([(0,L.fF)({exit:e=>`returned ${e?.visibility}`})],GitProviderService.prototype,"getVisibilityInfoFromCache",1),ut([(0,L.fF)()],GitProviderService.prototype,"clearAllRepoVisibilityCaches",1),ut([(0,L.fF)()],GitProviderService.prototype,"clearAllOpenRepoVisibilityCaches",1),ut([(0,L.fF)({exit:!0})],GitProviderService.prototype,"visibility",1),ut([(0,L.fF)({exit:!0})],GitProviderService.prototype,"visibilityCore",1),ut([(0,L.fF)()],GitProviderService.prototype,"setEnabledContext",1),ut([(0,L.cM)()],GitProviderService.prototype,"getBestRevisionUri",1),ut([(0,L.cM)()],GitProviderService.prototype,"getRevisionUri",1),ut([(0,L.cM)()],GitProviderService.prototype,"getWorkingUri",1),ut([(0,L.cM)()],GitProviderService.prototype,"addRemote",1),ut([(0,L.cM)()],GitProviderService.prototype,"pruneRemote",1),ut([(0,L.cM)()],GitProviderService.prototype,"removeRemote",1),ut([(0,L.cM)()],GitProviderService.prototype,"applyChangesToWorkingFile",1),ut([(0,L.cM)()],GitProviderService.prototype,"checkout",1),ut([(0,L.cM)()],GitProviderService.prototype,"clone",1),ut([(0,L.cM)({singleLine:!0})],GitProviderService.prototype,"resetCaches",1),ut([(0,L.cM)({args:{1:e=>e.length}})],GitProviderService.prototype,"excludeIgnoredUris",1),ut([(0,re.H)(),(0,L.cM)()],GitProviderService.prototype,"fetch",1),ut([(0,re.H)(((e,t)=>`${null==e?"":e.map((e=>e.id)).join(",")}|${JSON.stringify(t)}`)),(0,L.cM)({args:{0:e=>e?.map((e=>e.name)).join(", ")}})],GitProviderService.prototype,"fetchAll",1),ut([(0,re.H)(),(0,L.cM)()],GitProviderService.prototype,"pull",1),ut([(0,re.H)(((e,t)=>`${null==e?"":e.map((e=>e.id)).join(",")}|${JSON.stringify(t)}`)),(0,L.cM)({args:{0:e=>e?.map((e=>e.name)).join(", ")}})],GitProviderService.prototype,"pullAll",1),ut([(0,re.H)(),(0,L.cM)()],GitProviderService.prototype,"push",1),ut([(0,re.H)((e=>`${null==e?"":e.map((e=>e.id)).join(",")}`)),(0,L.cM)({args:{0:e=>e?.map((e=>e.name)).join(", ")}})],GitProviderService.prototype,"pushAll",1),ut([(0,L.cM)({args:{1:e=>e.join(",")}})],GitProviderService.prototype,"getAheadBehindCommitCount",1),ut([(0,L.cM)({args:{1:e=>e?.isDirty}})],GitProviderService.prototype,"getBlame",1),ut([(0,L.cM)({args:{1:"<contents>"}})],GitProviderService.prototype,"getBlameContents",1),ut([(0,L.cM)({args:{2:e=>e?.isDirty}})],GitProviderService.prototype,"getBlameForLine",1),ut([(0,L.cM)({args:{2:"<contents>"}})],GitProviderService.prototype,"getBlameForLineContents",1),ut([(0,L.cM)()],GitProviderService.prototype,"getBlameForRange",1),ut([(0,L.cM)({args:{2:"<contents>"}})],GitProviderService.prototype,"getBlameForRangeContents",1),ut([(0,L.cM)({args:{0:"<blame>"}})],GitProviderService.prototype,"getBlameRange",1),ut([(0,L.cM)()],GitProviderService.prototype,"getBranch",1),ut([(0,L.cM)({args:{0:e=>e.name}})],GitProviderService.prototype,"getBranchAheadRange",1),ut([(0,L.cM)({args:{1:!1}})],GitProviderService.prototype,"getBranches",1),ut([(0,L.cM)()],GitProviderService.prototype,"getBranchesAndTagsTipsFn",1),ut([(0,L.cM)()],GitProviderService.prototype,"getChangedFilesCount",1),ut([(0,L.cM)()],GitProviderService.prototype,"getCommit",1),ut([(0,L.cM)()],GitProviderService.prototype,"getCommitBranches",1),ut([(0,L.cM)()],GitProviderService.prototype,"getCommitCount",1),ut([(0,L.cM)()],GitProviderService.prototype,"getCommitForFile",1),ut([(0,L.cM)()],GitProviderService.prototype,"getCommitsForGraph",1),ut([(0,L.cM)()],GitProviderService.prototype,"getCommitTags",1),ut([(0,L.cM)()],GitProviderService.prototype,"getConfig",1),ut([(0,L.cM)()],GitProviderService.prototype,"setConfig",1),ut([(0,L.cM)()],GitProviderService.prototype,"getContributors",1),ut([(0,re.H)(),(0,L.cM)()],GitProviderService.prototype,"getCurrentUser",1),ut([(0,L.cM)()],GitProviderService.prototype,"getDefaultBranchName",1),ut([(0,L.cM)()],GitProviderService.prototype,"getDiff",1),ut([(0,L.cM)()],GitProviderService.prototype,"getDiffForFile",1),ut([(0,L.cM)({args:{1:"<contents>"}})],GitProviderService.prototype,"getDiffForFileContents",1),ut([(0,L.cM)()],GitProviderService.prototype,"getDiffForLine",1),ut([(0,L.cM)()],GitProviderService.prototype,"getDiffStatus",1),ut([(0,L.cM)()],GitProviderService.prototype,"getFileStatusForCommit",1),ut([(0,L.fF)()],GitProviderService.prototype,"getGitDir",1),ut([(0,L.fF)()],GitProviderService.prototype,"getLastFetchedTimestamp",1),ut([(0,L.cM)()],GitProviderService.prototype,"getLog",1),ut([(0,L.cM)()],GitProviderService.prototype,"getLogRefsOnly",1),ut([(0,L.cM)()],GitProviderService.prototype,"getLogForFile",1),ut([(0,L.cM)()],GitProviderService.prototype,"getMergeBase",1),ut([(0,re.H)(),(0,L.cM)()],GitProviderService.prototype,"getMergeStatus",1),ut([(0,re.H)(),(0,L.cM)()],GitProviderService.prototype,"getRebaseStatus",1),ut([(0,L.cM)()],GitProviderService.prototype,"getNextComparisonUris",1),ut([(0,L.cM)()],GitProviderService.prototype,"getOldestUnpushedRefForFile",1),ut([(0,L.cM)()],GitProviderService.prototype,"getPreviousComparisonUris",1),ut([(0,L.cM)()],GitProviderService.prototype,"getPreviousComparisonUrisForLine",1),ut([(0,L.fF)({args:{0:e=>e.name}})],GitProviderService.prototype,"getMyPullRequests",1),ut([(0,L.fF)({args:{0:e=>e.name}})],GitProviderService.prototype,"getMyIssues",1),ut([(0,L.cM)()],GitProviderService.prototype,"getIncomingActivity",1),ut([(0,L.cM)()],GitProviderService.prototype,"getBestRemoteWithProvider",1),ut([(0,L.cM)()],GitProviderService.prototype,"getBestRemotesWithProviders",1),ut([(0,L.cM)()],GitProviderService.prototype,"getBestRemoteWithRichProvider",1),ut([(0,L.cM)()],GitProviderService.prototype,"getRemotes",1),ut([(0,L.cM)()],GitProviderService.prototype,"getRemotesWithProviders",1),ut([(0,L.cM)()],GitProviderService.prototype,"getRemotesWithRichProviders",1),ut([(0,L.cM)({exit:!0})],GitProviderService.prototype,"getBestRepository",1),ut([(0,L.cM)({exit:!0})],GitProviderService.prototype,"getBestRepositoryOrFirst",1),ut([(0,L.cM)({exit:!0})],GitProviderService.prototype,"getOrOpenRepository",1),ut([(0,L.cM)({args:{0:e=>null!=e?`TextEditor(${C.Yd.toLoggable(e.document.uri)})`:void 0}})],GitProviderService.prototype,"getOrOpenRepositoryForEditor",1),ut([(0,L.cM)({exit:!0})],GitProviderService.prototype,"getRepository",1),ut([(0,re.H)(),(0,L.cM)()],GitProviderService.prototype,"getStash",1),ut([(0,L.cM)()],GitProviderService.prototype,"getStatusForFile",1),ut([(0,L.cM)()],GitProviderService.prototype,"getStatusForFiles",1),ut([(0,L.cM)()],GitProviderService.prototype,"getStatusForRepo",1),ut([(0,L.cM)({args:{1:!1}})],GitProviderService.prototype,"getTags",1),ut([(0,L.cM)()],GitProviderService.prototype,"getTreeEntryForRevision",1),ut([(0,L.cM)()],GitProviderService.prototype,"getTreeForRevision",1),ut([(0,re.H)(),(0,L.cM)()],GitProviderService.prototype,"getRevisionContent",1),ut([(0,L.cM)()],GitProviderService.prototype,"getFirstCommitSha",1),ut([(0,L.cM)()],GitProviderService.prototype,"getUniqueRepositoryId",1),ut([(0,L.cM)({args:{1:!1}})],GitProviderService.prototype,"hasBranchOrTag",1),ut([(0,L.cM)({args:{1:!1}})],GitProviderService.prototype,"hasCommitBeenPushed",1),ut([(0,L.cM)()],GitProviderService.prototype,"hasRemotes",1),ut([(0,L.cM)()],GitProviderService.prototype,"hasTrackingBranch",1),ut([(0,L.cM)()],GitProviderService.prototype,"hasUnsafeRepositories",1),ut([(0,L.cM)({args:{0:e=>e.uri.toString(!0),1:e=>null!=e?`TextEditor(${C.Yd.toLoggable(e.document.uri)})`:void 0}})],GitProviderService.prototype,"isRepositoryForEditor",1),ut([(0,L.cM)()],GitProviderService.prototype,"getDiffTool",1),ut([(0,L.cM)()],GitProviderService.prototype,"openDiffTool",1),ut([(0,L.cM)()],GitProviderService.prototype,"openDirectoryCompare",1),ut([(0,re.H)(),(0,L.cM)()],GitProviderService.prototype,"resolveReference",1),ut([(0,L.cM)({args:{1:e=>`[${e.matchAll?"A":""}${e.matchCase?"C":""}${e.matchRegex?"R":""}]: ${e.query.length>500?`${e.query.substring(0,500)}...`:e.query}`}})],GitProviderService.prototype,"richSearchCommits",1),ut([(0,L.cM)()],GitProviderService.prototype,"searchCommits",1),ut([(0,L.cM)({args:!1})],GitProviderService.prototype,"runGitCommandViaTerminal",1),ut([(0,L.cM)()],GitProviderService.prototype,"validateBranchOrTagName",1),ut([(0,L.cM)()],GitProviderService.prototype,"validateReference",1),ut([(0,L.cM)()],GitProviderService.prototype,"stageFile",1),ut([(0,L.cM)()],GitProviderService.prototype,"stageDirectory",1),ut([(0,L.cM)()],GitProviderService.prototype,"unstageFile",1),ut([(0,L.cM)()],GitProviderService.prototype,"unstageDirectory",1),ut([(0,L.cM)()],GitProviderService.prototype,"stashApply",1),ut([(0,L.cM)()],GitProviderService.prototype,"stashDelete",1),ut([(0,L.cM)()],GitProviderService.prototype,"stashRename",1),ut([(0,L.cM)({args:{2:e=>e?.length}})],GitProviderService.prototype,"stashSave",1),ut([(0,L.cM)()],GitProviderService.prototype,"createWorktree",1),ut([(0,L.cM)()],GitProviderService.prototype,"getWorktree",1),ut([(0,L.cM)()],GitProviderService.prototype,"getWorktrees",1),ut([(0,L.cM)()],GitProviderService.prototype,"getWorktreesDefaultUri",1),ut([(0,L.cM)()],GitProviderService.prototype,"deleteWorktree",1),ut([(0,L.cM)()],GitProviderService.prototype,"getOpenScmRepositories",1),ut([(0,L.cM)()],GitProviderService.prototype,"getScmRepository",1),ut([(0,L.cM)()],GitProviderService.prototype,"getOrOpenScmRepository",1);class RichRemoteProviderService{constructor(e){this.container=e}_onDidChangeConnectionState=new r.EventEmitter;get onDidChangeConnectionState(){return this._onDidChangeConnectionState.event}_onAfterDidChangeConnectionState=new r.EventEmitter;get onAfterDidChangeConnectionState(){return this._onAfterDidChangeConnectionState.event}_connectedCache=new Set;connected(e){this._connectedCache.has(e)||(this._connectedCache.add(e),this.container.telemetry.sendEvent("remoteProviders/connected",{"remoteProviders.key":e}),this._onDidChangeConnectionState.fire({key:e,reason:"connected"}),setTimeout((()=>this._onAfterDidChangeConnectionState.fire({key:e,reason:"connected"})),250))}disconnected(e){this._connectedCache.delete(e),this.container.telemetry.sendEvent("remoteProviders/disconnected",{"remoteProviders.key":e}),this._onDidChangeConnectionState.fire({key:e,reason:"disconnected"}),setTimeout((()=>this._onAfterDidChangeConnectionState.fire({key:e,reason:"disconnected"})),250)}isConnected(e){return null==e?0!==this._connectedCache.size:this._connectedCache.has(e)}}var gt=i(4298),ft=Object.defineProperty,wt=Object.getOwnPropertyDescriptor,vt=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?wt(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&ft(t,i,s),s};const yt=2**30;class LineHoverController{constructor(e){this.container=e,this._disposable=r.Disposable.from((0,le.IH)(e.onReady)(this.onReady,this),te.D.onDidChange(this.onConfigurationChanged,this))}_disposable;_hoverProviderDisposable;_uri;dispose(){this.unregister(),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(!te.D.changed(e,"hovers.enabled")&&!te.D.changed(e,"hovers.currentLine.enabled"))return;const t=te.D.get("hovers");t.enabled&&t.currentLine.enabled?(this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this)),this.register(r.window.activeTextEditor)):(this.container.lineTracker.unsubscribe(this),this.unregister())}onActiveLinesChanged(e){e.pending||(null!=e.editor&&null!=e.selections?this.isRegistered(e.editor?.document.uri)||this.register(e.editor):this.unregister())}async provideDetailsHover(e,t,i){if(!this.container.lineTracker.includes(t.line))return;const n=this.container.lineTracker.getState(t.line),s=n?.commit;if(null==s)return;const o=te.D.get("hovers");if(o.annotations.details){if("blame"===await this.container.fileAnnotations.getAnnotationType(r.window.activeTextEditor))return}const a="line"===o.currentLine.over;if(!a&&this.container.lineAnnotations.suspended)return;const c=e.validateRange(new r.Range(t.line,a?t.character:yt,t.line,yt));if(!a&&c.start.character!==t.character)return;let l=t.line;const h=l+1;l=(s.lines.find((e=>e.line===h))??s.lines[0]).originalLine-1;const u=await this.container.tracker.get(e);if(null==u||i.isCancellationRequested)return;const d=await(0,xe.nN)(this.container,s,u.uri,l,{autolinks:o.autolinks.enabled,cancellation:i,dateFormat:te.D.get("defaultDateFormat"),format:o.detailsMarkdownFormat,pullRequests:o.pullRequests.enabled,timeout:250})??"Cancelled";return new r.Hover(d,c)}async provideChangesHover(e,t,i){if(!this.container.lineTracker.includes(t.line))return;const n=this.container.lineTracker.getState(t.line),s=n?.commit;if(null==s)return;const o=te.D.get("hovers");if(o.annotations.changes){if("blame"===await this.container.fileAnnotations.getAnnotationType(r.window.activeTextEditor))return}const a="line"===o.currentLine.over;if(!a&&this.container.lineAnnotations.suspended)return;const c=e.validateRange(new r.Range(t.line,a?t.character:yt,t.line,yt));if(!a&&c.start.character!==t.character)return;const l=await this.container.tracker.get(e);if(null==l)return;const h=await(0,xe.jw)(this.container,s,l.uri,t.line,l.document);return null!=h?new r.Hover(h,c):void 0}isRegistered(e){return null!=this._hoverProviderDisposable&&gt.n.equals(this._uri,e)}register(e){if(this.unregister(),null==e)return;const t=te.D.get("hovers");if(!t.enabled||!t.currentLine.enabled||!t.currentLine.details&&!t.currentLine.changes)return;this._uri=e.document.uri;const i=[];t.currentLine.changes&&i.push(r.languages.registerHoverProvider({pattern:this._uri.fsPath},{provideHover:this.provideChangesHover.bind(this)})),t.currentLine.details&&i.push(r.languages.registerHoverProvider({pattern:this._uri.fsPath},{provideHover:this.provideDetailsHover.bind(this)})),this._hoverProviderDisposable=r.Disposable.from(...i)}unregister(){this._uri=void 0,null!=this._hoverProviderDisposable&&(this._hoverProviderDisposable.dispose(),this._hoverProviderDisposable=void 0)}}vt([(0,L.fF)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map((e=>`[${e.anchor}-${e.active}]`)).join(",")}, pending=${Boolean(e.pending)}, reason=${e.reason}`}})],LineHoverController.prototype,"onActiveLinesChanged",1),vt([(0,L.fF)({args:{0:e=>C.Yd.toLoggable(e.uri),1:e=>`${e.line}:${e.character}`,2:!1}})],LineHoverController.prototype,"provideDetailsHover",1),vt([(0,L.fF)({args:{0:e=>C.Yd.toLoggable(e.uri),1:e=>`${e.line}:${e.character}`,2:!1}})],LineHoverController.prototype,"provideChangesHover",1);var bt=Object.defineProperty,Ct=Object.getOwnPropertyDescriptor,At=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Ct(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&bt(t,i,s),s};class FocusService{constructor(e,t){this.container=e,this.connection=t}dispose(){}async delete(e,t){const i=(0,se.UH)();try{const i=await this.connection.fetchGkDevApi(`v1/enrich-items/${e}`,{method:"DELETE"});if(!i.ok)throw new Error(`Unable to ${t} item '${e}':  (${i.status}) ${i.statusText}`)}catch(e){throw C.Yd.error(e,i),e}}async get(e){const t=(0,se.UH)();try{const t=await this.connection.fetchGkDevApi("v1/enrich-items",{method:"GET"}),i=await t.json();return null==e?i.data:i.data.filter((t=>t.type===e))}catch(e){if(e instanceof Error&&"Authentication required"===e.message)return[];throw C.Yd.error(e,t),e}}getPins(){return this.get("pin")}getSnoozed(){return this.get("snooze")}async pinItem(e){const t=(0,se.UH)();try{if(!await async function(e,t){for(;;){const i=await t.subscription.getSubscription();if(!1===i.account?.verified){const i={title:"Resend Verification"},n={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${e}\n\nYou must verify your email before you can continue.`,{modal:!0},i,n)===i&&await t.subscription.resendVerification())continue;return!1}if(null!=i.account)break;const n={title:"Sign In / Sign Up"},s={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${e}\n\nGain access to our developer productivity and collaboration services.`,{modal:!0},n,s)!==n||!await t.subscription.loginOrSignUp())return!1}return!0}("Pinning requires an account",this.container))throw new Error("Unable to pin item: account required");const t={provider:e.remote.provider.id,entityType:e.type,entityId:e.id,entityUrl:e.url},i=await this.connection.fetchGkDevApi("v1/enrich-items/pin",{method:"POST",body:JSON.stringify(t)});if(!i.ok)throw new Error(`Unable to pin item '${t.provider}|${t.entityUrl}#${e.id}':  (${i.status}) ${i.statusText}`);return(await i.json()).data}catch(e){throw C.Yd.error(e,t),e}}unpinItem(e){return this.delete(e,"unpin")}async snoozeItem(e){const t=(0,se.UH)();try{if(!await async function(e,t){for(;;){const i=await t.subscription.getSubscription();if(!1===i.account?.verified){const i={title:"Resend Verification"},n={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${e}\n\nYou must verify your email before you can continue.`,{modal:!0},i,n)===i&&await t.subscription.resendVerification())continue;return!1}const n=i.plan.effective.id;if((0,st.aG)(n))break;if(null==i.account){const i={title:"Start Free GitKraken Trial"},n={title:"Cancel",isCloseAffordance:!0};if(await r.window.showWarningMessage(`${e}\n\nTry our developer productivity and collaboration services free for 7 days.`,{modal:!0},i,n)===i&&await t.subscription.loginOrSignUp())continue}else{const i={title:"Upgrade to Pro"},n={title:"Cancel",isCloseAffordance:!0};await r.window.showWarningMessage(`${e}\n\nContinue to use our developer productivity and collaboration services.`,{modal:!0},i,n)===i&&t.subscription.purchase()}return!1}return!0}("Snoozing requires a trial or paid plan",this.container))throw new Error("Unable to snooze item: subscription required");const t={provider:e.remote.provider.id,entityType:e.type,entityId:e.id,entityUrl:e.url},i=await this.connection.fetchGkDevApi("v1/enrich-items/snooze",{method:"POST",body:JSON.stringify(t)});if(!i.ok)throw new Error(`Unable to snooze item '${t.provider}|${t.entityUrl}#${e.id}':  (${i.status}) ${i.statusText}`);return(await i.json()).data}catch(e){throw C.Yd.error(e,t),e}}unsnoozeItem(e){return this.delete(e,"unsnooze")}}At([(0,L.cM)()],FocusService.prototype,"get",1),At([(0,L.cM)()],FocusService.prototype,"getPins",1),At([(0,L.cM)()],FocusService.prototype,"getSnoozed",1),At([(0,L.cM)({args:{0:e=>`${e.id} (${e.remote.provider.name} ${e.type})`}})],FocusService.prototype,"pinItem",1),At([(0,L.cM)()],FocusService.prototype,"unpinItem",1),At([(0,L.cM)({args:{0:e=>`${e.id} (${e.remote.provider.name} ${e.type})`}})],FocusService.prototype,"snoozeItem",1),At([(0,L.cM)()],FocusService.prototype,"unsnoozeItem",1);var St=i(4290),Pt=Object.defineProperty,kt=Object.getOwnPropertyDescriptor,Rt=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?kt(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Pt(t,i,s),s};const Dt="did-authenticate";class AuthenticationConnection{constructor(e,t){this.container=e,this.connection=t}_cancellationSource;_deferredCodeExchanges=new Map;_pendingStates=new Map;_statusBarItem;dispose(){}abort(){return null==this._cancellationSource?Promise.resolve():(this._cancellationSource.cancel(),new Promise((e=>setTimeout(e,50))))}async getAccountInfo(e){const t=(0,se.UH)();let i;try{i=await this.connection.fetchApi("user",void 0,e)}catch(e){throw C.Yd.error(e,t),e}if(!i.ok)throw C.Yd.error(void 0,`Getting account info failed: (${i.status}) ${i.statusText}`),new Error(i.statusText);const r=await i.json();return{id:r.id,accountName:r.username}}async login(e,t){this.updateStatusBarItem(!0);const i=(0,St.Vj)(),n=this._pendingStates.get(t)??[];this._pendingStates.set(t,[...n,i]);const s=await r.env.asExternalUri(r.Uri.parse(`${r.env.uriScheme}://${this.container.context.extension.id}/${Dt}?gkstate=${i}`)),o=this.connection.getAccountsUri("register",`${e.includes("gitlens")?"referrer=gitlens&":""}pass-token=true&return-url=${encodeURIComponent(s.toString())}`);await r.env.openExternal(o);let a=this._deferredCodeExchanges.get(t);return null==a&&(a=(0,le.ue)(this.container.uri.onDidReceiveAuthenticationUri,this.getUriHandlerDeferredExecutor(t)),this._deferredCodeExchanges.set(t,a)),null!=this._cancellationSource&&(this._cancellationSource.cancel(),this._cancellationSource=void 0),this._cancellationSource=new r.CancellationTokenSource,this.openCompletionInputFallback(this._cancellationSource.token),Promise.race([a.promise,new Promise(((e,t)=>this._cancellationSource?.token.onCancellationRequested((()=>t("Cancelled"))))),new Promise(((e,t)=>setTimeout(t,12e4,"Cancelled")))]).finally((()=>{this._cancellationSource?.cancel(),this._cancellationSource=void 0,this._pendingStates.delete(t),a?.cancel(),this._deferredCodeExchanges.delete(t),this.updateStatusBarItem(!1)}))}async openCompletionInputFallback(e){const t=r.window.createInputBox();t.ignoreFocusOut=!0;const i=[];try{if(e.isCancellationRequested)return;const n=await new Promise((n=>{i.push(e.onCancellationRequested((()=>t.hide())),t.onDidHide((()=>n(void 0))),t.onDidChangeValue((e=>{if(e){try{const i=r.Uri.parse(e.trim());if(i.scheme&&"file"!==i.scheme)return void(t.validationMessage=void 0)}catch{}t.validationMessage="Please enter a valid authorization URL"}else t.validationMessage=void 0})),t.onDidAccept((()=>n(r.Uri.parse(t.value.trim()))))),t.title="GitKraken Sign In",t.placeholder="Please enter the provided authorization URL",t.prompt="If the auto-redirect fails, paste the authorization URL",t.show()}));null!=n&&this.container.uri.handleUri(n)}finally{t.dispose(),i.forEach((e=>{e.dispose()}))}}getUriHandlerDeferredExecutor(e){return(t,i,r)=>{const n=new URLSearchParams(t.query),s=this._pendingStates.get(e),o=n.get("gkstate");if(null==s||!o||!s.includes(o))return void C.Yd.log("State not found in accepted state. Skipping this execution...");const a=n.get("access-token"),c=n.get("code"),l=a??c;null==l?r("Token not returned"):i(l)}}updateStatusBarItem(e){e&&null==this._statusBarItem&&(this._statusBarItem=r.window.createStatusBarItem("gitlens.plus.signIn",r.StatusBarAlignment.Left),this._statusBarItem.name="GitKraken Sign in",this._statusBarItem.text="Signing in to GitKraken...",this._statusBarItem.show()),e||null==this._statusBarItem||(this._statusBarItem.dispose(),this._statusBarItem=void 0)}}Rt([(0,L.fF)({args:!1})],AuthenticationConnection.prototype,"getAccountInfo",1),Rt([(0,L.fF)()],AuthenticationConnection.prototype,"login",1);var _t=Object.defineProperty,Tt=Object.getOwnPropertyDescriptor,Ft=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Tt(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&_t(t,i,s),s};const $t="gitlens+",Ot=["gitlens"];class AccountAuthenticationProvider{constructor(e,t){this.container=e,this._authConnection=new AuthenticationConnection(e,t),this._sessionsPromise=this.getSessionsFromStorage(),this._disposable=r.Disposable.from(this._authConnection,r.authentication.registerAuthenticationProvider($t,"GitKraken: GitLens",this,{supportsMultipleAccounts:!1}),this.container.storage.onDidChangeSecrets((()=>this.checkForUpdates())))}_onDidChangeSessions=new r.EventEmitter;get onDidChangeSessions(){return this._onDidChangeSessions.event}_disposable;_authConnection;_sessionsPromise;dispose(){this._disposable.dispose()}get secretStorageKey(){return`gitlens.plus.auth:${this.container.env}`}abort(){return this._authConnection.abort()}async createSession(e){const t=(0,se.UH)(),i=It(e=e.sort());try{const t=await this._authConnection.login(e,i),r=await this.createSessionForToken(t,e),n=await this._sessionsPromise,s=n.findIndex((e=>e.id===r.id||It(e.scopes)===i));return s>-1?n.splice(s,1,r):n.push(r),await this.storeSessions(n),this._onDidChangeSessions.fire({added:[r],removed:[],changed:[]}),r}catch(e){if("Cancelled"===e)throw e;throw C.Yd.error(e,t),r.window.showErrorMessage(`Unable to sign in to GitKraken: ${e}`),e}}async getSessions(e){const t=(0,se.UH)();e=e?.sort();const i=It(e),r=await this._sessionsPromise,n=null!=e?r.filter((e=>It(e.scopes)===i)):r;return(0,se.lH)(t,` • Found ${n.length} sessions`),n}async removeSession(e){const t=(0,se.UH)();try{const t=await this._sessionsPromise,i=t.findIndex((t=>t.id===e));if(-1===i)return void C.Yd.log(`Unable to remove session ${e}; Not found`);const r=t[i];t.splice(i,1),await this.storeSessions(t),this._onDidChangeSessions.fire({added:[],removed:[r],changed:[]})}catch(e){throw C.Yd.error(e,t),r.window.showErrorMessage(`Unable to sign out of GitKraken: ${e}`),e}}async removeSessionsByScopes(e){const t=(0,se.UH)();try{e=e?.sort();const t=It(e),i=[];let r=0;const n=await this._sessionsPromise;for(const e of n)It(e.scopes)===t?(n.splice(r,1),i.push(e)):r++;if(0===i.length)return;await this.storeSessions(n),this._onDidChangeSessions.fire({added:[],removed:i,changed:[]})}catch(e){throw C.Yd.error(e,t),r.window.showErrorMessage(`Unable to sign out of GitKraken: ${e}`),e}}async checkForUpdates(){const e=await this._sessionsPromise;this._sessionsPromise=this.getSessionsFromStorage();const t=await this._sessionsPromise,i=[],r=[];for(const r of t)e.some((e=>e.id===r.id))||i.push(r);for(const i of e)t.some((e=>e.id===i.id))||r.push(i);(i.length||r.length)&&(C.Yd.debug(`Firing sessions changed event; added=${i.length}, removed=${r.length}`),this._onDidChangeSessions.fire({added:i,removed:r,changed:[]}))}async createSessionForToken(e,t){const i=await this._authConnection.getAccountInfo(e);return{id:(0,St.Vj)(),accessToken:e,account:{label:i.accountName,id:i.id},scopes:t}}async getSessionsFromStorage(){let e;try{const t=await this.container.storage.getSecret(this.secretStorageKey);if(!t||"[]"===t)return[];try{e=JSON.parse(t)}catch(e){try{await this.container.storage.deleteSecret(this.secretStorageKey)}catch{}throw e}}catch(e){return C.Yd.error(e,"Unable to read sessions from storage"),[]}const t=e.map((async e=>{const t=It(e.scopes);let i;if(C.Yd.debug(`Read session from storage with scopes=${t}`),null==e.account)try{i=await this._authConnection.getAccountInfo(e.accessToken),C.Yd.debug(`Verified session with scopes=${t}`)}catch(e){if("Unauthorized"===e.message)return}return{id:e.id,account:{label:null!=e.account?e.account.label??e.account.displayName??"<unknown>":i?.accountName??"<unknown>",id:e.account?.id??i?.id??"<unknown>"},scopes:e.scopes,accessToken:e.accessToken}})),i=(await Promise.allSettled(t)).filter((e=>"fulfilled"===e.status)).map((e=>e.value)).filter((e=>Boolean(e)));return C.Yd.debug(`Found ${i.length} verified sessions`),i.length!==e.length&&await this.storeSessions(i),i}async storeSessions(e){try{this._sessionsPromise=Promise.resolve(e),await this.container.storage.storeSecret(this.secretStorageKey,JSON.stringify(e))}catch(t){C.Yd.error(t,`Unable to store ${e.length} sessions`)}}}function It(e){return e?.join("|")}Ft([(0,L.fF)()],AccountAuthenticationProvider.prototype,"createSession",1),Ft([(0,L.fF)()],AccountAuthenticationProvider.prototype,"getSessions",1),Ft([(0,L.fF)()],AccountAuthenticationProvider.prototype,"removeSession",1),Ft([(0,L.fF)()],AccountAuthenticationProvider.prototype,"removeSessionsByScopes",1);var Et=i(4488),xt=Object.defineProperty,Bt=Object.getOwnPropertyDescriptor,Wt=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Bt(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&xt(t,i,s),s};class ServerConnection{constructor(e){this.container=e}dispose(){}get accountsUri(){return"staging"===this.container.env?r.Uri.parse("https://stagingapp.gitkraken.com"):"dev"===this.container.env?r.Uri.parse("https://devapp.gitkraken.com"):r.Uri.parse("https://app.gitkraken.com")}getAccountsUri(e,t){let i=null!=e?r.Uri.joinPath(this.accountsUri,e):this.accountsUri;return null!=t&&(i=i.with({query:t})),i}get baseApiUri(){return"staging"===this.container.env?r.Uri.parse("https://stagingapi.gitkraken.com"):"dev"===this.container.env?r.Uri.parse("https://devapi.gitkraken.com"):r.Uri.parse("https://api.gitkraken.com")}getApiUrl(...e){return r.Uri.joinPath(this.baseApiUri,...e).toString()}get baseGkDevApiUri(){return"staging"===this.container.env?r.Uri.parse("https://staging-api.gitkraken.dev"):"dev"===this.container.env?r.Uri.parse("https://dev-api.gitkraken.dev"):r.Uri.parse("https://api.gitkraken.dev")}getGkDevApiUrl(...e){return r.Uri.joinPath(this.baseGkDevApiUri,...e).toString()}get siteUri(){const{env:e}=this.container;return"staging"===e?r.Uri.parse("https://staging.gitkraken.com"):"dev"===e?r.Uri.parse("https://dev.gitkraken.com"):r.Uri.parse("https://gitkraken.com")}getSiteUri(e,t){let i=null!=e?r.Uri.joinPath(this.siteUri,e):this.siteUri;return null!=t&&(i=i.with({query:t})),i}get userAgent(){return"Visual-Studio-Code-GitLens"}async fetch(e,t,i){const r=(0,se.UH)();try{i??=await this.getAccessToken();const r={agent:(0,Re.Nx)(),...t,headers:{Authorization:`Bearer ${i}`,"User-Agent":this.userAgent,"Content-Type":"application/json",...t?.headers}};return await(0,Re.he)(e,r)}catch(e){throw C.Yd.error(e,r),e}}async fetchApi(e,t,i){return this.fetch(this.getApiUrl(e),t,i)}async fetchApiGraphQL(e,t,i){return this.fetchApi(e,{method:"POST",...i,body:JSON.stringify(t)})}async fetchGkDevApi(e,t,i){return this.fetch(this.getGkDevApiUrl(e),t,i)}async getAccessToken(){const e=await this.container.subscription.getAuthenticationSession();if(null!=e)return e.accessToken;throw new Error("Authentication required")}}Wt([(0,Et.H)()],ServerConnection.prototype,"accountsUri",1),Wt([(0,Et.H)()],ServerConnection.prototype,"baseApiUri",1),Wt([(0,Et.H)()],ServerConnection.prototype,"baseGkDevApiUri",1),Wt([(0,Et.H)()],ServerConnection.prototype,"siteUri",1),Wt([(0,Et.H)()],ServerConnection.prototype,"userAgent",1);var Nt=Object.defineProperty,Mt=Object.getOwnPropertyDescriptor,Lt=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Mt(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Nt(t,i,s),s};class IntegrationAuthenticationService{constructor(e){this.container=e}providers=new Map;dispose(){this.providers.clear()}registerProvider(e,t){if(this.providers.has(e))throw new Error(`Provider with id ${e} already registered`);return this.providers.set(e,t),{dispose:()=>this.providers.delete(e)}}hasProvider(e){return this.providers.has(e)}async createSession(e,t){const i=this.providers.get(e);if(null==i)throw new Error(`Provider with id ${e} not registered`);const r=await(i?.createSession(t));if(null==r)return;const n=this.getSecretKey(e,i.getSessionId(t));return await this.container.storage.storeSecret(n,JSON.stringify(r)),r}async getSession(e,t,i){const r=this.providers.get(e);if(null==r)throw new Error(`Provider with id ${e} not registered`);const n=this.getSecretKey(e,r.getSessionId(t));let s;i?.forceNewSession&&await this.container.storage.deleteSecret(n);try{const e=await this.container.storage.getSecret(n);e&&(s=JSON.parse(e))}catch(e){try{await this.container.storage.deleteSecret(n)}catch{}if(!i?.createIfNeeded)throw e}return i?.createIfNeeded&&null==s?this.createSession(e,t):s}async deleteSession(e,t){const i=this.providers.get(e);if(null==i)throw new Error(`Provider with id ${e} not registered`);const r=this.getSecretKey(e,i.getSessionId(t));await this.container.storage.deleteSecret(r)}getSecretKey(e,t){return`gitlens.integration.auth:${e}|${t}`}}Lt([(0,L.fF)()],IntegrationAuthenticationService.prototype,"createSession",1),Lt([(0,L.fF)()],IntegrationAuthenticationService.prototype,"getSession",1),Lt([(0,L.fF)()],IntegrationAuthenticationService.prototype,"deleteSession",1);var Ut=i(7512),Gt=i(9967),Ht=i(4550),Vt=i(2215),qt=Object.defineProperty,Qt=Object.getOwnPropertyDescriptor,jt=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Qt(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&qt(t,i,s),s};class SubscriptionService{constructor(e,t,i){this.container=e,this.connection=t,this._disposable=r.Disposable.from((0,he.IH)(e.onReady)(this.onReady,this),this.container.accountAuthentication.onDidChangeSessions((e=>setTimeout((()=>this.onAuthenticationChanged(e)),0)),this),te.D.onDidChange((e=>{te.D.changed(e,"plusFeatures")&&this.updateContext()})));const n=this.getStoredSubscription();null!=n&&(0,Ht.L5)(i,"< 14.0")&&(n.previewTrial=void 0),this.changeSubscription(n,{silent:!0}),setTimeout((()=>{this.ensureSession(!1)}),1e4)}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}_disposable;_subscription;_statusBarSubscription;_validationTimer;dispose(){this._statusBarSubscription?.dispose(),this._disposable.dispose()}async onAuthenticationChanged(e){let t=this._session;if(null==t&&null!=this._sessionPromise&&(t=await this._sessionPromise),null!=t&&e.removed?.some((e=>e.id===t.id)))return this._session=void 0,this._sessionPromise=void 0,void this.logout();const i=e.added?.[0]??e.changed?.[0];null!=i&&(i.id===t?.id&&i.accessToken===t?.accessToken||(this._session=t,this.validate({force:!0})))}_etag=0;get etag(){return this._etag}onReady(){this._disposable=r.Disposable.from(this._disposable,this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),...this.registerCommands()),this.updateContext()}onRepositoriesChanged(e){this.updateContext()}registerCommands(){return this.container.viewCommands,[(0,at.xR)(s.Gh.PlusLoginOrSignUp,(()=>this.loginOrSignUp())),(0,at.xR)(s.Gh.PlusLogout,(()=>this.logout())),(0,at.xR)(s.Gh.PlusStartPreviewTrial,(()=>this.startPreviewTrial())),(0,at.xR)(s.Gh.PlusManage,(()=>this.manage())),(0,at.xR)(s.Gh.PlusPurchase,(()=>this.purchase())),(0,at.xR)(s.Gh.PlusResendVerification,(()=>this.resendVerification())),(0,at.xR)(s.Gh.PlusValidate,(()=>this.validate({force:!0}))),(0,at.xR)(s.Gh.PlusShowPlans,(()=>this.showPlans())),(0,at.xR)(s.Gh.PlusHide,(()=>te.D.updateEffective("plusFeatures.enabled",!1))),(0,at.xR)(s.Gh.PlusRestore,(()=>te.D.updateEffective("plusFeatures.enabled",!0))),(0,at.xR)("gitlens.plus.reset",(()=>this.logout(!0)))]}async getAuthenticationSession(e=!1){return this.ensureSession(e)}async getSubscription(e=!1){const t=this.ensureSession(!1);return e||await t,this._subscription}async learnAboutPreviewOrTrial(){const e=await this.getSubscription();e.state===st.jc.FreeInPreviewTrial?(0,G.lN)(this.container.context.extension.id,"gitlens.welcome","gitlens.welcome.preview",!1):e.state===st.jc.FreePlusInTrial&&(0,G.lN)(this.container.context.extension.id,"gitlens.welcome","gitlens.welcome.trial",!1)}async loginOrSignUp(){if(!await(0,Vt.C)())return!1;await this.container.accountAuthentication.abort(),this.showAccountView();const e=await this.ensureSession(!0),t=Boolean(e);if(t){const{account:e,plan:{actual:t,effective:i}}=this._subscription;if(!1===e?.verified){const e={title:"Resend Verification",isCloseAffordance:!0},t={title:"Cancel"};await r.window.showInformationMessage(`You must verify your email before you can access ${i.name}.`,e,t)===e&&this.resendVerification()}else if((0,st.dz)(this._subscription)){const e=(0,st.PY)(this._subscription,"days"),t={title:"OK",isCloseAffordance:!0},n={title:"Learn More"};await r.window.showInformationMessage(`Welcome to ${i.name} (Trial). You can now try Pro features on privately hosted repos for ${(0,E._6)("more day",e??0)}.`,{modal:!0},t,n)===n&&this.learnAboutPreviewOrTrial()}else(0,st.ww)(this._subscription)?r.window.showInformationMessage(`Welcome to ${t.name}. You can now use Pro features on privately hosted repos.`,"OK"):r.window.showInformationMessage(`Welcome to ${t.name}. You can use Pro features on local & publicly hosted repos.`,"OK")}return t}async logout(e=!1){return this.logoutCore(e)}async logoutCore(e=!1){this._lastValidatedDate=void 0,null!=this._validationTimer&&(clearInterval(this._validationTimer),this._validationTimer=void 0),await this.container.accountAuthentication.abort(),this._sessionPromise=void 0,null!=this._session?(this.container.accountAuthentication.removeSession(this._session.id),this._session=void 0):this.container.accountAuthentication.removeSessionsByScopes(Ot),e&&this.container.debugging?this.changeSubscription(void 0):this.changeSubscription({...this._subscription,plan:{actual:(0,st.fV)(st.Cx.Free,!1,0,void 0,null!=this._subscription.plan?.actual?.startedOn?new Date(this._subscription.plan.actual.startedOn):void 0),effective:(0,st.fV)(st.Cx.Free,!1,0,void 0,null!=this._subscription.plan?.effective?.startedOn?new Date(this._subscription.plan.actual.startedOn):void 0)},account:void 0})}manage(){r.env.openExternal(this.connection.getAccountsUri())}async purchase(){await(0,Vt.C)()&&(null==this._subscription.account?this.showPlans():r.env.openExternal(this.connection.getAccountsUri("subscription","product=gitlens&license=PRO")),await this.showAccountView())}async resendVerification(){if(this._subscription.account?.verified)return!0;const e=(0,se.UH)();this.showAccountView(!0);const t=await this.ensureSession(!1);if(null==t)return!1;try{const i=await this.connection.fetchApi("resend-email",{method:"POST",body:JSON.stringify({id:t.account.id})},t.accessToken);if(!i.ok)return C.Yd.error("",e,`Unable to resend verification email; status=(${i.status}): ${i.statusText}`),r.window.showErrorMessage(`Unable to resend verification email; Status: ${i.statusText}`,"OK"),!1;const n={title:"Recheck"},s={title:"Cancel"};if(await r.window.showInformationMessage("Once you have verified your email address, click 'Recheck'.",n,s)===n)return await this.validate({force:!0}),!0}catch(t){C.Yd.error(t,e),r.window.showErrorMessage("Unable to resend verification email","OK")}return!1}async showAccountView(e=!1){e&&!te.D.get("plusFeatures.enabled",void 0,!0)||this.container.accountView.visible||await(0,at.P0)(s.Gh.ShowAccountView)}showPlans(){r.env.openExternal(this.connection.getSiteUri("gitlens/pricing"))}async startPreviewTrial(e){if(!await(0,Vt.C)())return;let{plan:t,previewTrial:i}=this._subscription;if(null!=i){if(this.showAccountView(),!e&&t.effective.id===st.Cx.Free){const e={title:"Start Free GitKraken Trial",isCloseAffordance:!0},t={title:"Cancel"};await r.window.showInformationMessage("Your 3-day Pro preview has ended, start a free GitKraken trial to get an additional 7 days.\n\n✨ A trial or paid plan is required to use Pro features on privately hosted repos.",{modal:!0},e,t)===e&&this.loginOrSignUp()}return}if((0,st._n)(this._subscription))return;const n=new Date;let s,o=new Date(n);this.container.debugging?(o=(0,Ut.IH)(o,{minutes:1}),s=0):(o.setHours(23,59,59,999),o=(0,Ut.IH)(o,{days:3}),s=3),i={startedOn:n.toISOString(),expiresOn:o.toISOString()},this.changeSubscription({...this._subscription,plan:{...this._subscription.plan,effective:(0,st.fV)(st.Cx.Pro,!1,0,void 0,n,o)},previewTrial:i}),e||setTimeout((async()=>{const e={title:"Learn More"};await r.window.showInformationMessage(`You can now preview Pro features for ${(0,E._6)("day",s)}. After which, you can start a free GitKraken trial for an additional 7 days.`,{title:"OK",isCloseAffordance:!0},e)===e&&this.learnAboutPreviewOrTrial()}),1)}async validate(e){const t=(0,se.UH)(),i=await this.ensureSession(!1);if(null!=i)try{await this.checkInAndValidate(i,e)}catch(e){C.Yd.error(e,t)}else this.changeSubscription(this._subscription)}_lastValidatedDate;async checkInAndValidate(e,t){if(!t?.force&&null!=this._lastValidatedDate&&Date.now()-this._lastValidatedDate.getTime()<432e5&&!(0,st.Z1)(this._subscription))return;if(!t?.showSlowProgress)return this.checkInAndValidateCore(e);const i=this.checkInAndValidateCore(e);await Promise.race([i,new Promise((e=>setTimeout(e,3e3,!0)))])&&await r.window.withProgress({location:r.ProgressLocation.Notification,title:"Validating your GitKraken account..."},(()=>i))}async checkInAndValidateCore(e){const t=(0,se.UH)();this._lastValidatedDate=void 0;try{const t={id:e.account.id,platform:(0,Ke.Xf)(),gitlensVersion:this.container.version,machineId:r.env.machineId,sessionId:r.env.sessionId,vscodeEdition:r.env.appName,vscodeHost:r.env.appHost,vscodeVersion:r.version,previewStartedOn:this._subscription.previewTrial?.startedOn,previewExpiresOn:this._subscription.previewTrial?.expiresOn},i=await this.connection.fetchApi("gitlens/checkin",{method:"POST",body:JSON.stringify(t)},e.accessToken);if(!i.ok)throw new a.dt("Unable to validate account",void 0,i.status,i.statusText);const n=await i.json();this.validateSubscription(n)}catch(e){if(C.Yd.error(e,t),e instanceof a.dt)throw e;throw new a.dt("Unable to validate account",e)}finally{this.startDailyValidationTimer()}}startDailyValidationTimer(){null!=this._validationTimer&&clearInterval(this._validationTimer),this._validationTimer=setInterval((()=>{null!=this._lastValidatedDate&&this._lastValidatedDate.getDate()===(new Date).getDate()||this.ensureSession(!1,!0)}),216e5)}validateSubscription(e){const t={id:e.user.id,name:e.user.name,email:e.user.email,verified:"activated"===e.user.status,createdOn:e.user.createdDate,organizationIds:e.orgIds??[]},i=Object.entries(e.licenses.effectiveLicenses),r=Object.entries(e.licenses.paidLicenses);let n,s;if(r.length>0){r.length>1&&r.sort(((e,t)=>(0,st.kU)(zt(t[0]))+Jt(t[1].latestStatus)-((0,st.kU)(zt(e[0]))+Jt(e[1].latestStatus))));const[e,t]=r[0];n=(0,st.fV)(zt(e),Kt(e),t.reactivationCount??0,t.organizationId,new Date(t.latestStartDate),new Date(t.latestEndDate),"cancelled"===t.latestStatus)}if(null==n&&(n=(0,st.fV)(st.Cx.FreePlus,!1,0,void 0,null!=e.user.firstGitLensCheckIn?new Date(e.user.firstGitLensCheckIn):null!=e.user.createdDate?new Date(e.user.createdDate):void 0)),i.length>0){i.length>1&&i.sort(((e,t)=>(0,st.kU)(zt(t[0]))+Jt(t[1].latestStatus)-((0,st.kU)(zt(e[0]))+Jt(e[1].latestStatus))));const[e,t]=i[0];s=(0,st.fV)(zt(e),Kt(e),t.reactivationCount??0,t.organizationId,new Date(t.latestStartDate),new Date(t.latestEndDate),"cancelled"===t.latestStatus)}(null==s||(0,st.kU)(n.id)>=(0,st.kU)(s.id))&&(s={...n}),this._lastValidatedDate=new Date,this.changeSubscription({...this._subscription,plan:{actual:n,effective:s},account:t},{store:!0})}_sessionPromise;_session;async ensureSession(e,t){if(null!=this._sessionPromise&&void 0===this._session&&await this._sessionPromise,!t&&null!=this._session)return this._session;if(null===this._session&&!e)return;void 0===this._sessionPromise&&(this._sessionPromise=this.getOrCreateSession(e).then((e=>(this._session=e,this._sessionPromise=void 0,this._session)),(()=>(this._session=null,this._sessionPromise=void 0,this._session))));return await this._sessionPromise??void 0}async getOrCreateSession(e){const t=(0,se.UH)();let i;try{i=await r.authentication.getSession($t,Ot,{createIfNone:e,silent:!e})}catch(e){if(i=null,e instanceof Error&&e.message.includes("User did not consent"))return C.Yd.debug(t,"User declined authentication"),await this.logoutCore(),null;C.Yd.error(e,t)}if(null==i)return C.Yd.debug(t,"No valid session was found"),await this.logoutCore(),i??null;try{await this.checkInAndValidate(i,{showSlowProgress:e,force:e})}catch(n){if(C.Yd.error(n,t),this.container.telemetry.sendEvent("account/validation/failed",{"account.id":i.account.id,exception:String(n),code:n.original?.code,statusCode:n.statusCode}),C.Yd.debug(t,`Account validation failed (${n.statusCode??n.original?.code})`),n instanceof a.dt){const t=i.account.label;if("ENOTFOUND"!==n.original?.code&&null!=n.statusCode&&n.statusCode<500&&n.statusCode>=400){if(i=null,await this.logoutCore(),e){const e=401===n.statusCode;queueMicrotask((async()=>{const i={title:"Retry Sign In"};await r.window.showErrorMessage(`Unable to sign in to your (${t}) GitKraken account. Please try again. If this issue persists, please contact support.${e?"":` Error=${n.message}`}`,i)===i&&this.loginOrSignUp()}))}}else i=i??null}}return i}changeSubscription(e,t){null==e&&(e={plan:{actual:(0,st.fV)(st.Cx.Free,!1,0,void 0),effective:(0,st.fV)(st.Cx.Free,!1,0,void 0)},account:void 0,state:st.jc.Free}),(0,st.Z1)(e)&&(e={...e,plan:{...e.plan,effective:e.plan.actual}}),!(0,st.ww)(e)&&null!=e.previewTrial&&((0,st.EE)(e.previewTrial.expiresOn)??0)>0&&(e={...e,plan:{...e.plan,effective:(0,st.fV)(st.Cx.Pro,!1,0,void 0,new Date(e.previewTrial.startedOn),new Date(e.previewTrial.expiresOn))}}),e.state=(0,st.RE)(e);const i=this._subscription,r=null!=i&&JSON.stringify(i)===JSON.stringify(e);r?t?.store&&this.storeSubscription(e):(queueMicrotask((()=>{let t=Yt(e);this.container.telemetry.setGlobalAttributes(t),t={...t,...r?{}:Yt(i,"previous")},this.container.telemetry.sendEvent(null==i?"subscription":"subscription/changed",t)})),this.storeSubscription(e),this._subscription=e,this._etag=Date.now(),t?.silent||(this.updateContext(),null!=i&&this._onDidChange.fire({current:e,previous:i,etag:this._etag})))}getStoredSubscription(){const e=this.container.storage.get("premium:subscription");let t,i;return null!=e?.data?(({lastValidatedAt:t,...i}=e.data),this._lastValidatedDate=null!=t?new Date(t):void 0):i=void 0,null!=i&&(i.plan.actual.name=(0,st.tL)(i.plan.actual.id),i.plan.effective.name=(0,st.tL)(i.plan.effective.id)),i}async storeSubscription(e){return this.container.storage.store("premium:subscription",{v:1,data:{...e,lastValidatedAt:this._lastValidatedDate?.getTime()}})}_cancellationSource;_updateAccessContextDebounced;updateContext(){this._updateAccessContextDebounced?.cancel(),null==this._updateAccessContextDebounced&&(this._updateAccessContextDebounced=(0,he.Ds)(this.updateAccessContext.bind(this),500)),null!=this._cancellationSource&&this._cancellationSource.cancel(),this._cancellationSource=new r.CancellationTokenSource,this._updateAccessContextDebounced(this._cancellationSource.token),this.updateStatusBar();const{plan:{actual:e},state:t}=this._subscription;(0,ie.v)("gitlens:plus",e.id!=st.Cx.Free?e.id:void 0),(0,ie.v)("gitlens:plus:state",t)}async updateAccessContext(e){let t=!1;if(0!==this.container.git.repositoryCount&&(({allowed:t}=await this.container.git.access()),e.isCancellationRequested))return;const i=te.D.get("plusFeatures.enabled")??!0;let r;if(!i&&"mixed"===t){r=[];for(const t of this.container.git.repositories){if(t.closed)continue;const i=await this.container.git.access(void 0,t.uri);if(e.isCancellationRequested)return;i.allowed||r.push(t.uri.toString())}}(0,ie.v)("gitlens:plus:enabled",Boolean(t)||i),(0,ie.v)("gitlens:plus:required",!1===t),(0,ie.v)("gitlens:plus:disallowedRepos",r)}updateStatusBar(){const{account:e,plan:{effective:t},state:i}=this._subscription;if(t.id===st.Cx.Free)return this._statusBarSubscription?.dispose(),void(this._statusBarSubscription=void 0);const n=(0,st.dz)(this._subscription);if(!n&&!1!==e?.verified)return this._statusBarSubscription?.dispose(),void(this._statusBarSubscription=void 0);if(null==this._statusBarSubscription&&(this._statusBarSubscription=r.window.createStatusBarItem("gitlens.plus.subscription",r.StatusBarAlignment.Left,1)),this._statusBarSubscription.name="GitKraken Subscription",this._statusBarSubscription.command=s.Gh.ShowAccountView,!1===e?.verified)this._statusBarSubscription.text=`$(warning) ${t.name} (Unverified)`,this._statusBarSubscription.backgroundColor=new r.ThemeColor("statusBarItem.warningBackground"),this._statusBarSubscription.tooltip=new r.MarkdownString(n?`**Please verify your email**\n\nYou must verify your email before you can start your **${t.name}** trial.\n\nClick for details`:"**Please verify your email**\n\nYou must verify your email before you can use Pro features on privately hosted repos.\n\nClick for details",!0);else{const e=(0,st.PY)(this._subscription,"days"),n=i===st.jc.FreePlusInTrial&&t.trialReactivationCount>0;this._statusBarSubscription.text=`${t.name} (Trial)`,this._statusBarSubscription.tooltip=new r.MarkdownString((n?`[See what's new](https://help.gitkraken.com/gitlens/gitlens-release-notes-current/) with\n\t\t\t${(0,E._6)("day",e??0,{infix:" more "})}\n\t\t\tin your **${t.name}** trial.`:`You have ${(0,E._6)("day",e??0)} remaining in your **${t.name}** trial.`)+" Once your trial ends, you'll need a paid plan to continue using ✨ features.\n\nTry our\n\t\t\t[other developer tools](https://www.gitkraken.com/suite) also included in your trial.",!0)}this._statusBarSubscription.show()}}function Yt(e,t){return null==e?{}:{...(0,Gt.xH)(e.account,{arrays:"join",prefix:(t?`${t}.`:"")+"account",skipPaths:["name","email"],skipNulls:!0,stringify:!0}),...(0,Gt.xH)(e.plan,{prefix:(t?`${t}.`:"")+"subscription",skipPaths:["actual.name","effective.name"],skipNulls:!0,stringify:!0}),...(0,Gt.xH)(e.previewTrial,{prefix:(t?`${t}.`:"")+"subscription.previewTrial",skipPaths:["actual.name","effective.name"],skipNulls:!0,stringify:!0}),"subscription.state":e.state}}function zt(e){switch(e){case"gitlens-pro":case"bundle-pro":case"gitkraken_v1-pro":return st.Cx.Pro;case"gitlens-teams":case"bundle-teams":case"gitkraken_v1-teams":return st.Cx.Teams;case"gitlens-hosted-enterprise":case"gitlens-self-hosted-enterprise":case"gitlens-standalone-enterprise":case"bundle-hosted-enterprise":case"bundle-self-hosted-enterprise":case"bundle-standalone-enterprise":case"gitkraken_v1-hosted-enterprise":case"gitkraken_v1-self-hosted-enterprise":case"gitkraken_v1-standalone-enterprise":return st.Cx.Enterprise;default:return st.Cx.FreePlus}}function Kt(e){switch(e){case"bundle-pro":case"bundle-teams":case"bundle-hosted-enterprise":case"bundle-self-hosted-enterprise":case"bundle-standalone-enterprise":return!0;default:return!1}}function Jt(e){switch(e){case"active":return 100;case"expired":case"cancelled":return-100;case"in_trial":case"trial":return 1;case"canceled":case"non_renewing":return 0;default:return-200}}function Xt(e,t){return r.Disposable.from((0,at.xR)(s.Gh.ShowGraph,((...e)=>"panel"===te.D.get("graph.layout")?(0,at.P0)(s.Gh.ShowGraphView,...e):(0,at.P0)(s.Gh.ShowGraphPage,...e))),(0,at.xR)("gitlens.graph.switchToEditorLayout",(async()=>{await te.D.updateEffective("graph.layout","editor"),queueMicrotask((()=>{(0,at.P0)(s.Gh.ShowGraphPage)}))})),(0,at.xR)("gitlens.graph.switchToPanelLayout",(async()=>{await te.D.updateEffective("graph.layout","panel"),queueMicrotask((async()=>{await(0,at.dO)("gitlens.views.graph.resetViewLocation"),await(0,at.dO)("gitlens.views.graphDetails.resetViewLocation"),(0,at.P0)(s.Gh.ShowGraphView)}))})),(0,at.xR)(s.Gh.ToggleGraph,((...e)=>{(0,ie.fw)("gitlens:webviewView:graph:visible")?(0,at.dO)("workbench.action.closePanel"):(0,at.P0)(s.Gh.ShowGraphView,...e)})),(0,at.xR)(s.Gh.ToggleMaximizedGraph,((...e)=>{(0,ie.fw)("gitlens:webviewView:graph:visible")||(0,at.P0)(s.Gh.ShowGraphView,...e),(0,at.dO)("workbench.action.toggleMaximizedPanel")})),(0,at.xR)(s.Gh.ShowInCommitGraph,(i=>{const r="preserveFocus"in i&&(i.preserveFocus??!1);"panel"===te.D.get("graph.layout")?e.graphView.show({preserveFocus:r},i):t.show({preserveFocus:r},i)})),(0,at.xR)(s.Gh.ShowInCommitGraphView,(t=>{const i="preserveFocus"in t&&(t.preserveFocus??!1);e.graphView.show({preserveFocus:i},t)})))}jt([(0,L.fF)()],SubscriptionService.prototype,"learnAboutPreviewOrTrial",1),jt([(0,L.cM)()],SubscriptionService.prototype,"loginOrSignUp",1),jt([(0,L.cM)()],SubscriptionService.prototype,"logout",1),jt([(0,L.cM)()],SubscriptionService.prototype,"manage",1),jt([(0,L.cM)()],SubscriptionService.prototype,"purchase",1),jt([(0,re.H)(),(0,L.cM)()],SubscriptionService.prototype,"resendVerification",1),jt([(0,L.cM)()],SubscriptionService.prototype,"showAccountView",1),jt([(0,re.H)(),(0,L.cM)()],SubscriptionService.prototype,"startPreviewTrial",1),jt([(0,re.H)(),(0,L.cM)()],SubscriptionService.prototype,"validate",1),jt([(0,re.H)((e=>e.account.id))],SubscriptionService.prototype,"checkInAndValidate",1),jt([(0,L.fF)({args:{0:e=>e?.account.label}})],SubscriptionService.prototype,"checkInAndValidateCore",1),jt([(0,L.fF)()],SubscriptionService.prototype,"validateSubscription",1),jt([(0,re.H)(),(0,L.fF)()],SubscriptionService.prototype,"ensureSession",1),jt([(0,L.fF)()],SubscriptionService.prototype,"getOrCreateSession",1),jt([(0,L.fF)()],SubscriptionService.prototype,"changeSubscription",1);class GraphStatusBarController{_disposable;_statusBarItem;constructor(e){this._disposable=r.Disposable.from(te.D.onDidChange(this.onConfigurationChanged,this),e.subscription.onDidChange(this.onSubscriptionChanged,this),(0,he.IH)(e.onReady)((()=>queueMicrotask((()=>this.updateStatusBar())))),(0,ie.ve)((e=>{"gitlens:enabled"!==e&&"gitlens:plus:enabled"!==e||this.updateStatusBar()})),{dispose:()=>this._statusBarItem?.dispose()})}dispose(){this._disposable.dispose()}onConfigurationChanged(e){(te.D.changed(e,"graph.statusBar.enabled")||te.D.changed(e,"plusFeatures.enabled"))&&this.updateStatusBar()}onSubscriptionChanged(e){this.updateStatusBar()}updateStatusBar(){te.D.get("graph.statusBar.enabled")&&(0,ie.fw)("gitlens:enabled")&&(0,Vt.L)()?(null==this._statusBarItem&&(this._statusBarItem=r.window.createStatusBarItem("gitlens.graph",r.StatusBarAlignment.Left,9997),this._statusBarItem.name="GitLens Commit Graph",this._statusBarItem.command=s.Gh.ShowGraph,this._statusBarItem.text="$(gitlens-graph)",this._statusBarItem.tooltip=new r.MarkdownString("Visualize commits on the Commit Graph ✨"),this._statusBarItem.accessibilityInformation={label:"Show the GitLens Commit Graph"}),this._statusBarItem.show()):(this._statusBarItem?.dispose(),this._statusBarItem=void 0)}}var Zt=i(6503),ei=i(635),ti=i(1907),ii=Object.defineProperty,ri=Object.getOwnPropertyDescriptor,ni=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?ri(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&ii(t,i,s),s};class WorkspacesApi{constructor(e,t){this.container=e,this.connection=t}async getWorkspace(e,t){let i;if(t?.includeRepositories){let e=`(first: ${t?.repoCount??ti.CL}`;t?.repoPage&&(e+=`, page: ${t.repoPage}`),e+=")",i=`\n\t\t\t\tprovider_data {\n\t\t\t\t\trepositories ${e} {\n\t\t\t\t\t\ttotal_count\n\t\t\t\t\t\tpage_info {\n\t\t\t\t\t\t\tend_cursor\n\t\t\t\t\t\t\thas_next_page\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnodes {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\trepository_id\n\t\t\t\t\t\t\tprovider\n\t\t\t\t\t\t\tprovider_project_name\n\t\t\t\t\t\t\tprovider_organization_id\n\t\t\t\t\t\t\tprovider_organization_name\n\t\t\t\t\t\t\turl\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t`}const r=`\n\t\t\tquery getWorkspace {\n\t\t\t\tproject(id: "${e}") { ${`\n\t\t\tid\n\t\t\tdescription\n\t\t\tname\n\t\t\torganization {\n\t\t\t\tid\n\t\t\t}\n\t\t\tprovider\n\t\t\tazure_organization_id\n\t\t\tazure_project\n\t\t\trepo_relation\n\t\t\t${i??""}\n\t\t`} }\n\t\t\t}\n\t\t`,n=await this.fetch({query:r});if(!n.ok)throw C.Yd.error(void 0,`Getting workspace failed: (${n.status}) ${n.statusText}`),new Error(n.statusText);return await n.json()}async getWorkspaces(e){let t;if(e?.includeRepositories){let i=`(first: ${e?.repoCount??ti.CL}`;e?.repoPage&&(i+=`, page: ${e.repoPage}`),i+=")",t=`\n\t\t\t\tprovider_data {\n\t\t\t\t\trepositories ${i} {\n\t\t\t\t\t\ttotal_count\n\t\t\t\t\t\tpage_info {\n\t\t\t\t\t\t\tend_cursor\n\t\t\t\t\t\t\thas_next_page\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnodes {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\trepository_id\n\t\t\t\t\t\t\tprovider\n\t\t\t\t\t\t\tprovider_project_name\n\t\t\t\t\t\t\tprovider_organization_id\n\t\t\t\t\t\t\tprovider_organization_name\n\t\t\t\t\t\t\turl\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t`}const i=`\n\t\t\ttotal_count\n\t\t\tpage_info {\n\t\t\t\tend_cursor\n\t\t\t\thas_next_page\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\tid\n\t\t\t\tdescription\n\t\t\t\tname\n\t\t\t\torganization {\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t\tprovider\n\t\t\t\tazure_organization_id\n\t\t\t\tazure_project\n\t\t\t\trepo_relation\n\t\t\t\t${t??""}\n\t\t\t}\n\t\t`;let r=`(first: ${e?.count??ti.U1}`;e?.cursor?r+=`, after: "${e.cursor}"`:e?.page&&(r+=`, page: ${e.page}`),r+=")";let n="query getWorkpaces {";if(n+=`memberProjects: projects ${r} { ${i} }`,null==e?.cursor&&e?.includeOrganizations){const t=(await this.container.subscription.getSubscription())?.account?.organizationIds??[];for(const r of t){let t=`(first: ${e?.count??ti.U1}`;e?.page&&(t+=`, page: ${e.page}`),t+=`, organization_id: "${r}")`,n+=`organizationProjects_${r}: projects ${t} { ${i} }`}}n+="}";const s=await this.fetch({query:n});if(!s.ok)throw C.Yd.error(void 0,`Getting workspaces failed: (${s.status}) ${s.statusText}`),new Error(s.statusText);const o=new Set,a=await s.json();if(null==a?.data)return;let c;for(const e of Object.values(a.data))if(null!=e)if(null==c){c={data:{projects:e}};for(const t of e.nodes)o.add(t.id)}else for(const t of e.nodes)o.has(t.id)||(o.add(t.id),c.data.projects.nodes.push(t));return null!=c&&(c.data.projects.total_count=o.size),c}async getWorkspaceRepositories(e,t){let i=`(first: ${t?.count??ti.CL}`;t?.cursor?i+=`, after: "${t.cursor}"`:t?.page&&(i+=`, page: ${t.page}`),i+=")";const r=await this.fetch({query:`\n\t\t\t\t\tquery getWorkspaceRepos {\n\t\t\t\t\t\tproject (id: "${e}") {\n\t\t\t\t\t\t\tprovider_data {\n\t\t\t\t\t\t\t\trepositories ${i} {\n\t\t\t\t\t\t\t\t\ttotal_count\n\t\t\t\t\t\t\t\t\tpage_info {\n\t\t\t\t\t\t\t\t\t\tend_cursor\n\t\t\t\t\t\t\t\t\t\thas_next_page\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tnodes {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\trepository_id\n\t\t\t\t\t\t\t\t\t\tprovider\n\t\t\t\t\t\t\t\t\t\tprovider_project_name\n\t\t\t\t\t\t\t\t\t\tprovider_organization_id\n\t\t\t\t\t\t\t\t\t\tprovider_organization_name\n\t\t\t\t\t\t\t\t\t\turl\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`});if(!r.ok)throw C.Yd.error(void 0,`Getting workspace repos failed: (${r.status}) ${r.statusText}`),new Error(r.statusText);return await r.json()}async createWorkspace(e){if(!e.name||!e.description||!e.provider)return;if(!(e.provider!==ti.Xu.Azure||e.azureOrganizationName&&e.azureProjectName))return;if((e.provider===ti.Xu.GitHubEnterprise||e.provider===ti.Xu.GitLabSelfHosted)&&!e.hostUrl)return;const t=await this.fetch({query:`\n\t\t\t\t\tmutation createWorkspace {\n\t\t\t\t\t\tcreate_project(\n\t\t\t\t\t\t\tinput: {\n\t\t\t\t\t\t  \t\ttype: GK_PROJECT\n\t\t\t\t\t\t  \t\tname: "${e.name}"\n\t\t\t\t\t\t  \t\tdescription: "${e.description}"\n\t\t\t\t\t\t  \t\tprovider: ${e.provider}\n\t\t\t\t\t\t\t\t${e.hostUrl?`host_url: "${e.hostUrl}"`:""}\n\t\t\t\t\t\t\t\t${e.azureOrganizationName?`azure_organization_id: "${e.azureOrganizationName}"`:""}\n\t\t\t\t\t\t\t\t${e.azureProjectName?`azure_project: "${e.azureProjectName}"`:""}\n\t\t\t\t\t\t  \t\tprofile_id: "shared-services"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tdescription,\n\t\t\t\t\t\t\torganization {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprovider\n\t\t\t\t\t\t\tazure_organization_id\n\t\t\t\t\t\t\tazure_project\n\t\t\t\t\t\t\trepo_relation\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`});if(!t.ok)throw C.Yd.error(void 0,`Creating workspace failed: (${t.status}) ${t.statusText}`),new Error(t.statusText);return await t.json()}async deleteWorkspace(e){const t=await this.fetch({query:`\n\t\t\t\t\tmutation deleteWorkspace {\n\t\t\t\t\t\tdelete_project(\n\t\t\t\t\t\t\tid: "${e}"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`});if(!t.ok)throw C.Yd.error(void 0,`Deleting workspace failed: (${t.status}) ${t.statusText}`),new Error(t.statusText);const i=await t.json();if(i?.errors?.some((e=>e.message.includes("permission")))){const e="Adding repositories to workspace failed: you do not have permission to delete this workspace";throw C.Yd.error(void 0,e),new Error(e)}return i}async addReposToWorkspace(e,t){if(0===t.length)return;let i="[";i+=t.map((e=>`{ provider_organization_id: "${e.owner}", name: "${e.repoName}" }`)).join(","),i+="]";let r=1;const n=t.map((e=>`Repository${r++}: repository(provider_organization_id: "${e.owner}", name: "${e.repoName}") {\n\t\t\tid\n\t\t\tname\n\t\t\trepository_id\n\t\t\tprovider\n\t\t\tprovider_project_name\n\t\t\tprovider_organization_id\n\t\t\tprovider_organization_name\n\t\t\turl\n\t\t}`)).join(","),s=await this.fetch({query:`\n\t\t\t\t\tmutation addReposToWorkspace {\n\t\t\t\t\t\tadd_repositories_to_project(\n\t\t\t\t\t\t\tinput: {\n\t\t\t\t\t\t\t\tproject_id: "${e}",\n\t\t\t\t\t\t\t\trepositories: ${i}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tprovider_data {\n\t\t\t\t\t\t\t\t${n}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`});if(!s.ok)throw C.Yd.error(void 0,`Adding repositories to workspace failed: (${s.status}) ${s.statusText}`),new Error(s.statusText);const o=await s.json();if(o?.errors?.some((e=>e.message.includes("permission")))){const e="Adding repositories to workspace failed: you do not have permission to add repositories to this workspace";throw C.Yd.error(void 0,e),new Error(e)}return o}async removeReposFromWorkspace(e,t){if(0===t.length)return;let i="[";i+=t.map((e=>`{ provider_organization_id: "${e.owner}", name: "${e.repoName}" }`)).join(","),i+="]";const r=await this.fetch({query:`\n\t\t\t\t\tmutation removeReposFromWorkspace {\n\t\t\t\t\t\tremove_repositories_from_project(\n\t\t\t\t\t\t\tinput: {\n\t\t\t\t\t\t\t\tproject_id: "${e}",\n\t\t\t\t\t\t\t\trepositories: ${i}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t`});if(!r.ok)throw C.Yd.error(void 0,`Removing repositories from workspace failed: (${r.status}) ${r.statusText}`),new Error(r.statusText);const n=await r.json();if(n?.errors?.some((e=>e.message.includes("permission")))){const e="Adding repositories to workspace failed: you do not have permission to remove repositories from this workspace";throw C.Yd.error(void 0,e),new Error(e)}return n}async fetch(e,t){return this.connection.fetchApiGraphQL("api/projects/graphql",e,t)}}ni([(0,L.cM)()],WorkspacesApi.prototype,"getWorkspace",1),ni([(0,L.cM)()],WorkspacesApi.prototype,"getWorkspaces",1),ni([(0,L.cM)()],WorkspacesApi.prototype,"getWorkspaceRepositories",1),ni([(0,L.cM)()],WorkspacesApi.prototype,"createWorkspace",1),ni([(0,L.cM)()],WorkspacesApi.prototype,"deleteWorkspace",1),ni([(0,L.cM)()],WorkspacesApi.prototype,"addReposToWorkspace",1),ni([(0,L.cM)()],WorkspacesApi.prototype,"removeReposFromWorkspace",1);var si=Object.defineProperty,oi=Object.getOwnPropertyDescriptor,ai=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?oi(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&si(t,i,s),s};class WorkspacesService{constructor(e,t){this.container=e,this.connection=t,this._workspacesApi=new WorkspacesApi(this.container,this.connection),this._workspacesPathProvider=new WorkspacesWebPathMappingProvider,this._currentWorkspaceId=li(),this._currentWorkspaceAutoAddSetting=r.workspace.getConfiguration("gitkraken")?.get("workspaceAutoAddSetting")??"disabled",this._disposable=r.Disposable.from(e.subscription.onDidChange(this.onSubscriptionChanged,this))}_onDidResetWorkspaces=new r.EventEmitter;get onDidResetWorkspaces(){return this._onDidResetWorkspaces.event}_cloudWorkspaces;_disposable;_localWorkspaces;_workspacesApi;_workspacesPathProvider;_currentWorkspaceId;_currentWorkspaceAutoAddSetting="disabled";_currentWorkspace;dispose(){this._disposable.dispose()}get currentWorkspaceId(){return this._currentWorkspaceId}get currentWorkspace(){return this._currentWorkspace}onSubscriptionChanged(e){null!=e.current.account&&e.current.account.id===e.previous?.account?.id&&e.current.state===e.previous?.state||this.resetWorkspaces({cloud:!0})}async loadCloudWorkspaces(e=!1){const t=await this.container.subscription.getSubscription();if(null==t?.account)return{cloudWorkspaces:void 0,cloudWorkspaceInfo:"Please sign in to use cloud workspaces."};const i=[];let r;try{const t=await this._workspacesApi.getWorkspaces({includeRepositories:!e,includeOrganizations:!0});r=t?.data?.projects?.nodes}catch{return{cloudWorkspaces:void 0,cloudWorkspaceInfo:"Failed to load cloud workspaces."}}let n=0;const s=t.state===st.jc.FreeInPreviewTrial||t.state===st.jc.FreePlusInTrial||t.state===st.jc.Paid;if(r?.length)for(const t of r){const r=await this._workspacesPathProvider.getCloudWorkspaceCodeWorkspacePath(t.id);if(!s&&t.organization?.id){n+=1;continue}const o=t.provider_data?.repositories?.nodes;let a=null!=o?o.map((e=>({...e,workspaceId:t.id}))):o;null!=a||e||(a=[]),i.push(new ti.CH(this.container,t.id,t.name,t.organization?.id,t.provider,t.repo_relation,null!=this._currentWorkspaceId&&this._currentWorkspaceId===t.id,t.provider===ti._N.Azure?{organizationId:t.azure_organization_id??void 0,project:t.azure_project??void 0}:void 0,a,r))}return{cloudWorkspaces:i,cloudWorkspaceInfo:n>0?`${n} shared workspaces hidden - upgrade to GitKraken Pro to access.`:void 0}}async loadLocalWorkspaces(){const e=[],t=(await this._workspacesPathProvider.getLocalWorkspaceData())?.workspaces||{};for(const i of Object.values(t))e.push(new ti.qP(this.container,i.localId,i.name,i.repositories.map((e=>({localPath:e.localPath,name:e.localPath.split(/[\\/]/).pop()??"unknown",workspaceId:i.localId}))),null!=this._currentWorkspaceId&&this._currentWorkspaceId===i.localId));return{localWorkspaces:e,localWorkspaceInfo:void 0}}getCloudWorkspace(e){return this._cloudWorkspaces?.find((t=>t.id===e))}getLocalWorkspace(e){return this._localWorkspaces?.find((t=>t.id===e))}async getWorkspaces(e){const t={cloudWorkspaces:[],localWorkspaces:[],cloudWorkspaceInfo:void 0,localWorkspaceInfo:void 0};if(null==this._cloudWorkspaces||e?.force){const i=await this.loadCloudWorkspaces(e?.excludeRepositories);this._cloudWorkspaces=i.cloudWorkspaces,t.cloudWorkspaceInfo=i.cloudWorkspaceInfo}if(null==this._localWorkspaces||e?.force){const e=await this.loadLocalWorkspaces();this._localWorkspaces=e.localWorkspaces,t.localWorkspaceInfo=e.localWorkspaceInfo}const i=[...this._cloudWorkspaces??[],...this._localWorkspaces??[]].find((e=>e.current));return null!=i&&(this._currentWorkspaceId=i.id,this._currentWorkspace=i),t.cloudWorkspaces=this._cloudWorkspaces??[],t.localWorkspaces=this._localWorkspaces??[],t}async getCloudWorkspaceRepositories(e){const t=await this._workspacesApi.getWorkspaceRepositories(e),i=t?.data?.project?.provider_data?.repositories?.nodes;return i?.map((t=>({...t,workspaceId:e})))??[]}async addMissingCurrentWorkspaceRepos(e){if(null==this._currentWorkspaceId)return;let t=[...this._cloudWorkspaces??[],...this._localWorkspaces??[]].find((e=>e.current));if(null==t)try{const e=await this._workspacesApi.getWorkspace(this._currentWorkspaceId,{includeRepositories:!0});if(null==e?.data?.project)return;const i=e.data.project.provider_data?.repositories?.nodes,n=null!=i?i.map((t=>({...t,workspaceId:e.data.project.id}))):[];t=new ti.CH(this.container,e.data.project.id,e.data.project.name,e.data.project.organization?.id,e.data.project.provider,e.data.project.repo_relation,!0,e.data.project.provider===ti._N.Azure?{organizationId:e.data.project.azure_organization_id??void 0,project:e.data.project.azure_project??void 0}:void 0,n,r.workspace.workspaceFile?.fsPath)}catch{return}if(!e?.force&&"disabled"===this._currentWorkspaceAutoAddSetting||!t?.current)return;if(this._currentWorkspace=t,!(await t.getRepositoryDescriptors())?.length)return;const i=[...(await this.resolveWorkspaceRepositoriesByName(t,{resolveFromPath:!0,usePathMapping:!0})).values()].map((e=>e.repository)),n=new Map;for(const e of this.container.git.openRepositories)n.set(e.id,e);const s=i.filter((e=>!n.has(e.id)));if(0===s.length)return void(e?.force&&r.window.showInformationMessage("No new repositories found to add.",{modal:!0}));let o=[];if(!e?.force&&"prompt"===this._currentWorkspaceAutoAddSetting){const e={title:"Add..."},t={title:"Change Auto-Add Behavior..."},i={title:"Cancel",isCloseAffordance:!0},n=await r.window.showInformationMessage("New repositories found in the linked GitKraken workspace. Would you like to add them to the current VS Code workspace?",e,t,i);if(null==n||n===i)return;if(n===t)return void this.chooseCodeWorkspaceAutoAddSetting({current:!0})}if(e?.force||"prompt"===this._currentWorkspaceAutoAddSetting){const e=await(0,ei.rf)("Add Repositories to Workspace","Choose which repositories to add to the current workspace",s);if(0===e.length)return;o=e.map((e=>e.repoPath))}else o=s.map((e=>e.path));if(0===o.length)return;const a=r.workspace.workspaceFolders?.length??0;r.window.withProgress({location:r.ProgressLocation.Notification,title:"Adding new repositories from linked cloud workspace...",cancellable:!1},(()=>new Promise((e=>{r.workspace.updateWorkspaceFolders(a,0,...o.map((e=>({uri:r.Uri.file(e)})))),e(!0)}))))}resetWorkspaces(e){(e?.cloud??1)&&(this._cloudWorkspaces=void 0),(e?.local??1)&&(this._localWorkspaces=void 0),this._onDidResetWorkspaces.fire()}async getCloudWorkspaceRepoPath(e,t){return this._workspacesPathProvider.getCloudWorkspaceRepoPath(e,t)}async updateCloudWorkspaceRepoLocalPath(e,t,i){await this._workspacesPathProvider.writeCloudWorkspaceRepoDiskPathToMap(e,t,i)}async getRepositoriesInParentFolder(e){const t=(await r.window.showOpenDialog({title:"Choose a folder containing repositories for this workspace",canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0];if(null!=t&&!e?.isCancellationRequested)try{return this.container.git.findRepositories(t,{cancellation:e,depth:1,silent:!0})}catch(e){return}}async locateAllCloudWorkspaceRepos(e,t){const i=this.getCloudWorkspace(e);if(null==i)return;const r=await i.getRepositoryDescriptors();if(null==r||0===r.length)return;const n=await this.getRepositoriesInParentFolder(t);if(null!=n&&0!==n.length&&!t?.isCancellationRequested)for(const i of(await this.resolveWorkspaceRepositoriesByName(e,{cancellation:t,repositories:n})).values())if(await this.locateWorkspaceRepo(e,i.descriptor,i.repository),t?.isCancellationRequested)return}async locateWorkspaceRepo(e,t,i){let n;if(null==i||i instanceof r.Uri){let e=i;if(null==e&&(e=(await r.window.showOpenDialog({title:`Choose a location for ${t.name}`,canSelectFiles:!1,canSelectFolders:!0,canSelectMany:!1}))?.[0]),null==e)return;if(n=await this.container.git.getOrOpenRepository(e,{closeOnOpen:!0,detectNested:!1}),null==n)return}else n=i;const s=n.uri.fsPath,o=await n.getRemotes(),a=[];for(const e of o){const t=e.provider?.url({type:Zt.J.Repo});null!=t&&a.push(t)}for(const e of a)await this.container.repositoryPathMapping.writeLocalRepoPath({remoteUrl:e},s);const c=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);let l;null==l&&"cloud"===c?.type&&(l=c.provider),null!=t.id&&null!=t.url&&null!=l&&(await this.container.repositoryPathMapping.writeLocalRepoPath({remoteUrl:t.url,repoInfo:{provider:l,owner:t.provider_organization_id,repoName:t.name}},s),await this.updateCloudWorkspaceRepoLocalPath(e,t.id,s))}async createCloudWorkspace(e){const t=r.window.createInputBox();t.title="Create Cloud Workspace";const i=r.window.createQuickPick();i.title="Create Cloud Workspace";const n={GitHub:ti.Xu.GitHub,"GitHub Enterprise":ti.Xu.GitHubEnterprise};t.ignoreFocusOut=!0;const s=[];let o,a,c,l,h,u;if(null!=e?.repos&&e.repos.length>0){for(const t of e.repos){if(0===(await t.getRemotes({filter:e=>"github.com"===e.domain})).length)return void await r.window.showErrorMessage("Only GitHub is supported for this operation. Please ensure all open repositories are hosted on GitHub.",{modal:!0})}u=ti.Xu.GitHub}try{if(o=await new Promise((e=>{s.push(t.onDidHide((()=>e(void 0))),t.onDidAccept((()=>{const i=t.value.trim();i?e(i):t.validationMessage="Please enter a non-empty name for the workspace"}))),t.placeholder="Please enter a name for the new workspace",t.prompt="Enter your workspace name",t.show()})),!o)return;if(a=await new Promise((e=>{s.push(t.onDidHide((()=>e(void 0))),t.onDidAccept((()=>{const i=t.value.trim();i?e(i):t.validationMessage="Please enter a non-empty description for the workspace"}))),t.value="",t.title="Create Workspace",t.placeholder="Please enter a description for the new workspace",t.prompt="Enter your workspace description",t.show()})),!a)return;if(null==u&&(u=await new Promise((e=>{s.push(i.onDidHide((()=>e(void 0))),i.onDidAccept((()=>{0!==i.activeItems.length&&e(n[i.activeItems[0].label])}))),i.placeholder="Please select a provider for the new workspace",i.items=Object.keys(n).map((e=>({label:e}))),i.canSelectMany=!1,i.show()}))),!u)return;if((u==ti.Xu.GitHubEnterprise||u==ti.Xu.GitLabSelfHosted)&&(c=await new Promise((e=>{s.push(t.onDidHide((()=>e(void 0))),t.onDidAccept((()=>{const i=t.value.trim();i?e(i):t.validationMessage="Please enter a non-empty host URL for the workspace"}))),t.value="",t.placeholder="Please enter a host URL for the new workspace",t.prompt="Enter your workspace host URL",t.show()})),!c))return;if(u==ti.Xu.Azure){if(l=await new Promise((e=>{s.push(t.onDidHide((()=>e(void 0))),t.onDidAccept((()=>{const i=t.value.trim();i?e(i):t.validationMessage="Please enter a non-empty organization name for the workspace"}))),t.value="",t.placeholder="Please enter an organization name for the new workspace",t.prompt="Enter your workspace organization name",t.show()})),!l)return;if(h=await new Promise((e=>{s.push(t.onDidHide((()=>e(void 0))),t.onDidAccept((()=>{const i=t.value.trim();i?e(i):t.validationMessage="Please enter a non-empty project name for the workspace"}))),t.value="",t.placeholder="Please enter a project name for the new workspace",t.prompt="Enter your workspace project name",t.show()})),!h)return}}finally{t.dispose(),i.dispose(),s.forEach((e=>{e.dispose()}))}const d={name:o,description:a,provider:u,hostUrl:c,azureOrganizationName:l,azureProjectName:h};let p;try{const e=await this._workspacesApi.createWorkspace(d);p=e?.data?.create_project}catch{return}if(null!=p){null==this._cloudWorkspaces&&(this._cloudWorkspaces=[]);const t=await this._workspacesPathProvider.getCloudWorkspaceCodeWorkspacePath(p.id);this._cloudWorkspaces?.push(new ti.CH(this.container,p.id,p.name,p.organization?.id,p.provider,p.repo_relation,null!=this._currentWorkspaceId&&this._currentWorkspaceId===p.id,p.provider===ti._N.Azure?{organizationId:p.azure_organization_id??void 0,project:p.azure_project??void 0}:void 0,[],t));const i=this.getCloudWorkspace(p.id);null!=i&&await this.addCloudWorkspaceRepos(i.id,{repos:e?.repos,suppressNotifications:!0})}}async deleteCloudWorkspace(e){const t=await r.window.showWarningMessage("Are you sure you want to delete this workspace? This cannot be undone.",{modal:!0},{title:"Confirm"},{title:"Cancel",isCloseAffordance:!0});if(null!=t&&"Cancel"!=t.title)try{const t=await this._workspacesApi.deleteWorkspace(e);t?.data?.delete_project?.id===e&&(this._cloudWorkspaces=this._cloudWorkspaces?.filter((t=>t.id!==e)))}catch(e){r.window.showErrorMessage(e.message)}}async filterReposForProvider(e,t){const i=[];for(const r of e){(await r.getRemotes({filter:e=>e.provider?.id===ti.Jv[t]})).length&&i.push(r)}return i}async filterReposForCloudWorkspace(e,t){const i=this.getCloudWorkspace(t)??this.getLocalWorkspace(t);if(null==i)return e;const r=[...(await i.getRepositoriesByName()).values()].map((e=>e.repository));return e.filter((e=>!r.find((t=>t.id===e.id))))}async addCloudWorkspaceRepos(e,t){const i=this.getCloudWorkspace(e);if(null==i)return;const n=[];let s=t?.repos;if(!t?.repos){let n=await this.filterReposForProvider(this.container.git.openRepositories,i.provider);n=await this.filterReposForCloudWorkspace(n,e);const o=[{label:"Choose repositories from a folder",description:void 0,choice:ti.Pv.ParentFolder}];n.length>0&&o.unshift({label:"Choose repositories from the current window",description:void 0,choice:ti.Pv.CurrentWindow}),o[0].picked=!0;const a=await r.window.showQuickPick(o,{placeHolder:"Choose repositories from the current window or a folder",ignoreFocusOut:!0});if(null==a)return;a.choice===ti.Pv.ParentFolder&&await r.window.withProgress({location:r.ProgressLocation.Notification,title:"Finding repositories to add to the workspace...",cancellable:!0},(async(s,o)=>{const a=await this.getRepositoriesInParentFolder(o);null!=a&&(0!==a.length?o.isCancellationRequested||(n=await this.filterReposForProvider(a,i.provider),0!==n.length?o.isCancellationRequested||(n=await this.filterReposForCloudWorkspace(n,e),0===n.length&&(t?.suppressNotifications||r.window.showInformationMessage("All possible repositories are already in this workspace.",{modal:!0}))):t?.suppressNotifications||r.window.showInformationMessage(`No matching repositories found for provider ${i.provider}.`,{modal:!0})):t?.suppressNotifications||r.window.showInformationMessage("No repositories found in the chosen folder.",{modal:!0}))}));const c=await(0,ei.rf)("Add Repositories to Workspace","Choose which repositories to add to the workspace",n);if(0===c.length)return;s=c.map((e=>e.repoPath))}if(null==s)return;for(const e of s){const t=e instanceof v._j?e:await this.container.git.getOrOpenRepository(r.Uri.file(e),{closeOnOpen:!0});if(null==t)continue;const i=ci(await t.getRemote("origin")||(await t.getRemotes())?.[0]);null!=i&&n.push({owner:i.owner,repoName:i.repoName,repo:t,url:i.url})}if(0===n.length)return;let o=[];const a=new Set((await i.getRepositoryDescriptors()).map((e=>e.id)));await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Adding repositories to workspace ${i.name}...`,cancellable:!1},(async()=>{try{const t=await this._workspacesApi.addReposToWorkspace(e,n.map((e=>({owner:e.owner,repoName:e.repoName}))));if(null==t?.data.add_repositories_to_project)return;o=Object.values(t.data.add_repositories_to_project.provider_data).filter((e=>null!=e)).map((t=>({...t,workspaceId:e})))}catch(e){return void r.window.showErrorMessage(e.message)}o.length>0&&i.addRepositories(o),o.length<n.length&&(o=(await i.getRepositoryDescriptors({force:!0})).filter((e=>!a.has(e.id))));for(const{repo:t,repoName:i,url:r}of n){const n=o.find((e=>e.name.toLowerCase()===i||e.url===r));null!=n&&await this.locateWorkspaceRepo(e,n,t)}}))}async removeCloudWorkspaceRepo(e,t){const i=this.getCloudWorkspace(e);if(null==i)return;const n=await r.window.showWarningMessage(`Are you sure you want to remove ${t.name} from this workspace? This cannot be undone.`,{modal:!0},{title:"Confirm"},{title:"Cancel",isCloseAffordance:!0});if(null!=n&&"Cancel"!=n.title)try{const r=await this._workspacesApi.removeReposFromWorkspace(e,[{owner:t.provider_organization_id,repoName:t.name}]);if(null==r?.data.remove_repositories_from_project)return;i.removeRepositories([t.name])}catch(e){r.window.showErrorMessage(e.message)}}async resolveWorkspaceRepositoriesByName(e,t){const i=new Map,n=e instanceof ti.CH||e instanceof ti.qP?e:this.getLocalWorkspace(e)??this.getCloudWorkspace(e);if(null==n)return i;const s=await n.getRepositoryDescriptors();if(null==s||0===s.length)return i;const o=t?.repositories??this.container.git.repositories,a=new Map,c=new Map;for(const e of o){if(t?.cancellation?.isCancellationRequested)break;if(c.set((0,oe.AH)(e.uri.fsPath.toLowerCase()),e),n instanceof ti.CH){const t=await e.getRemotes();for(const i of t){const t=ci(i);null!=t&&a.set(`${t.provider}/${t.owner}/${t.repoName}`,e)}}}for(const e of s){let n=null,s=null;null==e.id?n=e.localPath:!0===t?.usePathMapping&&(n=await this.getMappedPathForCloudWorkspaceRepoDescriptor(e)),null!=n&&(s=c.get((0,oe.AH)(n.toLowerCase()))),null==s&&null!=e.id&&null!=e.provider&&(s=a.get(`${e.provider.toLowerCase()}/${e.provider_organization_id.toLowerCase()}/${e.name.toLowerCase()}`)),null!=n&&null==s&&!0===t?.resolveFromPath&&(s=await this.container.git.getOrOpenRepository(r.Uri.file(n),{closeOnOpen:!0,force:!0})),null!=s&&i.set(e.name,{descriptor:e,repository:s})}return i}async saveAsCodeWorkspaceFile(e){const t=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);if(null==t)return;const i=await t.getRepositoryDescriptors();if(null==i)return;const n=await t.getRepositoriesByName();if(0===n.size)return void r.window.showErrorMessage("No repositories in this workspace could be found locally. Please locate at least one repository.",{modal:!0});const s=[];for(const e of n.values()){const t=e.repository;t.virtual||s.push(t.uri.fsPath)}if(s.length<i.length){const e=await r.window.showWarningMessage("Some repositories in this workspace could not be located locally. Do you want to continue?",{modal:!0},{title:"Continue"},{title:"Cancel",isCloseAffordance:!0});if(null==e||"Cancel"==e.title)return}const o=await r.window.showSaveDialog({defaultUri:r.Uri.file(`${t.name}.code-workspace`),filters:{"Code Workspace":["code-workspace"]},title:"Choose a location for the new code workspace file"});if(null==o)return;const a=await this.chooseCodeWorkspaceAutoAddSetting();if(!await this._workspacesPathProvider.writeCodeWorkspaceFile(o,s,{workspaceId:e,workspaceAutoAddSetting:a}))return void r.window.showErrorMessage("Could not create the new workspace file. Check logs for details");t.setLocalPath(o.fsPath);const c={title:"Cancel",isCloseAffordance:!0},l=await r.window.showInformationMessage(`Workspace file created for ${t.name}. Would you like to open it now?`,{modal:!0},{title:"Open in New Window",location:"newWindow"},{title:"Open in Current Window",location:"currentWindow"},c);null!=l&&l!==c&&this.openCodeWorkspaceFile(e,{location:l.location})}async chooseCodeWorkspaceAutoAddSetting(e){if(e?.current&&(null==r.workspace.workspaceFile||null==this._currentWorkspaceId||null==this._currentWorkspaceAutoAddSetting))return"disabled";const t=e?.current?this._currentWorkspaceAutoAddSetting:"disabled",i=[{label:"Add on Workspace (Window) Open",description:"enabled"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"enabled"},{label:"Prompt on Workspace (Window) Open",description:"prompt"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"prompt"},{label:"Never",description:"disabled"===this._currentWorkspaceAutoAddSetting?"current":void 0,option:"disabled"}],n=await r.window.showQuickPick(i,{placeHolder:"Choose the behavior of automatically adding missing repositories to the current VS Code workspace",title:"Linked Workspace: Automatically Add Repositories"});if(null==n?.option)return t;const s=n.option;if(e?.current&&null!=r.workspace.workspaceFile){if(!await this._workspacesPathProvider.updateCodeWorkspaceFileSettings(r.workspace.workspaceFile,{workspaceAutoAddSetting:s}))return this._currentWorkspaceAutoAddSetting;this._currentWorkspaceAutoAddSetting=s}return s}async openCodeWorkspaceFile(e,t){const i=this.getCloudWorkspace(e)??this.getLocalWorkspace(e);if(null==i)return;if(null==i.localPath){const t=await r.window.showInformationMessage(`The workspace file for ${i.name} has not been created. Would you like to create it now?`,{modal:!0},{title:"Create"},{title:"Cancel",isCloseAffordance:!0});if(null==t||"Cancel"==t.title)return;return void this.saveAsCodeWorkspaceFile(e)}let n="currentWindow"===t?.location?"currentWindow":"newWindow";if(!t?.location){const e=await r.window.showInformationMessage(`How would you like to open the workspace file for ${i.name}?`,{modal:!0},{title:"Open in New Window",location:"newWindow"},{title:"Open in Current Window",location:"currentWindow"},{title:"Cancel",isCloseAffordance:!0});if(null==e||"Cancel"==e.title)return;n=e.location??"newWindow"}if(!await this._workspacesPathProvider.confirmCloudWorkspaceCodeWorkspaceFilePath(i.id)){await this._workspacesPathProvider.removeCloudWorkspaceCodeWorkspaceFilePath(i.id),i.setLocalPath(void 0);const e=await r.window.showInformationMessage(`The workspace file for ${i.name} could not be found. Would you like to locate it now?`,{modal:!0},{title:"Locate"},{title:"Cancel",isCloseAffordance:!0});if("Locate"!==e?.title)return;const t=(await r.window.showOpenDialog({defaultUri:r.Uri.file(i.localPath),canSelectFiles:!0,canSelectFolders:!1,canSelectMany:!1,filters:{"Code Workspace":["code-workspace"]},title:"Locate the workspace file"}))?.[0]?.fsPath;if(null==t)return;await this._workspacesPathProvider.writeCloudWorkspaceCodeWorkspaceFilePathToMap(i.id,t),i.setLocalPath(t)}(0,G.ic)(r.Uri.file(i.localPath),{location:n})}async getMappedPathForCloudWorkspaceRepoDescriptor(e){let t=await this.getCloudWorkspaceRepoPath(e.workspaceId,e.id);return null==t&&(t=(await this.container.repositoryPathMapping.getLocalRepoPaths({remoteUrl:e.url??void 0,repoInfo:{repoName:e.name,provider:e.provider??void 0,owner:e.provider_organization_id}}))?.[0]),t}}function ci(e){if(null==e.provider?.owner)return;const t=e.provider.path.split("/").pop();return null!=t?{provider:e.provider.id.toLowerCase(),owner:e.provider.owner.toLowerCase(),repoName:t.toLowerCase(),url:e.provider.url({type:Zt.J.Repo})}:void 0}function li(){return r.workspace.getConfiguration("gitkraken")?.get("workspaceId")}ai([(0,L.cM)()],WorkspacesService.prototype,"getWorkspaces",1),ai([(0,L.cM)()],WorkspacesService.prototype,"addMissingCurrentWorkspaceRepos",1),ai([(0,L.cM)()],WorkspacesService.prototype,"resetWorkspaces",1),ai([(0,L.cM)({args:{1:!1,2:!1}})],WorkspacesService.prototype,"locateWorkspaceRepo",1),ai([(0,L.cM)({args:!1})],WorkspacesService.prototype,"createCloudWorkspace",1),ai([(0,L.cM)()],WorkspacesService.prototype,"deleteCloudWorkspace",1),ai([(0,L.cM)({args:{1:!1}})],WorkspacesService.prototype,"addCloudWorkspaceRepos",1),ai([(0,L.cM)({args:{1:!1}})],WorkspacesService.prototype,"removeCloudWorkspaceRepo",1),ai([(0,L.cM)({args:{1:!1}})],WorkspacesService.prototype,"resolveWorkspaceRepositoriesByName",1),ai([(0,L.cM)()],WorkspacesService.prototype,"saveAsCodeWorkspaceFile",1),ai([(0,L.cM)()],WorkspacesService.prototype,"chooseCodeWorkspaceAutoAddSetting",1),ai([(0,L.cM)()],WorkspacesService.prototype,"openCodeWorkspaceFile",1);var hi=Object.defineProperty,ui=Object.getOwnPropertyDescriptor,di=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?ui(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&hi(t,i,s),s};class StatusBarController{constructor(e){this.container=e,this._disposable=r.Disposable.from((0,le.IH)(e.onReady)(this.onReady,this),te.D.onDidChange(this.onConfigurationChanged,this))}_cancellation;_disposable;_selectedSha;_statusBarBlame;_statusBarMode;dispose(){this.clearBlame(),this._statusBarBlame?.dispose(),this._statusBarMode?.dispose(),this.container.lineTracker.unsubscribe(this),this._disposable.dispose()}onReady(){this.onConfigurationChanged()}onConfigurationChanged(e){if(te.D.changed(e,"mode")){const t=te.D.get("mode.statusBar.enabled")?this.container.mode:void 0;if(t?.statusBarItemName){const i="left"!==te.D.get("mode.statusBar.alignment")?r.StatusBarAlignment.Right:r.StatusBarAlignment.Left;te.D.changed(e,"mode.statusBar.alignment")&&this._statusBarMode?.alignment!==i&&(this._statusBarMode?.dispose(),this._statusBarMode=void 0),this._statusBarMode=this._statusBarMode??r.window.createStatusBarItem("gitlens.mode",i,i===r.StatusBarAlignment.Right?999:1),this._statusBarMode.name="GitLens Modes",this._statusBarMode.command=s.Gh.SwitchMode,this._statusBarMode.text=t.statusBarItemName,this._statusBarMode.tooltip=new r.MarkdownString(`**${t.statusBarItemName}** ${s.NE.Dash} ${t.description}\n\n---\n\nClick to Switch GitLens Modes`,!0),this._statusBarMode.accessibilityInformation={label:`GitLens Mode: ${t.statusBarItemName}\nClick to Switch GitLens Modes`},this._statusBarMode.show()}else this._statusBarMode?.dispose(),this._statusBarMode=void 0}if(te.D.changed(e,"statusBar"))if(te.D.get("statusBar.enabled")){const t="left"!==te.D.get("statusBar.alignment")?r.StatusBarAlignment.Right:r.StatusBarAlignment.Left;te.D.changed(e,"statusBar.alignment")&&this._statusBarBlame?.alignment!==t&&(this._statusBarBlame?.dispose(),this._statusBarBlame=void 0),this._statusBarBlame=this._statusBarBlame??r.window.createStatusBarItem("gitlens.blame",t,t===r.StatusBarAlignment.Right?1e3:0),this._statusBarBlame.name="GitLens Current Line Blame",this._statusBarBlame.command=te.D.get("statusBar.command"),te.D.changed(e,"statusBar.enabled")&&this.container.lineTracker.subscribe(this,this.container.lineTracker.onDidChangeActiveLines(this.onActiveLinesChanged,this))}else te.D.changed(e,"statusBar.enabled")&&(this.container.lineTracker.unsubscribe(this),this._statusBarBlame?.dispose(),this._statusBarBlame=void 0)}onActiveLinesChanged(e){let t=!(te.D.get("statusBar.reduceFlicker")&&"selection"===e.reason&&(e.pending||null!=e.selections));if(!e.pending&&null!=e.selections){const i=this.container.lineTracker.getState(e.selections[0].active);if(null!=i?.commit)return void this.updateBlame(e.editor,i);t=!0}t?this.clearBlame():this._statusBarBlame?.text.startsWith("$(git-commit)")&&(this._statusBarBlame.text=`$(watch)${this._statusBarBlame.text.substring(13)}`)}clearBlame(){this._selectedSha=void 0,this._cancellation?.cancel(),this._statusBarBlame?.hide()}async updateBlame(e,t){const i=te.D.get("statusBar");if(!i.enabled||null==this._statusBarBlame||!(0,G.PH)(e))return this._cancellation?.cancel(),void(this._selectedSha=void 0);const{commit:n}=t;if(null==n)return void this._cancellation?.cancel();if(this._selectedSha===n.sha&&!n.isUncommitted)return void(this._statusBarBlame?.text.startsWith("$(watch)")&&(this._statusBarBlame.text=`$(git-commit)${this._statusBarBlame.text.substring(8)}`));const o=(0,se.UH)();this._selectedSha=n.sha,this._cancellation?.cancel(),this._cancellation=new r.CancellationTokenSource;const a=this._cancellation.token;let c;switch(i.command){case je.ef.CopyRemoteCommitUrl:c="Click to Copy Remote Commit URL";break;case je.ef.CopyRemoteFileUrl:this._statusBarBlame.command=s.Gh.CopyRemoteFileUrl,c="Click to Copy Remote File Revision URL";break;case je.ef.DiffWithPrevious:this._statusBarBlame.command=s.Gh.DiffLineWithPrevious,c="Click to Open Line Changes with Previous Revision";break;case je.ef.DiffWithWorking:this._statusBarBlame.command=s.Gh.DiffLineWithWorking,c="Click to Open Line Changes with Working File";break;case je.ef.OpenCommitOnRemote:c="Click to Open Commit on Remote";break;case je.ef.OpenFileOnRemote:c="Click to Open Revision on Remote";break;case je.ef.RevealCommitInView:c="Click to Reveal Commit in the Side Bar";break;case je.ef.ShowCommitsInView:c="Click to Search for Commit";break;case je.ef.ShowQuickCommitDetails:c="Click to Show Commit";break;case je.ef.ShowQuickCommitFileDetails:c="Click to Show Commit (file)";break;case je.ef.ShowQuickCurrentBranchHistory:c="Click to Show Branch History";break;case je.ef.ShowQuickFileHistory:c="Click to Show File History";break;case je.ef.ToggleCodeLens:c="Click to Toggle Git CodeLens";break;case je.ef.ToggleFileBlame:c="Click to Toggle File Blame";break;case je.ef.ToggleFileChanges:null!=n.file&&(this._statusBarBlame.command=(0,at._N)({title:"Toggle File Changes",command:s.Gh.ToggleFileChanges,arguments:[n.file.uri,{type:"changes",context:{sha:n.sha,only:!1,selection:!1}}]})),c="Click to Toggle File Changes";break;case je.ef.ToggleFileChangesOnly:null!=n.file&&(this._statusBarBlame.command=(0,at._N)({title:"Toggle File Changes",command:s.Gh.ToggleFileChanges,arguments:[n.file.uri,{type:"changes",context:{sha:n.sha,only:!0,selection:!1}}]})),c="Click to Toggle File Changes";break;case je.ef.ToggleFileHeatmap:c="Click to Toggle File Heatmap"}this._statusBarBlame.tooltip=new r.MarkdownString(`Loading... \n\n---\n\n${c}`),this._statusBarBlame.accessibilityInformation={label:`${this._statusBarBlame.text}\n${c}`};const l=await this.container.git.getBestRemotesWithProviders(n.repoPath),[h]=l,u=te.D.get("defaultDateFormat"),d=Ee.i.has(i.format,"tips")||Ee.i.has(i.tooltipFormat,"tips")?this.container.git.getBranchesAndTagsTipsFn(n.repoPath):void 0,p=!n.isUncommitted&&h?.hasRichIntegration()&&i.pullRequests.enabled&&(Ee.i.has(i.format,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState")||Ee.i.has(i.tooltipFormat,"pullRequest","pullRequestAgo","pullRequestAgoOrDate","pullRequestDate","pullRequestState"));function m(e,t,r){e.text=`$(git-commit) ${Ee.i.fromTemplate(i.format,n,{dateFormat:null===i.dateFormat?u:i.dateFormat,getBranchAndTagTips:t,messageTruncateAtNewLine:!0,pullRequest:r,pullRequestPendingMessage:"PR $(watch)",remotes:l})}`,e.accessibilityInformation={label:`${e.text}\n${c}`}}async function g(e,t,r,s){return(0,xe.nN)(e,n,n.getGitUri(),n.lines[0].line,{autolinks:!0,cancellation:a,dateFormat:u,format:i.tooltipFormat,getBranchAndTagTips:t,pullRequest:r,pullRequests:p&&null!=r,remotes:l,timeout:s})}let f;if(p){const e=100;f=await(0,Be.Zo)(n.getAssociatedPullRequest(h),a,e,(async t=>{if("timedout"!==t.reason||null==this._statusBarBlame)return;C.Yd.debug(o,`${s.NE.Dot} pull request query took too long (over ${e} ms)`);const[i,r]=await Promise.allSettled([d,t.value]);if(a.isCancellationRequested||null==this._statusBarBlame)return;const n=(0,ae.Sb)(r),l=(0,ae.Sb)(i);C.Yd.debug(o,`${s.NE.Dot} pull request query completed; updating...`),m(this._statusBarBlame,l,n);const h=await g(this.container,l,n);null!=h&&(this._statusBarBlame.tooltip=h.appendMarkdown(`\n\n---\n\n${c}`))}))}const w=null!=d?await d:void 0;if(a.isCancellationRequested)return;m(this._statusBarBlame,w,f?.value),this._statusBarBlame.show();const v=await(0,Be.Zo)(g(this.container,w,f?.value,20),a,100,(async e=>{if("timedout"!==e.reason||null==this._statusBarBlame)return;const t=await e.value;null!=t&&(this._statusBarBlame.tooltip=t.appendMarkdown(`\n\n---\n\n${c}`))}));a.isCancellationRequested||v.paused||null==v.value||(this._statusBarBlame.tooltip=v.value.appendMarkdown(`\n\n---\n\n${c}`))}}di([(0,L.fF)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map((e=>`[${e.anchor}-${e.active}]`)).join(",")}, pending=${Boolean(e.pending)}, reason=${e.reason}`}})],StatusBarController.prototype,"onActiveLinesChanged",1),di([(0,L.fF)({args:{0:!1,1:e=>e.commit?.sha}})],StatusBarController.prototype,"updateBlame",1);var pi=Object.defineProperty,mi=Object.getOwnPropertyDescriptor,gi=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?mi(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&pi(t,i,s),s};const fi=Object.create(null),wi=[];class KeyboardScope{_mapping;constructor(e){this._mapping=e;for(const e in this._mapping)this._mapping[e]=this._mapping[e]??fi;wi.push(this._mapping)}async dispose(){const e=wi.indexOf(this._mapping),t=(0,se.UH)();(0,se.lH)(t,` • index=${e}`),e===wi.length-1?(wi.pop(),await this.updateKeyCommandsContext(wi[wi.length-1])):wi.splice(e,1)}_paused=!0;get paused(){return this._paused}async clearKeyCommand(e){const t=(0,se.UH)(),i=wi[wi.length-1];i===this._mapping&&null!=i[e]?(i[e]=void 0,await(0,ie.v)(`${s.m1}:key:${e}`,!1)):(0,se.lH)(t," • skipped")}async pause(e){if(this._paused)return;this._paused=!0;const t=Object.keys(this._mapping).reduce(((t,i)=>(t[i]=null==e||e.includes(i)?void 0:this._mapping[i],t)),Object.create(null));await this.updateKeyCommandsContext(t)}async resume(){this._paused&&(this._paused=!1,await this.updateKeyCommandsContext(this._mapping))}async start(){await this.resume()}async setKeyCommand(e,t){const i=(0,se.UH)(),r=wi[wi.length-1];if(r!==this._mapping)return void(0,se.lH)(i," • skipped");const n=Boolean(r[e]);r[e]=t,n||await(0,ie.v)(`${s.m1}:key:${e}`,!0)}async updateKeyCommandsContext(e){await Promise.all(s.XP.map((t=>(0,ie.v)(`${s.m1}:key:${t}`,Boolean(e?.[t])))))}}gi([(0,L.cM)({args:!1,prefix:e=>`${e.prefix}[${wi.length}]`})],KeyboardScope.prototype,"dispose",1),gi([(0,L.cM)({args:!1,prefix:(e,t)=>`${e.prefix}[${wi.length}](${t})`})],KeyboardScope.prototype,"clearKeyCommand",1),gi([(0,L.cM)({args:!1,prefix:e=>`${e.prefix}(paused=${e.instance._paused})`})],KeyboardScope.prototype,"pause",1),gi([(0,L.cM)({args:!1,prefix:e=>`${e.prefix}(paused=${e.instance._paused})`})],KeyboardScope.prototype,"resume",1),gi([(0,L.cM)({args:!1,prefix:(e,t)=>`${e.prefix}[${wi.length}](${t})`})],KeyboardScope.prototype,"setKeyCommand",1);class Keyboard{_disposable;constructor(){const e=s.XP.map((e=>(0,at.xR)(`${s.m1}.key.${e}`,(()=>this.execute(e)),this)));this._disposable=r.Disposable.from(...e)}dispose(){this._disposable.dispose()}createScope(e){return new KeyboardScope({...e})}async beginScope(e){const t=this.createScope(e);return await t.start(),t}async execute(e){const t=(0,se.UH)();if(wi.length)try{let i=wi[wi.length-1][e];if("function"==typeof i&&(i=await i()),"function"!=typeof i?.onDidPressKey)return void(0,se.lH)(t," • skipped, no callback");await i.onDidPressKey(e)}catch(e){C.Yd.error(e,t)}else(0,se.lH)(t," • skipped, no mappings")}}gi([(0,L.cM)({args:!1,prefix:(e,t)=>`${e.prefix}[${wi.length}](${void 0===t?"":Object.keys(t).join(",")})`})],Keyboard.prototype,"createScope",1),gi([(0,L.cM)({args:!1,prefix:(e,t)=>`${e.prefix}[${wi.length}](${void 0===t?"":Object.keys(t).join(",")})`})],Keyboard.prototype,"beginScope",1),gi([(0,L.cM)()],Keyboard.prototype,"execute",1);class TelemetryService{constructor(e){this.container=e,e.context.subscriptions.push(te.D.onDidChange((t=>{te.D.changed(t,"telemetry.enabled")&&this.ensureTelemetry(e)})),r.env.onDidChangeTelemetryEnabled((()=>this.ensureTelemetry(e)))),this.ensureTelemetry(e)}_enabled=!1;get enabled(){return this._enabled}provider;globalAttributes=new Map;eventQueue=[];dispose(){this.provider?.dispose(),this.provider=void 0}_initializationTimer;ensureTelemetry(e){if(this._enabled=r.env.isTelemetryEnabled&&te.D.get("telemetry.enabled",void 0,!0),!this._enabled)return null!=this._initializationTimer&&(clearTimeout(this._initializationTimer),this._initializationTimer=void 0),this.eventQueue.length=0,this.provider?.dispose(),void(this.provider=void 0);null==this._initializationTimer&&(this._initializationTimer=setTimeout((()=>this.initializeTelemetry(e)),7500))}async initializeTelemetry(e){if(null!=this._initializationTimer&&(clearTimeout(this._initializationTimer),this._initializationTimer=void 0),this.provider=new((await Promise.resolve().then(i.bind(i,2020))).OpenTelemetryProvider)({env:e.env,extensionId:e.id,extensionVersion:e.version,machineId:r.env.machineId,sessionId:r.env.sessionId,language:r.env.language,platform:(0,Ke.Xf)(),vscodeEdition:r.env.appName,vscodeHost:r.env.appHost,vscodeRemoteName:r.env.remoteName??"",vscodeShell:r.env.shell,vscodeUIKind:String(r.env.uiKind),vscodeVersion:r.version},(0,Re.Nx)(),e.debugging),this.eventQueue.length){const e=[...this.eventQueue];this.eventQueue.length=0;for(const{type:t,name:i,data:r,global:n}of e)"sendEvent"===t&&(this.provider.setGlobalAttributes(n),this.provider.sendEvent(i,vi(r)))}this.provider.setGlobalAttributes(this.globalAttributes)}sendEvent(e,t,i,r){this._enabled&&(null!=this.provider?this.provider.sendEvent(e,vi(t),i,r):this.eventQueue.push({type:"sendEvent",name:e,data:t,global:new Map([...this.globalAttributes]),startTime:i??Date.now(),endTime:r??Date.now()}))}startEvent(e,t,i){if(this._enabled){if(null!=this.provider){const r=this.provider.startEvent(e,vi(t),i);return{dispose:()=>r?.end()}}return i=i??Date.now(),{dispose:()=>this.sendEvent(e,t,i,Date.now())}}}setGlobalAttribute(e,t){null==t?this.globalAttributes.delete(e):this.globalAttributes.set(e,t),this.provider?.setGlobalAttributes(this.globalAttributes)}setGlobalAttributes(e){for(const[t,i]of Object.entries(e))null==i?this.globalAttributes.delete(t):this.globalAttributes.set(t,i);this.provider?.setGlobalAttributes(this.globalAttributes)}deleteGlobalAttribute(e){this.globalAttributes.delete(e),this.provider?.setGlobalAttributes(this.globalAttributes)}}function vi(e){if(null==e)return;const t=Object.create(null);for(const[i,r]of Object.entries(e))null!=r&&(t[i]=r);return t}class UsageTracker{constructor(e,t){this.container=e,this.storage=t}_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}dispose(){}get(e){return this.storage.get("usages")?.[e]}async reset(e){let t=this.storage.get("usages");if(null!=t){if(null==e)return await this.storage.delete("usages"),void this._onDidChange.fire(void 0);t=(0,Gt.iC)(t,e,void 0),await this.storage.store("usages",t),this._onDidChange.fire({key:e,usage:void 0})}}async track(e){let t=this.storage.get("usages");null==t&&(t=Object.create(null));const i=Date.now();let r=t[e];null==r?(r={count:0,firstUsedAt:i,lastUsedAt:i},t[e]=r):(r.count!==Number.MAX_SAFE_INTEGER&&r.count++,r.lastUsedAt=i),this.container.telemetry.sendEvent("usage/track",{"usage.key":e,"usage.count":r.count}),await this.storage.store("usages",t),this._onDidChange.fire({key:e,usage:r})}}const yi=/\b(g(?:it)?\b\s*)\b(branch|checkout|cherry-pick|fetch|grep|log|merge|pull|push|rebase|reset|revert|show|stash|status|tag)\b/gi,bi=/\b((?!.*\/\.)(?!.*\.\.)(?!.*\/\/)(?!.*@\{)[^\000-\037\177 ,~^:?*[\\]+[^ ./])\b/gi,Ci=/^[0-9a-f]{7,40}\.\.\.?[0-9a-f]{7,40}$/,Ai=/^[0-9a-f]{7,40}$/;class GitTerminalLinkProvider{constructor(e){this.container=e,this.disposable=r.window.registerTerminalLinkProvider(this)}disposable;dispose(){this.disposable.dispose()}async provideTerminalLinks(e){if(0===e.line.trim().length)return[];const t=this.container.git.highlander?.path;if(!t)return[];const i=te.D.get("terminalLinks.showDetailsView"),r=[];let n,o;const a=new RegExp(bi,bi.flags),c=new RegExp(yi,yi.flags);let l;for(;;){if(l=c.exec(e.line),null!=l){const[e,t,i]=l,n={startIndex:l.index+t.length,length:i.length,tooltip:"Open in Git Command Palette",command:{command:s.Gh.GitCommands,args:{command:i}}};r.push(n)}if(l=a.exec(e.line),null==l)break;const[h,d]=l;if("HEAD"===d.toUpperCase()){const e={startIndex:l.index,length:d.length,tooltip:"Show HEAD",command:{command:s.Gh.ShowQuickBranchHistory,args:{branch:"HEAD",repoPath:t}}};r.push(e);continue}void 0===n&&(n=await this.container.git.getBranches(t));let p=n.values.find((e=>e.name===d));if(null==p&&(p=n.values.find((e=>(0,u.S3)(e.name)===d))),null!=p){const e={startIndex:l.index,length:d.length,tooltip:"Show Branch",command:{command:s.Gh.ShowQuickBranchHistory,args:{repoPath:t,branch:p.name}}};r.push(e);continue}void 0===o&&(o=await this.container.git.getTags(t));const m=o.values.find((e=>e.name===d));if(null==m){if(Ai.test(d)){if(await this.container.git.validateReference(t,d)){const e={startIndex:l.index,length:d.length,tooltip:"Show Commit",command:i?{command:s.Gh.ShowInDetailsView,args:{repoPath:t,refs:[d]}}:{command:s.Gh.ShowQuickCommit,args:{repoPath:t,sha:d}}};r.push(e)}}else if(Ci.test(d)){const e={startIndex:l.index,length:d.length,tooltip:"Show Commits",command:{command:s.Gh.GitCommands,args:{command:"log",state:{repo:t,reference:(0,f.xB)(d,t,{refType:"revision"})}}}};r.push(e)}}else{const e={startIndex:l.index,length:d.length,tooltip:"Show Tag",command:{command:s.Gh.ShowQuickBranchHistory,args:{repoPath:t,tag:m.name}}};r.push(e)}}return r}handleTerminalLink(e){r.commands.executeCommand(e.command.command,e.command.args)}}var Si=Object.defineProperty,Pi=Object.getOwnPropertyDescriptor,ki=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Pi(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Si(t,i,s),s};class LineTracker{_onDidChangeActiveLines=new r.EventEmitter;get onDidChangeActiveLines(){return this._onDidChangeActiveLines.event}_disposable;_editor;_state=new Map;dispose(){for(const e of this._subscriptions.keys())this.unsubscribe(e)}onActiveTextEditorChanged(e){e!==this._editor&&(null==e||(0,G.PH)(e))&&(this._editor=e,this._selections=Di(e?.selections),this.notifyLinesChanged("editor"))}onTextEditorSelectionChanged(e){if(this._editor!==e.textEditor&&!(0,G.PH)(e.textEditor))return;const t=Di(e.selections);this._editor===e.textEditor&&this.includes(t)||(this._editor=e.textEditor,this._selections=t,this.notifyLinesChanged(this._editor===e.textEditor?"selection":"editor"))}getState(e){return this._state.get(e)}resetState(e){null==e?this._state.clear():this._state.delete(e)}setState(e,t){this._state.set(e,t)}_selections;get selections(){return this._selections}includes(e,t){if("number"!=typeof e)return Ri(e,this._selections);if(null==this._selections||0===this._selections.length)return!1;const i=e,r=t?.activeOnly??!0;for(const e of this._selections)if(i===e.active||!r&&(e.anchor>=i&&i>=e.active||e.active>=i&&i>=e.anchor))return!0;return!1}refresh(){this.notifyLinesChanged("editor")}_subscriptions=new Map;subscribed(e){return this._subscriptions.has(e)}subscribe(e,t){const i=(0,se.UH)(),n={dispose:()=>this.unsubscribe(e)},s=0===this._subscriptions.size;let o=this._subscriptions.get(e);return null==o?(o=[t],this._subscriptions.set(e,o)):o.push(t),s&&(C.Yd.debug(i,"Starting line tracker..."),this._disposable=r.Disposable.from(r.window.onDidChangeActiveTextEditor((0,he.Ds)(this.onActiveTextEditorChanged,0),this),r.window.onDidChangeTextEditorSelection(this.onTextEditorSelectionChanged,this),this.onStart?.()??{dispose:()=>{}}),queueMicrotask((()=>this.onActiveTextEditorChanged(r.window.activeTextEditor)))),n}unsubscribe(e){const t=this._subscriptions.get(e);if(null!=t){this._subscriptions.delete(e);for(const e of t)e.dispose();0===this._subscriptions.size&&(this._fireLinesChangedDebounced?.cancel(),this._disposable?.dispose(),this._disposable=void 0)}}_suspended=!1;get suspended(){return this._suspended}resume(e){(e?.force||this._suspended)&&(this._suspended=!1,this.onResume?.(),this.notifyLinesChanged("editor"))}suspend(e){!e?.force&&this._suspended||(this._suspended=!0,this.onSuspend?.(),this.notifyLinesChanged("editor"))}fireLinesChanged(e){this._onDidChangeActiveLines.fire(e)}_fireLinesChangedDebounced;notifyLinesChanged(e){"editor"===e&&this.resetState();const t={editor:this._editor,selections:this.selections,reason:e};null!=t.selections?(null==this._fireLinesChangedDebounced&&(this._fireLinesChangedDebounced=(0,he.Ds)((e=>{e.editor===r.window.activeTextEditor&&Ri(e.selections,Di(e.editor?.selections))&&this.fireLinesChanged(e)}),250)),this._fireLinesChangedDebounced.pending?.()||this.fireLinesChanged({...t,pending:!0}),this._fireLinesChangedDebounced(t)):queueMicrotask((()=>{t.editor===r.window.activeTextEditor&&(this._fireLinesChangedDebounced?.cancel(),this.fireLinesChanged(t))}))}}function Ri(e,t){if(null==e&&null==t)return!0;if(null==e||null==t||e.length!==t.length)return!1;let i;return e.every(((e,r)=>(i=t[r],e.active===i.active&&e.anchor===i.anchor)))}function Di(e){return e?.map((e=>({active:e.active.line,anchor:e.anchor.line})))}ki([(0,L.fF)({args:!1})],LineTracker.prototype,"subscribe",1),ki([(0,L.fF)({args:!1})],LineTracker.prototype,"unsubscribe",1),ki([(0,L.fF)()],LineTracker.prototype,"resume",1),ki([(0,L.fF)()],LineTracker.prototype,"suspend",1);var _i=Object.defineProperty,Ti=Object.getOwnPropertyDescriptor,Fi=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Ti(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&_i(t,i,s),s};class GitLineTracker extends LineTracker{constructor(e){super(),this.container=e}async fireLinesChanged(e){let t=!1;this.suspended||e.pending||null==e.selections||null==e.editor||(t=await this.updateState(e.selections,e.editor)),super.fireLinesChanged(t?e:{...e,selections:void 0,suspended:this.suspended})}_subscriptionOnlyWhenActive;onStart(){return this.onResume(),r.Disposable.from({dispose:()=>this.onSuspend()},this.container.tracker.onDidChangeBlameState(this.onBlameStateChanged,this),this.container.tracker.onDidChangeDirtyState(this.onDirtyStateChanged,this),this.container.tracker.onDidTriggerDirtyIdle(this.onDirtyIdleTriggered,this))}onResume(){null==this._subscriptionOnlyWhenActive&&(this._subscriptionOnlyWhenActive=this.container.tracker.onDidChangeContent(this.onContentChanged,this))}onSuspend(){this._subscriptionOnlyWhenActive?.dispose(),this._subscriptionOnlyWhenActive=void 0}onBlameStateChanged(e){this.notifyLinesChanged("editor")}onContentChanged(e){e.contentChanges.some((e=>this.selections?.some((t=>e.range.end.line>=t.active&&t.active>=e.range.start.line||e.range.start.line>=t.active&&t.active>=e.range.end.line))))&&this.notifyLinesChanged("editor")}onDirtyIdleTriggered(e){const t=te.D.get("advanced.blame.sizeThresholdAfterEdit");t>0&&e.document.lineCount>t||this.resume()}onDirtyStateChanged(e){e.dirty?this.suspend():this.resume({force:!0})}async updateState(e,t){const i=(0,se.UH)();if(!this.includes(e))return(0,se.lH)(i,` ${s.NE.Dot} lines no longer match`),!1;const r=await this.container.tracker.getOrAdd(t.document);if(!r.isBlameable)return(0,se.lH)(i,` ${s.NE.Dot} document is not blameable`),!1;if(1===e.length){const n=await this.container.git.getBlameForLine(r.uri,e[0].active,t?.document);if(null==n)return(0,se.lH)(i,` ${s.NE.Dot} blame failed`),!1;null!=n.commit&&n.commit.file,this.setState(n.line.line-1,{commit:n.commit})}else{const n=await this.container.git.getBlame(r.uri,t.document);if(null==n)return(0,se.lH)(i,` ${s.NE.Dot} blame failed`),!1;for(const t of e){const e=n.lines[t.active],i=n.commits.get(e.sha);null!=i&&i.file,null==i?this.resetState(t.active):this.setState(t.active,{commit:i})}}return this.includes(e)?r.isBlameable?(t.document.isDirty&&r.setForceDirtyStateChangeOnNextDocumentChange(),!0):((0,se.lH)(i,` ${s.NE.Dot} document is not blameable`),!1):((0,se.lH)(i,` ${s.NE.Dot} lines no longer match`),!1)}}Fi([(0,L.fF)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}, blameable=${e.blameable}`}})],GitLineTracker.prototype,"onBlameStateChanged",1),Fi([(0,L.fF)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}`}})],GitLineTracker.prototype,"onContentChanged",1),Fi([(0,L.fF)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}`}})],GitLineTracker.prototype,"onDirtyIdleTriggered",1),Fi([(0,L.fF)({args:{0:e=>`editor/doc=${e.editor.document.uri.toString(!0)}, dirty=${e.dirty}`}})],GitLineTracker.prototype,"onDirtyStateChanged",1),Fi([(0,L.fF)({args:{0:e=>e?.map((e=>e.active)).join(","),1:e=>e.document.uri.toString(!0)},exit:!0})],GitLineTracker.prototype,"updateState",1);var $i=i(4794),Oi=i(4043);class DeepLinkService{constructor(e){this.container=e,this._context={state:Oi.mg.Idle},this._disposables.push(e.uri.onDidReceiveUri((async e=>{const t=(0,Oi.lX)(e);if(null!=t&&this._context.state===Oi.mg.Idle){if(this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories,!t.type||!t.mainId&&!t.remoteUrl&&!t.repoPath)return r.window.showErrorMessage("Unable to resolve link"),void C.Yd.warn(`Unable to resolve link - missing basic properties: ${e.toString()}`);if(!Object.values(Oi._n).includes(t.type))return r.window.showErrorMessage("Unable to resolve link"),void C.Yd.warn(`Unable to resolve link - unknown link type: ${e.toString()}`);if(t.type!==Oi._n.Repository&&null==t.targetId&&null==t.mainId)return r.window.showErrorMessage("Unable to resolve link"),void C.Yd.warn(`Unable to resolve link - no main/target id provided: ${e.toString()}`);if(t.type===Oi._n.Comparison&&null==t.secondaryTargetId)return r.window.showErrorMessage("Unable to resolve link"),void C.Yd.warn(`Unable to resolve link - no secondary target id provided: ${e.toString()}`);this.setContextFromDeepLink(t,e.toString()),await this.processDeepLink()}})));const t=this.container.storage.get("deepLinks:pending");null!=t&&(this.container.storage.delete("deepLinks:pending"),this.processPendingDeepLink(t))}_disposables=[];_context;_onDeepLinkProgressUpdated=new r.EventEmitter;dispose(){r.Disposable.from(...this._disposables).dispose()}resetContext(){this._context={state:Oi.mg.Idle,url:void 0,mainId:void 0,repo:void 0,remoteUrl:void 0,remote:void 0,secondaryRemote:void 0,repoPath:void 0,targetId:void 0,secondaryTargetId:void 0,secondaryRemoteUrl:void 0,targetType:void 0,targetSha:void 0}}setContextFromDeepLink(e,t){this._context={...this._context,mainId:e.mainId,targetType:e.type,url:t,remoteUrl:e.remoteUrl,repoPath:e.repoPath,targetId:e.targetId,secondaryTargetId:e.secondaryTargetId,secondaryRemoteUrl:e.secondaryRemoteUrl}}async processPendingDeepLink(e){if(null==e.url)return;const t=(0,Oi.lX)(r.Uri.parse(e.url));if(null==t)return;this._context={state:Oi.mg.CloneOrAddRepo},this.setContextFromDeepLink(t,e.url);let i=Oi.WA.OpenRepo;if(this.container.git.isDiscoveringRepositories&&await this.container.git.isDiscoveringRepositories,null!=e.repoPath){const t=r.Uri.parse(e.repoPath);try{const e=await this.container.git.getOrOpenRepository(t,{detectNested:!1});null!=e&&(this._context.repo=e,i=Oi.WA.RepoOpened)}catch{}}queueMicrotask((()=>{this.processDeepLink(i)}))}async getShaForBranch(e){const{repo:t,remote:i,secondaryRemote:r}=this._context;if(!t)return;let n=e;null==i||n.startsWith(`${i.name}/`)?null==r||n.startsWith(`${r.name}/`)||(n=`${r.name}/${n}`):n=`${i.name}/${n}`;let s=await t.getBranch(n);if(null!=s?.sha)return s.sha;if(e.includes(":")){const[i,r]=e.split(":");if(null!=i&&null!=n){const[e,o]=i.split("/");if(null!=e&&null!=o){const i=await t.getRemotes();for(const o of i)if(o.provider?.owner===e&&(n=`${o.name}/${r}`,s=await t.getBranch(n),null!=s?.sha))return s.sha}}}return s=await t.getBranch(e),null!=s?.sha?s.sha:void 0}async getShaForTag(e){const{repo:t}=this._context;if(!t)return;const i=await t.getTag(e);return null!=i?.sha?i.sha:void 0}async getShaForCommit(e){const{repo:t}=this._context;if(t)return await this.container.git.validateReference(t.path,e)?e:void 0}async getShasForComparison(e,t){const i=await this.getComparisonRefSha(e);if(null==i)return;const r=await this.getComparisonRefSha(t);return null!=r?[i,r]:void 0}async getComparisonRefSha(e){if(""===e)return e;if((0,f.D3)(e))return this.getShaForCommit(e);const t=e.toLocaleLowerCase();if(!t.startsWith("refs/tags/")&&!t.startsWith("tags/")){const t=await this.getShaForBranch(e);if(null!=t)return t}const i=await this.getShaForTag(e);return null!=i?i:this.getShaForCommit(e)}async getShasForTargets(){const{repo:e,targetType:t,targetId:i,secondaryTargetId:r}=this._context;if(null!=e&&t!==Oi._n.Repository&&null!=i){if(t===Oi._n.Branch)return this.getShaForBranch(i);if(t===Oi._n.Tag)return this.getShaForTag(i);if(t===Oi._n.Commit)return this.getShaForCommit(i);if(t===Oi._n.Comparison){if(null==r)return;return this.getShasForComparison(i,r)}}}async showOpenTypePrompt(e){const t=[{title:"Open Folder",action:"folder"},{title:"Open Workspace",action:"workspace"}];null!=this._context.remoteUrl&&t.push({title:"Clone",action:"clone"}),e?.includeCurrent&&t.push({title:"Use Current Window",action:"current"}),t.push({title:"Cancel",isCloseAffordance:!0});const i=await r.window.showInformationMessage(e?.customMessage??"No matching repository found. Please choose an option.",{modal:!0},...t);return i?.action}async showOpenLocationPrompt(e){const t=[{title:"Open",action:"currentWindow"},{title:"Open in New Window",action:"newWindow"}];"workspace"!==e&&t.push({title:"Add to Workspace",action:"addToWorkspace"}),t.push({title:"Cancel",isCloseAffordance:!0});const i=await r.window.showInformationMessage(`Please choose an option to open the repository ${"clone"===e?"after cloning":e}.`,{modal:!0},...t);return i?.action}async showFetchPrompt(){const e=await r.window.showInformationMessage("The link target(s) couldn't be found. Would you like to fetch from the remote?",{modal:!0},{title:"Fetch",action:!0},{title:"Cancel",isCloseAffordance:!0});return e?.action||!1}async showAddRemotePrompt(e,t){let i;const n=await r.window.showInformationMessage(`Unable to find a remote for '${e}'. Would you like to add a new remote?`,{modal:!0},{title:"Yes"},{title:"No",isCloseAffordance:!0});return"Yes"!==n?.title||(i=await r.window.showInputBox({prompt:"Enter a name for the remote",validateInput:e=>e?t.includes(e)?"A remote with that name already exists":void 0:"A name is required"})),i}async processDeepLink(e=Oi.WA.DeepLinkEventFired){let t="",i=e;if(i===Oi.WA.DeepLinkCancelled&&this._context.state===Oi.mg.Idle)return;let n=[];const{targetType:o}=this._context;for(queueMicrotask((()=>{r.window.withProgress({cancellable:!0,location:r.ProgressLocation.Notification,title:`Opening ${(0,Oi.$k)(o??Oi._n.Repository)} link...`},((e,t)=>(e.report({increment:0}),new Promise((i=>{t.onCancellationRequested((()=>{queueMicrotask((()=>this.processDeepLink(Oi.WA.DeepLinkCancelled))),i()})),this._onDeepLinkProgressUpdated.event((({message:t,increment:r})=>{e.report({message:t,increment:r}),100===r&&i()}))})))))}));;){this._context.state=Oi.eT[this._context.state][i];const{state:e,mainId:o,repo:a,url:c,remoteUrl:l,secondaryRemoteUrl:h,remote:u,secondaryRemote:d,repoPath:p,targetId:m,secondaryTargetId:g,targetSha:w,secondaryTargetSha:v,targetType:y}=this._context;switch(this._onDeepLinkProgressUpdated.fire(Oi.gn[e]),e){case Oi.mg.Idle:return i===Oi.WA.DeepLinkErrored&&(r.window.showErrorMessage("Unable to resolve link"),C.Yd.warn(`Unable to resolve link - ${t}: ${c}`)),void this.resetContext();case Oi.mg.TypeMatch:if(y===Oi._n.Workspace)i=Oi.WA.LinkIsWorkspaceType;else i=Oi.WA.LinkIsRepoType;break;case Oi.mg.RepoMatch:case Oi.mg.AddedRepoMatch:{if(!o&&!l&&!p){i=Oi.WA.DeepLinkErrored,t="No repository id, remote url or path was provided.";break}let r="",s="";null!=l&&([,r,s]=(0,$i.Sk)(l));for(const e of this.container.git.repositories){if(null!=p&&(0,oe.AH)(e.path.toLowerCase())===(0,oe.AH)(p.toLowerCase())){this._context.repo=e,i=Oi.WA.RepoMatched;break}if(null!=r&&null!=s){const t=await e.getRemotes({filter:e=>e.matches(r,s)});if(t.length>0){this._context.repo=e,this._context.remote=t[0],i=Oi.WA.RepoMatched;break}}if(null!=o&&"-"!==o&&await this.container.git.validateReference(e.path,o)){this._context.repo=e,i=Oi.WA.RepoMatched;break}}if(!this._context.repo&&e===Oi.mg.RepoMatch&&(n=await this.container.repositoryPathMapping.getLocalRepoPaths({remoteUrl:l}),n.length>0)){for(const e of this.container.git.repositories)if(n.some((t=>(0,oe.AH)(e.path.toLowerCase())===(0,oe.AH)(t.toLowerCase())))){this._context.repo=e,i=Oi.WA.RepoMatched;break}if(null==this._context.repo){i=Oi.WA.RepoMatchedInLocalMapping;break}}this._context.repo||(e===Oi.mg.RepoMatch?i=Oi.WA.RepoMatchFailed:(i=Oi.WA.DeepLinkErrored,t="No matching repository found."));break}case Oi.mg.CloneOrAddRepo:{if(!o&&!l&&!p){i=Oi.WA.DeepLinkErrored,t="Missing repository id, remote url and path.";break}let e,s,a;if(n.length>0){if(e=await r.window.showQuickPick([...n,"Choose a different location"],{placeHolder:"Matching repository found. Choose a location to open it."}),null==e){i=Oi.WA.DeepLinkCancelled;break}"Choose a different location"!==e&&(a=r.Uri.file(e),s="folder")}if(null==s&&(s=await this.showOpenTypePrompt({customMessage:"Choose a different location"===e?"Please choose an option to open the repository":void 0})),!s){i=Oi.WA.DeepLinkCancelled;break}const c=await this.showOpenLocationPrompt(s);if(!c){i=Oi.WA.DeepLinkCancelled;break}if(null==a&&(a=(await r.window.showOpenDialog({title:`Choose a ${"workspace"===s?"workspace":"folder"} to ${"clone"===s?"clone the repository to":"open the repository"}`,canSelectFiles:"workspace"===s,canSelectFolders:"workspace"!==s,canSelectMany:!1,..."workspace"===s&&{filters:{Workspaces:["code-workspace"]}}}))?.[0]),!a){i=Oi.WA.DeepLinkCancelled;break}if(null!=a&&null!=l&&"clone"===s){let e;try{e=await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Cloning repository for link: ${this._context.url}}`},(async()=>this.container.git.clone(l,a?.fsPath??"")))}catch{i=Oi.WA.DeepLinkErrored,t="Unable to clone repository";break}if(!e){i=Oi.WA.DeepLinkErrored,t="Unable to clone repository";break}a=r.Uri.file(e)}if("current"!==s&&"workspace"!==s&&!n.includes(a.fsPath)){const e=await this.container.git.getOrOpenRepository(a,{closeOnOpen:!0,detectNested:!1});null!=e&&await this.container.repositoryPathMapping.writeLocalRepoPath({remoteUrl:l},e.uri.fsPath)}"addToWorkspace"===c&&(r.workspace.workspaceFolders?.length||0)>1?i=Oi.WA.OpenRepo:(await this.container.storage.store("deepLinks:pending",{url:this._context.url,repoPath:a.toString()}),i=Oi.WA.DeepLinkStored),(0,G.ic)(a,{location:c});break}case Oi.mg.OpeningRepo:return void this._disposables.push((0,le.IH)(this.container.git.onDidChangeRepositories)((()=>{queueMicrotask((()=>this.processDeepLink(Oi.WA.RepoAdded)))})));case Oi.mg.RemoteMatch:if(p&&a&&!l&&!h){i=Oi.WA.RemoteMatchUnneeded;break}if(!a||!l&&!h){i=Oi.WA.DeepLinkErrored,t="Missing repository or remote url.";break}if(l&&!u){const e=await a.getRemotes({filter:e=>e.url===l});e.length>0&&(this._context.remote=e[0])}if(h&&!d){const e=await a.getRemotes({filter:e=>e.url===h});e.length>0&&(this._context.secondaryRemote=e[0])}i=l&&!this._context.remote||h&&!this._context.secondaryRemote?Oi.WA.RemoteMatchFailed:Oi.WA.RemoteMatched;break;case Oi.mg.AddRemote:{if(!a||!l&&!h){i=Oi.WA.DeepLinkErrored,t="Missing repository or remote url.";break}let e,r;if(l&&!u&&(e=await this.showAddRemotePrompt(l,(await a.getRemotes()).map((e=>e.name))),e)){try{await a.addRemote(e,l,{fetch:!0})}catch{i=Oi.WA.DeepLinkErrored,t="Failed to add remote.";break}if([this._context.remote]=await a.getRemotes({filter:e=>e.url===l}),!this._context.remote){i=Oi.WA.DeepLinkErrored,t="Failed to add remote.";break}}if(h&&!d&&(r=await this.showAddRemotePrompt(h,(await a.getRemotes()).map((e=>e.name))),r)){try{await a.addRemote(r,h,{fetch:!0})}catch{i=Oi.WA.DeepLinkErrored,t="Failed to add remote.";break}if([this._context.secondaryRemote]=await a.getRemotes({filter:e=>e.url===h}),!this._context.secondaryRemote){i=Oi.WA.DeepLinkErrored,t="Failed to add remote.";break}}this._context.secondaryRemote&&!this._context.remote&&(this._context.remote=this._context.secondaryRemote),e||r?this._context.remote||(i=Oi.WA.DeepLinkErrored,t="Failed to add remote."):i=Oi.WA.DeepLinkCancelled,i=Oi.WA.RemoteAdded;break}case Oi.mg.TargetMatch:case Oi.mg.FetchedTargetMatch:if(!a||!y){i=Oi.WA.DeepLinkErrored,t="Missing repository or target type.";break}if(y===Oi._n.Repository){i=Oi.WA.TargetMatched;break}if(y===Oi._n.Comparison?[this._context.targetSha,this._context.secondaryTargetSha]=await this.getShasForTargets()??[]:this._context.targetSha=await this.getShasForTargets(),null==this._context.targetSha||null==this._context.secondaryTargetSha&&y===Oi._n.Comparison){e===Oi.mg.TargetMatch&&null!=u?i=Oi.WA.TargetMatchFailed:(i=Oi.WA.DeepLinkErrored,t=`No matching ${null==w?"target":"secondary target"} found.`);break}i=y===Oi._n.Comparison?Oi.WA.TargetsMatched:Oi.WA.TargetMatched;break;case Oi.mg.Fetch:if(!a||!u){i=Oi.WA.DeepLinkErrored,t="Missing repository or remote.";break}if(!await this.showFetchPrompt()){i=Oi.WA.DeepLinkCancelled;break}try{await a.fetch({remote:u.name,progress:!0})}catch{i=Oi.WA.DeepLinkErrored,t="Error fetching remote.";break}if(d&&d.name!==u.name)try{await a.fetch({remote:d.name,progress:!0})}catch{}i=Oi.WA.TargetFetched;break;case Oi.mg.OpenGraph:if(!a||!y){i=Oi.WA.DeepLinkErrored,t="Missing repository or target type.";break}if(y===Oi._n.Repository){await(0,at.P0)(s.Gh.ShowInCommitGraph,a),i=Oi.WA.DeepLinkResolved;break}if(!w){i=Oi.WA.DeepLinkErrored,t=`Cannot find target ${y} in repo.`;break}await(0,at.P0)(s.Gh.ShowInCommitGraph,{ref:(0,f.xB)(w,a.path)}),i=Oi.WA.DeepLinkResolved;break;case Oi.mg.OpenComparison:if(!a){i=Oi.WA.DeepLinkErrored,t="Missing repository.";break}if(null==m||null==g||null==w||null==v){i=Oi.WA.DeepLinkErrored,t="Missing target or secondary target.";break}await this.container.searchAndCompareView.compare(a.path,""===g||(0,f.D3)(g)?g:{label:g,ref:v},""===m||(0,f.D3)(m)?m:{label:m,ref:w}),i=Oi.WA.DeepLinkResolved;break;case Oi.mg.OpenWorkspace:if(!o){i=Oi.WA.DeepLinkErrored,t="Missing workspace id.";break}await this.container.workspacesView.revealWorkspaceNode(o,{select:!0,focus:!0,expand:!0}),i=Oi.WA.DeepLinkResolved;break;default:i=Oi.WA.DeepLinkErrored,t="Unknown state."}}}async copyDeepLinkUrl(e,t,i,n){const s=await("string"==typeof e?null!=t?this.generateDeepLinkUrl(e,t,i,n):this.generateDeepLinkUrl(e):this.generateDeepLinkUrl(e,t));await r.env.clipboard.writeText(s.toString())}async generateDeepLinkUrl(e,t,i,n){let s,o,a;const c=te.D.get("deepLinks.schemeOverride"),l=c?!0===c?r.env.uriScheme:c:"vscode";let h="";if("dev"===this.container.env?h="dev.":"staging"===this.container.env&&(h="staging."),null==t&&"string"==typeof e)return new URL(`https://${h}gitkraken.dev/link/workspaces/${e}`);const d="string"!=typeof e?e.repoPath:e,p=await this.container.git.getUniqueRepositoryId(d)??"-";if("string"!=typeof e)switch(e.refType){case"branch":s=Oi._n.Branch,o=e.remote?(0,u.S3)(e.name):e.name;break;case"revision":s=Oi._n.Commit,o=e.ref;break;case"tag":s=Oi._n.Tag,o=e.name}let m;null!=i&&null!=n&&(s=Oi._n.Comparison,o=i.label??i.ref,a=n.label??n.ref),m=s===Oi._n.Comparison?`/${s}/${a}...${o}`:null!=s&&s!==Oi._n.Repository?`/${s}/${o}`:"";const g=new URL(`${l}://${this.container.context.extension.id}/link/${Oi._n.Repository}/${p}${m}`);null!=t&&g.searchParams.set("url",t);return new URL(`https://${h}gitkraken.dev/link/${encodeURIComponent(Buffer.from(g.href).toString("base64"))}`)}}var Ii=Object.defineProperty,Ei=Object.getOwnPropertyDescriptor;class UriService{constructor(e){this.container=e,this._disposable=r.window.registerUriHandler(this)}_disposable;_onDidReceiveAuthenticationUri=new r.EventEmitter;get onDidReceiveAuthenticationUri(){return this._onDidReceiveAuthenticationUri.event}_onDidReceiveUri=new r.EventEmitter;get onDidReceiveUri(){return this._onDidReceiveUri.event}dispose(){this._disposable.dispose()}handleUri(e){const[,t]=e.path.split("/");t!==Dt?this._onDidReceiveUri.fire(e):this._onDidReceiveAuthenticationUri.fire(e)}}((e,t,i,r)=>{for(var n,s=r>1?void 0:r?Ei(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);r&&s&&Ii(t,i,s)})([(0,L.cM)({args:{0:e=>e.with({query:""}).toString(!0)}})],UriService.prototype,"handleUri",1);var xi=i(4481),Bi=i(6586),Wi=i(6922);class BranchTrackingStatusFilesNode extends Wi.Re{constructor(e,t,i,r,n){super(h.YY.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.status=r,this.direction=n,this.updateContext({branch:i,branchStatus:r,branchStatusUpstreamType:n}),this._uniqueId=(0,Wi.tO)("tracking-status-files",this.context)}get repoPath(){return this.status.repoPath}async getChildren(){const e=await this.view.container.git.getLog(this.repoPath,{limit:0,ref:(0,f.oI)(this.status.upstream,this.branch.ref,"behind"===this.direction?"...":"..")});let t;null!=e?(await Promise.allSettled((0,ne.UI)((0,ne.hX)(e.commits.values(),(e=>null==e.files)),(e=>e.ensureFullDetails()))),t=[...(0,ne.VS)(e.commits.values(),(e=>e.files?.map((t=>({...t,commit:e})))??[]))]):t=[],t.sort(((e,t)=>t.commit.date.getTime()-e.commit.date.getTime()));const i=(0,ot.vM)(t,(e=>e.path));let r=Object.values(i).map((e=>new Bi.q(this.view,this,e[e.length-1],this.repoPath,e.map((e=>e.commit)),this.direction)));if("list"!==this.view.config.files.layout){const e=(0,ot.Mo)(r,(e=>e.uri.relativePath.split("/")),((...e)=>(0,oe.AH)((0,oe.RQ)(...e))),this.view.config.files.compact);r=new xi.Y(this.view,this,e,this.repoPath,"",void 0,!1).getChildren()}else r.sort(((e,t)=>e.priority-t.priority||(0,E.dm)(e.label,t.label)));return r}async getTreeItem(){const e=await this.view.container.git.getChangedFilesCount(this.repoPath,`${this.status.upstream}${"behind"===this.direction?"..":"..."}`),t=e?.changedFiles??0,i=`${(0,E._6)("file",t)} changed`,n=new r.TreeItem(i,r.TreeItemCollapsibleState.Collapsed);return n.id=this.id,n.contextValue=Wi.Td.BranchStatusFiles,n}}var Ni=i(2925),Mi=i(21),Li=i(4741),Ui=Object.defineProperty,Gi=Object.getOwnPropertyDescriptor,Hi=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Gi(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Ui(t,i,s),s};class BranchTrackingStatusNode extends Wi.Re{constructor(e,t,i,r,n,s=!1,o){super(h.YY.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.status=r,this.upstreamType=n,this.root=s,this.options=o,this.updateContext({branch:i,branchStatus:r,branchStatusUpstreamType:n,root:s}),this._uniqueId=(0,Wi.tO)("tracking-status",this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}get repoPath(){return this.uri.repoPath}async getChildren(){if("same"===this.upstreamType||"none"===this.upstreamType)return[];const e=await this.getLog();if(null==e)return[];let t;if("ahead"===this.upstreamType){t=[...e.commits.values()];const i=t[t.length-1];if(null==await i.getPreviousSha()){const e=await this.view.container.git.getLog(this.uri.repoPath,{limit:2,ref:i.sha});null!=e&&(t[t.length-1]=(0,ne.Ps)(e.commits.values()))}}else t=e.commits.values();const i=[];let r=!0;return!this.options?.showAheadCommits&&"ahead"===this.upstreamType&&this.status.upstream&&this.status.state.ahead>0?(r=!1,i.push(...await new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType).getChildren())):(i.push(...(0,Li.E)((0,ne.UI)(t,(e=>new Ni.D(this.view,this,e,"ahead"===this.upstreamType,this.branch))),this,1)),e.hasMore&&i.push(new Mi.Gd(this.view,this,i[i.length-1]))),r&&i.unshift(new BranchTrackingStatusFilesNode(this.view,this,this.branch,this.status,this.upstreamType)),i}async getTreeItem(){let e,t,i,n,s,o,a=0;if("none"!==this.upstreamType){const e=this.view.container.git.getRepository(this.repoPath);a=await(e?.getLastFetched())??0}switch(this.upstreamType){case"ahead":{const a=await this.branch.getRemote();e=`Changes to push to ${a?.name??(0,u.Lo)(this.status.upstream)}${a?.provider?.name?` on ${a?.provider.name}`:""}`,t=(0,E._6)("commit",this.status.state.ahead),o=`Branch $(git-branch) ${this.branch.name} is ${(0,E._6)("commit",this.status.state.ahead,{infix:"$(arrow-up) "})} ahead of $(git-branch) ${this.status.upstream}${a?.provider?.name?` on ${a.provider.name}`:""}`,i=r.TreeItemCollapsibleState.Collapsed,n=this.root?Wi.Td.StatusAheadOfUpstream:Wi.Td.BranchStatusAheadOfUpstream,s=new r.ThemeIcon("cloud-upload",new r.ThemeColor("gitlens.unpublishedChangesIconColor"));break}case"behind":{const a=await this.branch.getRemote();e=`Changes to pull from ${a?.name??(0,u.Lo)(this.status.upstream)}${a?.provider?.name?` on ${a.provider.name}`:""}`,t=(0,E._6)("commit",this.status.state.behind),o=`Branch $(git-branch) ${this.branch.name} is ${(0,E._6)("commit",this.status.state.behind,{infix:"$(arrow-down) "})} behind $(git-branch) ${this.status.upstream}${a?.provider?.name?` on ${a.provider.name}`:""}`,i=r.TreeItemCollapsibleState.Collapsed,n=this.root?Wi.Td.StatusBehindUpstream:Wi.Td.BranchStatusBehindUpstream,s=new r.ThemeIcon("cloud-download",new r.ThemeColor("gitlens.unpulledChangesIconColor"));break}case"same":{const c=await this.branch.getRemote();e=`Up to date with ${c?.name??(0,u.Lo)(this.status.upstream)}${c?.provider?.name?` on ${c.provider.name}`:""}`,t=a?`Last fetched ${(0,Ut.Zh)(new Date(a))}`:"",o=`Branch $(git-branch) ${this.branch.name} is up to date with $(git-branch) ${this.status.upstream}${c?.provider?.name?` on ${c.provider.name}`:""}`,i=r.TreeItemCollapsibleState.None,n=this.root?Wi.Td.StatusSameAsUpstream:Wi.Td.BranchStatusSameAsUpstream,s=new r.ThemeIcon("cloud");break}case"none":{const t=await this.view.container.git.getRemotesWithProviders(this.branch.repoPath),a=w.ss.getHighlanderProviders(t),c=a?.length?a[0].name:void 0;e=`Publish ${this.branch.name} to ${c??"a remote"}`,o=`Branch $(git-branch) ${this.branch.name} hasn't been published to ${c??"a remote"}`,i=r.TreeItemCollapsibleState.None,n=this.root?Wi.Td.StatusNoUpstream:Wi.Td.BranchStatusNoUpstream,s=new r.ThemeIcon("cloud-upload",t.length?new r.ThemeColor("gitlens.unpublishedChangesIconColor"):void 0);break}}const c=new r.TreeItem(e,i);c.id=this.id,c.contextValue=n,c.description=t,a&&(o+=`\n\nLast fetched ${(0,Ut.Zh)(new Date(a))}`),c.iconPath=s;const l=new r.MarkdownString(o,!0);return l.supportHtml=!0,l.isTrusted=!0,c.tooltip=l,c}refresh(e){e&&(this._log=void 0)}_log;async getLog(){if("same"!==this.upstreamType&&"none"!==this.upstreamType){if(null==this._log){const e="ahead"===this.upstreamType?(0,f.oI)(this.status.upstream,this.status.ref):(0,f.oI)(this.status.ref,this.status.upstream);this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:this.limit??this.view.config.defaultItemLimit,ref:e})}return this._log}}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}}Hi([(0,re.H)(),(0,L.fF)()],BranchTrackingStatusNode.prototype,"refresh",1),Hi([(0,re.H)()],BranchTrackingStatusNode.prototype,"loadMore",1);var Vi=i(9729),qi=i(3636),Qi=i(5538),ji=i(5988),Yi=i(812),zi=Object.defineProperty,Ki=Object.getOwnPropertyDescriptor,Ji=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Ki(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&zi(t,i,s),s};class CompareBranchNode extends Wi.CF{constructor(e,t,i,r,n,s=!1){super(e,t,i),this.parent=i,this.branch=r,this.showComparison=n,this.root=s,this.updateContext({branch:r,root:s,storedComparisonId:this.getStorageId()}),this._uniqueId=(0,Wi.tO)("compare-branch",this.context),this.loadCompareWith()}_children;_compareWith;etag(){return 0}get ahead(){return{ref1:this._compareWith?.ref||"HEAD",ref2:this.branch.ref}}get behind(){return{ref1:this.branch.ref,ref2:this._compareWith?.ref||"HEAD"}}get repoPath(){return this.branch.repoPath}subscribe(){return this.view.onDidChangeNodesCheckedState(this.onNodesCheckedStateChanged,this)}onNodesCheckedStateChanged(e){const t=(0,Qi.iS)(this.getStorageId());e.items.some((([e])=>e.id?.startsWith(t)))&&this.storeCompareWith(!1)}async getChildren(){if(null==this._compareWith)return[];if(null==this._children){const e=this.ahead,t=this.behind,i=await this.view.container.git.getAheadBehindCommitCount(this.branch.repoPath,[(0,f.oI)(t.ref1,t.ref2,"...")]),r=await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2,{forkPoint:!0})??await this.view.container.git.getMergeBase(this.repoPath,t.ref1,t.ref2);this._children=[new ji.J(this.view,this,this.repoPath,"Behind",{query:this.getCommitsQuery((0,f.oI)(t.ref1,t.ref2,"..")),comparison:t,direction:"behind",files:{ref1:this.compareWithWorkingTree?"":r??t.ref1,ref2:t.ref2,query:this.getBehindFilesQuery.bind(this)}},{description:(0,E._6)("commit",i?.behind??0),expand:!1}),new ji.J(this.view,this,this.repoPath,"Ahead",{query:this.getCommitsQuery((0,f.oI)(e.ref1,this.compareWithWorkingTree?"":e.ref2,"..")),comparison:e,direction:"ahead",files:{ref1:r??e.ref1,ref2:this.compareWithWorkingTree?"":e.ref2,query:this.getAheadFilesQuery.bind(this)}},{description:(0,E._6)("commit",i?.ahead??0),expand:!1}),new Yi.V(this.view,this,this.repoPath,this._compareWith.ref||"HEAD",this.compareWithWorkingTree?"":this.branch.ref,this.getFilesQuery.bind(this),void 0,{expand:!1})]}return this._children}getTreeItem(){let e,t,i;null==this._compareWith?(t=`Compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with <branch, tag, or ref>`,e=r.TreeItemCollapsibleState.None,i=`Click to compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with a branch, tag, or ref`):(t=`Compare ${this.compareWithWorkingTree?"Working Tree":this.branch.name} with ${(0,f.zL)(this._compareWith.ref,{strings:{working:"Working Tree"}})}`,e=r.TreeItemCollapsibleState.Collapsed);const n=new r.TreeItem(t,e);return n.id=this.id,n.contextValue=`${Wi.Td.CompareBranch}${this.branch.current?"+current":""}+${this.comparisonType}${null==this._compareWith?"":"+comparing"}${this.root?"+root":""}`,null==this._compareWith&&(n.command={title:`Compare ${this.branch.name}${this.compareWithWorkingTree?" (working)":""} with${s.NE.Ellipsis}`,command:"gitlens.views.editNode",arguments:[this]}),n.iconPath=new r.ThemeIcon("git-compare"),n.tooltip=i,n}async clear(){this._compareWith=void 0,await this.updateCompareWith(void 0),this._children=void 0,this.view.triggerNodeChange(this)}async edit(){await this.compareWith()}refresh(){this._children=void 0,this.loadCompareWith()}async setComparisonType(e){null!=this._compareWith?await this.updateCompareWith({...this._compareWith,type:e,checkedFiles:void 0}):this.showComparison=e,this._children=void 0,this.view.triggerNodeChange(this)}get comparisonType(){return this._compareWith?.type??this.showComparison}get compareWithWorkingTree(){return"working"===this.comparisonType}async compareWith(){const e=await(0,qi.V)(this.branch.repoPath,`Compare ${this.branch.name}${this.compareWithWorkingTree?" (working)":""} with`,"Choose a reference to compare with",{allowEnteringRefs:!0,picked:this.branch.ref,sort:{branches:{current:!0},tags:{}}});null==e||e instanceof Vi.$w||(await this.updateCompareWith({ref:e.ref,notation:void 0,type:this.comparisonType}),this._children=void 0,this.view.triggerNodeChange(this))}async getAheadFilesQuery(){const e=(0,f.oI)(this._compareWith?.ref||"HEAD",this.branch.ref||"HEAD","..."),[t,i,r,n]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.compareWithWorkingTree?this.view.container.git.getDiffStatus(this.repoPath,"HEAD"):void 0,this.view.container.git.getChangedFilesCount(this.repoPath,e),this.compareWithWorkingTree?this.view.container.git.getChangedFilesCount(this.repoPath,"HEAD"):void 0]);let s=(0,ae.Sb)(t)??[],o=(0,ae.Sb)(r);if(this.compareWithWorkingTree){const e=(0,ae.Sb)(i);if(null!=e)if(0===s.length)s=e;else for(const t of e){const e=s.findIndex((e=>e.path===t.path));-1!==e?s.splice(e,1,t):s.push(t)}const t=(0,ae.Sb)(n);null!=t&&(o=null==o?t:{additions:o.additions+t.additions,deletions:o.deletions+t.deletions,changedFiles:s.length,approximated:!0})}return{label:`${(0,E._6)("file",s.length,{zero:"No"})} changed`,files:s,stats:o}}async getBehindFilesQuery(){const e=(0,f.oI)(this.branch.ref,this._compareWith?.ref||"HEAD","..."),[t,i]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.view.container.git.getChangedFilesCount(this.repoPath,e)]),r=(0,ae.Sb)(t)??[];return{label:`${(0,E._6)("file",r.length,{zero:"No"})} changed`,files:r,stats:(0,ae.Sb)(i)}}getCommitsQuery(e){const t=this.repoPath;return async i=>{const r=await this.view.container.git.getLog(t,{limit:i,ref:e}),n={log:r,hasMore:r?.hasMore??!0};return n.hasMore&&(n.more=async e=>{n.log=await(n.log?.more?.(e))??n.log,n.hasMore=n.log?.hasMore??!0}),n}}async getFilesQuery(){let e;e=this._compareWith?.ref?this.compareWithWorkingTree?this._compareWith.ref:`${this._compareWith.ref}..${this.branch.ref}`:this.branch.ref;const[t,i]=await Promise.allSettled([this.view.container.git.getDiffStatus(this.repoPath,e),this.view.container.git.getChangedFilesCount(this.repoPath,e)]),r=(0,ae.Sb)(t)??[];return{label:`${(0,E._6)("file",r.length,{zero:"No"})} changed`,files:r,stats:(0,ae.Sb)(i)}}getStorageId(){return`${this.branch.id}${this.branch.current?"+current":""}`}loadCompareWith(){const e=this.view.container.storage.getWorkspace("branch:comparisons"),t=this.getStorageId(),i=e?.[t];null!=i&&"string"==typeof i?this._compareWith={ref:i,notation:void 0,type:this.showComparison}:(this._compareWith=i,null!=i&&(0,Qi.k7)(this.view,i.checkedFiles))}async storeCompareWith(e){const t=this.getStorageId();e&&(0,Qi.vK)(this.view,t);let i=this.view.container.storage.getWorkspace("branch:comparisons");if(null==i){if(null==this._compareWith)return;i=Object.create(null)}if(null!=this._compareWith){const e=(0,Qi.uL)(this.view,t);this._compareWith.checkedFiles=e,i[t]={...this._compareWith}}else{if(null==i[t])return;const{[t]:e,...r}=i;i=r}await this.view.container.storage.storeWorkspace("branch:comparisons",i)}async updateCompareWith(e){this._compareWith=e,await this.storeCompareWith(!0)}}Ji([(0,L.cM)()],CompareBranchNode.prototype,"clear",1),Ji([(0,L.cM)()],CompareBranchNode.prototype,"edit",1),Ji([(0,re.H)(),(0,L.fF)()],CompareBranchNode.prototype,"refresh",1),Ji([(0,L.cM)()],CompareBranchNode.prototype,"setComparisonType",1);var Xi=i(6373),Zi=i(7692),er=i(4167);class MergeConflictFileNode extends Wi.Te{constructor(e,t,i,r){super(h.YY.fromFile(i,r.repoPath,r.HEAD.ref),e,t,i),this.status=r}toClipboard(){return this.fileName}get baseUri(){return h.YY.fromFile(this.file,this.status.repoPath,this.status.mergeBase??"HEAD")}get fileName(){return this.file.path}getChildren(){return[new Zi.l(this.view,this,this.status,this.file),new er.w(this.view,this,this.status,this.file)]}getTreeItem(){const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.Collapsed);e.description=this.description,e.contextValue=`${Wi.Td.File}+conflicted`;const t=Xi.o.fromTemplate("${file}${ • changesDetail}${\\\\\ndirectory}${\n\nstatus}${ (originalPath)} in Index (staged)",this.file),i=new r.MarkdownString(t,!0);return i.isTrusted=!0,i.supportHtml=!0,e.tooltip=i,e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),e.iconPath=r.ThemeIcon.File,e.command=this.getCommand(),this._label=void 0,this._description=void 0,e}_description;get description(){return null==this._description&&(this._description=Xi.o.fromTemplate(this.view.config.formats.files.description,this.file,{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,oe.Fd)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=Xi.o.fromTemplate(this.view.config.formats.files.label,this.file,{relativePath:this.relativePath})),this._label}get priority(){return 0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){return(0,at.j$)("vscode.open","Open File",this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath),{preserveFocus:!0,preview:!0})}}class MergeConflictFilesNode extends Wi.Re{constructor(e,t,i,r){super(h.YY.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.conflicts=r}get repoPath(){return this.uri.repoPath}getChildren(){let e=this.conflicts.map((e=>new MergeConflictFileNode(this.view,this,e,this.status)));if("list"!==this.view.config.files.layout){const t=(0,ot.Mo)(e,(e=>e.uri.relativePath.split("/")),((...e)=>(0,oe.AH)((0,oe.RQ)(...e))),this.view.config.files.compact);e=new xi.Y(this.view,this,t,this.repoPath,"",void 0).getChildren()}else e.sort(((e,t)=>(0,E.dm)(e.label,t.label)));return e}getTreeItem(){return new r.TreeItem((0,E._6)("conflict",this.conflicts.length),r.TreeItemCollapsibleState.Expanded)}}class MergeStatusNode extends Wi.Re{constructor(e,t,i,r,n,s){super(h.YY.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.mergeStatus=r,this.status=n,this.root=s,this.updateContext({branch:i,root:s,status:"merging"}),this._uniqueId=(0,Wi.tO)("merge-status",this.context)}get repoPath(){return this.uri.repoPath}getChildren(){return this.status?.hasConflicts?[new MergeConflictFilesNode(this.view,this,this.mergeStatus,this.status.conflicts)]:[]}getTreeItem(){const e=!0===this.status?.hasConflicts,t=new r.TreeItem(`${e?"Resolve conflicts before merging":"Merging"} ${null!=this.mergeStatus.incoming?`${(0,f.Wh)(this.mergeStatus.incoming,{expand:!1,icon:!1})} `:""}into ${(0,f.Wh)(this.mergeStatus.current,{expand:!1,icon:!1})}`,e?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.None);t.id=this.id,t.contextValue=Wi.Td.Merge,t.description=e?(0,E._6)("conflict",this.status.conflicts.length):void 0,t.iconPath=e?new r.ThemeIcon("warning",new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingConflictForegroundColor")):new r.ThemeIcon("warning",new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingForegroundColor"));const i=new r.MarkdownString(`Merging ${null!=this.mergeStatus.incoming?(0,f.Wh)(this.mergeStatus.incoming,{label:!1}):""}into ${(0,f.Wh)(this.mergeStatus.current,{label:!1})}${e?`\n\nResolve ${(0,E._6)("conflict",this.status.conflicts.length)} before continuing`:""}`,!0);return i.supportHtml=!0,i.isTrusted=!0,t.tooltip=i,t}}var tr=i(2060);class RebaseCommitNode extends Ni.D{async getTreeItem(){const e=new r.TreeItem(`Paused at commit ${this.commit.shortSha}`,this._options.expand?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=`${Wi.Td.Commit}+rebase`,e.description=Ee.i.fromTemplate("${message}",this.commit,{messageTruncateAtNewLine:!0}),e.iconPath=new r.ThemeIcon("debug-pause"),e}getTooltipTemplate(){return`Rebase paused at ${super.getTooltipTemplate()}`}}class RebaseStatusNode extends Wi.Re{constructor(e,t,i,r,n,s){super(h.YY.fromRepoPath(r.repoPath),e,t),this.parent=t,this.branch=i,this.rebaseStatus=r,this.status=n,this.root=s,this.updateContext({branch:i,root:s,status:"rebasing"}),this._uniqueId=(0,Wi.tO)("merge-status",this.context)}get repoPath(){return this.uri.repoPath}async getChildren(){const e=[],t=this.rebaseStatus.steps.current.commit;if(null!=t){const i=null!=t?await this.view.container.git.getCommit(this.rebaseStatus.repoPath,t.ref):void 0;null!=i&&e.push(new RebaseCommitNode(this.view,this,i))}return this.status?.hasConflicts&&e.push(new MergeConflictFilesNode(this.view,this,this.rebaseStatus,this.status.conflicts)),e}getTreeItem(){const e=this.rebaseStatus.steps.total>0,t=e&&null!=this.rebaseStatus.steps.current.commit,i=!0===this.status?.hasConflicts,n=new r.TreeItem(`${i?"Resolve conflicts to continue rebasing":e?"Rebasing":"Pending rebase of"} ${null!=this.rebaseStatus.incoming?`${(0,f.Wh)(this.rebaseStatus.incoming,{expand:!1,icon:!1})}`:""} onto ${(0,f.Wh)(this.rebaseStatus.current??this.rebaseStatus.onto,{expand:!1,icon:!1})}${e?` (${this.rebaseStatus.steps.current.number}/${this.rebaseStatus.steps.total})`:""}`,t?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.None);n.id=this.id,n.contextValue=Wi.Td.Rebase,n.description=i?(0,E._6)("conflict",this.status.conflicts.length):void 0,n.iconPath=i?new r.ThemeIcon("warning",new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingConflictForegroundColor")):new r.ThemeIcon("warning",new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingForegroundColor"));const s=new r.MarkdownString(`${e?"Rebasing":"Pending rebase of"} ${null!=this.rebaseStatus.incoming?(0,f.Wh)(this.rebaseStatus.incoming,{label:!1}):""} onto ${(0,f.Wh)(this.rebaseStatus.current??this.rebaseStatus.onto,{label:!1})}${e?`\n\nPaused at step ${this.rebaseStatus.steps.current.number} of ${this.rebaseStatus.steps.total}${i?`\\\nResolve ${(0,E._6)("conflict",this.status.conflicts.length)} before continuing`:""}`:""}`,!0);return s.supportHtml=!0,s.isTrusted=!0,n.tooltip=s,n.resourceUri=r.Uri.parse("gitlens-view://status/rebasing"+(i?"/conflicts":"")),n}async openEditor(){const e=r.Uri.joinPath(this.uri,".git","rebase-merge","git-rebase-todo");await(0,at.dO)("vscode.openWith",e,"gitlens.rebase",{preview:!1})}}var ir=Object.defineProperty,rr=Object.getOwnPropertyDescriptor,nr=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?rr(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&ir(t,i,s),s};class BranchNode extends Wi.bT{constructor(e,t,i,r,n,s,o){super(e,t,i),this.parent=i,this.repo=r,this.branch=n,this.root=s,this.updateContext({repository:r,branch:n,root:s}),this._uniqueId=(0,Wi.tO)("branch",this.context),this.limit=this.view.getNodeLastKnownLimit(this),this.options={expanded:!1,limitCommits:!1,showAsCommits:!1,showComparison:!1,showCurrent:!this.root,showStatus:!0,showTracking:!this.root,...o}}limit;options;splatted=!0;get id(){return this._uniqueId}toClipboard(){return this.branch.name}compacted=!1;get current(){return this.branch.current}get label(){if(this.options.showAsCommits)return"Commits";const e=this.branch.getNameWithoutRemote();return`${"tree"!==this.view.config.branches?.layout||this.compacted||this.root||this.current||this.branch.detached||this.branch.starred?e:this.branch.getBasename()}${this.branch.rebasing?" (Rebasing)":""}`}get ref(){return this.branch}get treeHierarchy(){return this.root||this.current||this.branch.detached||this.branch.starred?[this.branch.name]:this.branch.getNameWithoutRemote().split("/")}_children;async getChildren(){if(null==this._children){const e=this.branch;let t,i;if(this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForBranches&&(null!=e.upstream||e.remote)&&(0,ie.fw)("gitlens:hasConnectedRemotes")&&(i=this.getState("pullRequest"),void 0===i&&void 0===this.getState("pendingPullRequest"))){t=(0,ae.PQ)();const i=this.getAssociatedPullRequest(e,this.root?{include:["opened","merged"]}:void 0);queueMicrotask((async()=>{await(t?.promise);let r=!1;const n=setTimeout((()=>{r=!0,this.view.triggerNodeChange(this)}),250),s=await i;clearTimeout(n),null!=s&&null!=this._children&&this._children.splice(this._children[0]instanceof CompareBranchNode?1:0,0,new tr.Z(this.view,this,s,e)),(r||null!=s)&&this.view.triggerNodeChange(this.root?this.parent??this:this)}))}const[r,n,o,a,c,l]=await Promise.allSettled([this.getLog(),this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,e.name),this.options.showStatus&&e.current?this.view.container.git.getStatusForRepo(this.uri.repoPath):void 0,this.options.showStatus&&e.current?this.view.container.git.getMergeStatus(this.uri.repoPath):void 0,this.options.showStatus?this.view.container.git.getRebaseStatus(this.uri.repoPath):void 0,e.remote?void 0:this.view.container.git.getBranchAheadRange(e).then((e=>e?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:e}):void 0))]),h=(0,ae.Sb)(r);if(null==h)return[new Mi.AE(this.view,this,"No commits could be found.")];const u=[];!1!==this.options.showComparison&&"remotes"!==this.view.type&&u.push(new CompareBranchNode(this.uri,this.view,this,e,this.options.showComparison,this.splatted)),null!=i&&u.push(new tr.Z(this.view,this,i,e));const d=(0,ae.Sb)(o),p=(0,ae.Sb)(a),m=(0,ae.Sb)(c);if(this.options.showStatus&&null!=p)u.push(new MergeStatusNode(this.view,this,e,p,d??await this.view.container.git.getStatusForRepo(this.uri.repoPath),this.root));else if(this.options.showStatus&&null!=m&&(e.current||e.name===m.incoming.name))u.push(new RebaseStatusNode(this.view,this,e,m,d??await this.view.container.git.getStatusForRepo(this.uri.repoPath),this.root));else if(this.options.showTracking){const t={ref:e.ref,repoPath:e.repoPath,state:e.state,upstream:e.upstream?.name};null!=e.upstream?!this.root||t.state.behind||t.state.ahead?(t.state.behind&&u.push(new BranchTrackingStatusNode(this.view,this,e,t,"behind",this.root)),t.state.ahead&&u.push(new BranchTrackingStatusNode(this.view,this,e,t,"ahead",this.root))):u.push(new BranchTrackingStatusNode(this.view,this,e,t,"same",this.root)):u.push(new BranchTrackingStatusNode(this.view,this,e,t,"none",this.root))}0!==u.length&&u.push(new Mi.AE(this.view,this,"",s.NE.Dash.repeat(2),""));const g=(0,ae.Sb)(l),f=(0,ae.Sb)(n);u.push(...(0,Li.E)((0,ne.UI)(h.commits.values(),(t=>new Ni.D(this.view,this,t,g?.has(t.ref),e,f))),this)),h.hasMore&&u.push(new Mi.Gd(this.view,this,u[u.length-1],{getCount:()=>this.view.container.git.getCommitCount(e.repoPath,e.name)})),this._children=u,setTimeout((()=>t?.fulfill()),1)}return this._children}async getTreeItem(){this.splatted=!1;let e,t,i=`${this.current?"Current branch":"Branch"} $(git-branch) ${this.branch.getNameWithoutRemote()}${this.branch.rebasing?" (Rebasing)":""}`,n=Wi.Td.Branch;this.current&&(n+="+current"),this.branch.remote&&(n+="+remote"),this.branch.starred&&(n+="+starred"),null==this.branch.upstream||this.branch.upstream.missing||(n+="+tracking"),this.options.showAsCommits&&(n+="+commits"),this.repo.closed&&(n+="+closed");let o="";if(!this.branch.remote)if(null!=this.branch.upstream){let a=s.NE.Dash;const c=await this.branch.getRemote();if(this.branch.upstream.missing)a=s.NE.Warning;else if(null!=c){let e,t;for(const{type:i}of c.urls)if("fetch"===i){if(e=!0,t)break}else if("push"===i&&(t=!0,e))break;e&&t?a=s.NE.ArrowsRightLeft:t?a=s.NE.ArrowRight:e&&(a=s.NE.ArrowLeft)}t=this.options.showAsCommits?`${this.branch.getTrackingStatus({suffix:(0,E.vk)(s.NE.Dot,1,1)})}${this.branch.getNameWithoutRemote()}${this.branch.rebasing?" (Rebasing)":""}${(0,E.vk)(a,2,2)}${this.branch.upstream.name}`:`${this.branch.getTrackingStatus({suffix:`${s.NE.Space} `})}${a}${s.NE.Space} ${this.branch.upstream.name}`,i+=` is ${this.branch.getTrackingStatus({empty:this.branch.upstream.missing?`missing upstream $(git-branch) ${this.branch.upstream.name}`:`up to date with $(git-branch)  ${this.branch.upstream.name}${c?.provider?.name?` on ${c.provider.name}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${this.branch.upstream.name}${c?.provider?.name?` on ${c.provider.name}`:""}`})}`,(this.branch.state.ahead||this.branch.state.behind)&&(this.branch.state.ahead&&(n+="+ahead",e=new r.ThemeColor("gitlens.unpublishedChangesIconColor"),o="-green"),this.branch.state.behind&&(n+="+behind",e=new r.ThemeColor("gitlens.unpulledChangesIconColor"),o=this.branch.state.ahead?"-yellow":"-red"))}else{const e=w.ss.getHighlanderProviders(await this.view.container.git.getRemotesWithProviders(this.branch.repoPath));i+=` hasn't been published to ${(e?.length?e[0].name:void 0)??"a remote"}`}null!=this.branch.date&&(t=`${t?`${t}${(0,E.vk)(s.NE.Dot,2,2)}`:""}${this.branch.formattedDate}`,i+=`\n\nLast commit ${this.branch.formatDateFromNow()} (${this.branch.formatDate(this.view.container.BranchDateFormatting.dateFormat)})`),i=new r.MarkdownString(i,!0),i.supportHtml=!0,i.isTrusted=!0,this.branch.starred&&i.appendMarkdown("\\\n$(star-full) Favorited");const a=this.getState("pendingPullRequest");null!=a&&i.appendMarkdown(`\n\n$(loading~spin) Loading associated pull request${s.NE.Ellipsis}`);const c=new r.TreeItem(this.label,this.options.expanded?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);return c.id=this.id,c.contextValue=n,c.description=t,c.iconPath=null!=a?new r.ThemeIcon("loading~spin"):this.options.showAsCommits?new r.ThemeIcon("git-commit",e):{dark:this.view.container.context.asAbsolutePath(`images/dark/icon-branch${o}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-branch${o}.svg`)},c.tooltip=i,c.resourceUri=r.Uri.parse(`gitlens-view://branch/status/${await this.branch.getStatus()}${this.options.showCurrent&&this.current?"/current":""}`),c}async star(){await this.branch.star(),this.view.refresh(!0)}async unstar(){await this.branch.unstar(),this.view.refresh(!0)}refresh(e){this._children=void 0,e&&(this._log=void 0,this.deleteState())}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return r??(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i)}_log;async getLog(){if(null==this._log){let e=this.limit??(this.root&&!this.options.limitCommits?this.view.config.pageItemLimit:this.view.config.defaultItemLimit);0!==e&&this.branch.state.ahead>e&&(e=Math.min(this.branch.state.ahead+1,2*e)),this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:e,ref:this.ref.ref,authors:this.options?.authors})}return this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this._children=void 0,this.triggerChange(!1)))}}nr([(0,L.cM)()],BranchNode.prototype,"star",1),nr([(0,L.cM)()],BranchNode.prototype,"unstar",1),nr([(0,re.H)(),(0,L.fF)()],BranchNode.prototype,"refresh",1),nr([(0,re.H)()],BranchNode.prototype,"loadMore",1);class BranchOrTagFolderNode extends Wi.Re{constructor(e,t,i,r,n,s,o,a=!1){super(h.YY.fromRepoPath(n),e,t),this.parent=t,this.type=i,this.root=r,this.repoPath=n,this.folderName=s,this.relativePath=o,this._expanded=a,this._uniqueId=(0,Wi.tO)(`${i}-folder+${o??s}`,this.context)}get id(){return this._uniqueId}toClipboard(){return this.folderName}getChildren(){if(void 0===this.root.descendants||void 0===this.root.children)return[];const e=[];for(const t of this.root.children.values())if(void 0!==t.value)t.value.parent=this.folderName?this:this.parent,e.push(t.value);else{const i=t.descendants?.some((e=>e instanceof BranchNode&&e.current));e.push(new BranchOrTagFolderNode(this.view,this.folderName?this:this.parent,this.type,t,this.repoPath,t.name,t.relativePath,i))}return e}getTreeItem(){const e=new r.TreeItem(this.label,this._expanded?r.TreeItemCollapsibleState.Expanded:r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=Wi.Td.Folder,e.iconPath=r.ThemeIcon.Folder,e.tooltip=this.label,e}get label(){return this.folderName}}var sr=Object.defineProperty,or=Object.getOwnPropertyDescriptor;class BranchesNode extends Wi.Re{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,Wi.tO)("branches",this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}_children;async getChildren(){if(null==this._children){const e=await this.repo.getBranches({filter:e=>!e.remote,sort:{current:!1}});if(0===e.values.length)return[new Mi.AE(this.view,this,"No branches could be found.")];const t=e.values.map((e=>new BranchNode(h.YY.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,this.repo,e,!1,{showComparison:"repositories"===this.view.type?this.view.config.branches.showBranchComparison:this.view.config.showBranchComparison})));if("list"===this.view.config.branches.layout)return t;const i=(0,ot.Mo)(t,(e=>e.treeHierarchy),((...e)=>e.join("/")),this.view.config.files.compact,(e=>(e.compacted=!0,!0))),r=new BranchOrTagFolderNode(this.view,this,"branch",i,this.repo.path,"",void 0);this._children=r.getChildren()}return this._children}async getTreeItem(){const e=new r.TreeItem("Branches",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=Wi.Td.Branches,await this.repo.hasRemotes()&&(e.contextValue+="+remotes"),this.repo.closed&&(e.contextValue+="+closed"),e.iconPath=new r.ThemeIcon("git-branch"),e}refresh(){this._children=void 0}}((e,t,i,r)=>{for(var n,s=r>1?void 0:r?or(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);r&&s&&sr(t,i,s)})([(0,re.H)(),(0,L.fF)()],BranchesNode.prototype,"refresh",1);var ar=Object.defineProperty,cr=Object.getOwnPropertyDescriptor,lr=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?cr(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&ar(t,i,s),s};class ViewBase{constructor(e,t,i,n){if(this.container=e,this.type=t,this.name=i,this.trackingFeature=n,this.disposables.push((0,le.IH)(e.onReady)(this.onReady,this)),this.container.debugging||te.D.get("debug")){let e=function(e,t,i){null==e.tooltip&&(e.tooltip=new r.MarkdownString(null!=e.label&&"string"!=typeof e.label?e.label.label:e.label??"")),"string"==typeof e.tooltip?e.tooltip=`${e.tooltip}\n\n---\ncontext: ${e.contextValue}\nnode: ${t.toString()}${null!=i?`\nparent: ${i.toString()}`:""}`:e.tooltip.appendMarkdown(`\n\n---\n\ncontext: \`${e.contextValue}\`\\\nnode: \`${t.toString()}\`${null!=i?`\\\nparent: \`${i.toString()}\``:""}`)};const t=this.getTreeItem;this.getTreeItem=async function(i){const r=await t.apply(this,[i]);return null==i.resolveTreeItem&&e(r,i,i.getParent()),r};const i=this.resolveTreeItem;this.resolveTreeItem=async function(t,r){return t=await i.apply(this,[t,r]),e(t,r,r.getParent()),t}}this.disposables.push(...this.registerCommands())}get id(){return`gitlens.views.${this.type}`}_onDidInitialize=new r.EventEmitter;initialized=!1;_onDidChangeTreeData=new r.EventEmitter;get onDidChangeTreeData(){return this._onDidChangeTreeData.event}_onDidChangeSelection=new r.EventEmitter;get onDidChangeSelection(){return this._onDidChangeSelection.event}_onDidChangeVisibility=new r.EventEmitter;get onDidChangeVisibility(){return this._onDidChangeVisibility.event}_onDidChangeNodeCollapsibleState=new r.EventEmitter;get onDidChangeNodeCollapsibleState(){return this._onDidChangeNodeCollapsibleState.event}_onDidChangeNodesCheckedState=new r.EventEmitter;get onDidChangeNodesCheckedState(){return this._onDidChangeNodesCheckedState.event}disposables=[];root;tree;_lastKnownLimits=new Map;dispose(){this._nodeState?.dispose(),this._nodeState=void 0,r.Disposable.from(...this.disposables).dispose()}onReady(){this.initialize({canSelectMany:this.canSelectMany,showCollapseAll:this.showCollapseAll}),queueMicrotask((()=>this.onConfigurationChanged()))}get canReveal(){return!0}get canSelectMany(){return this.container.prereleaseOrDebugging&&te.D.get("views.experimental.multiSelect.enabled",void 0,!1)}_nodeState;get nodeState(){return null==this._nodeState&&(this._nodeState=new ViewNodeState),this._nodeState}get showCollapseAll(){return!0}filterConfigurationChanged(e){if(!te.D.changed(e,"views"))return!1;if(te.D.changed(e,`views.${this.configKey}`))return!0;for(const t of je.TA)if(te.D.changed(e,`views.${t}`))return!0;return!1}get badge(){return this.tree?.badge}set badge(e){null!=this.tree&&(this.tree.badge=e)}_title;get title(){return this._title}set title(e){this._title=e,null!=this.tree&&(this.tree.title=e)}_description;get description(){return this._description}set description(e){this._description=e,null!=this.tree&&(this.tree.description=e)}_message;get message(){return this._message}set message(e){this._message=e,null!=this.tree&&(this.tree.message=e)}getQualifiedCommand(e){return`gitlens.views.${this.type}.${e}`}onConfigurationChanged(e){null!=e&&null!=this.root&&this.refresh(!0)}initialize(e={}){this.tree=r.window.createTreeView(this.id,{...e,treeDataProvider:this}),this.disposables.push(te.D.onDidChange((e=>{this.filterConfigurationChanged(e)&&(this._config=void 0,this.onConfigurationChanged(e))}),this),this.tree,this.tree.onDidChangeSelection((0,he.Ds)(this.onSelectionChanged,250),this),this.tree.onDidChangeVisibility((0,he.Ds)(this.onVisibilityChanged,250),this),this.tree.onDidChangeCheckboxState(this.onCheckboxStateChanged,this),this.tree.onDidCollapseElement(this.onElementCollapsed,this),this.tree.onDidExpandElement(this.onElementExpanded,this)),null!=this._title?this.tree.title=this._title:this._title=this.tree.title,null!=this._description&&(this.tree.description=this._description),null!=this._message&&(this.tree.message=this._message)}ensureRoot(e=!1){return(null==this.root||e)&&(this.root=this.getRoot()),this.root}getChildren(e){if(null!=e)return e.getChildren();const t=this.ensureRoot().getChildren();return this.initialized||((0,ae.tI)(t)?t.then((()=>{this.initialized||(this.initialized=!0,setTimeout((()=>this._onDidInitialize.fire()),1))})):(this.initialized=!0,setTimeout((()=>this._onDidInitialize.fire()),1))),t}getParent(e){return e.getParent()}getTreeItem(e){return e.getTreeItem()}resolveTreeItem(e,t){return t.resolveTreeItem?.(e)??e}onElementCollapsed(e){this._onDidChangeNodeCollapsibleState.fire({...e,state:r.TreeItemCollapsibleState.Collapsed})}onElementExpanded(e){this._onDidChangeNodeCollapsibleState.fire({...e,state:r.TreeItemCollapsibleState.Expanded})}onCheckboxStateChanged(e){try{for(const[t,i]of e.items){if(null==t.id)throw new Error("Id is required for checkboxes");t.storeState("checked",i,!0)}}finally{this._onDidChangeNodesCheckedState.fire(e)}}onSelectionChanged(e){this._onDidChangeSelection.fire(e)}onVisibilityChanged(e){e.visible&&this.container.usage.track(`${this.trackingFeature}:shown`),this._onDidChangeVisibility.fire(e)}get activeSelection(){if(null!=this.tree&&null!=this.root)return this.tree.selection[0]}get selection(){return null==this.tree||null==this.root?[]:this.tree.selection}get visible(){return this.tree?.visible??!1}async findNode(e,{allowPaging:t=!1,canTraverse:i,maxDepth:r=2,token:n}={}){const s=(0,se.UH)();async function o(){try{return await this.findNodeCoreBFS(e,this.ensureRoot(),t,i,r,n)}catch(e){return void C.Yd.error(e,s)}}return this.initialized?o.call(this):(this.show({preserveFocus:!0}),new Promise((e=>(0,le.IH)(this._onDidInitialize.event)((()=>e(o.call(this))),this))))}async findNodeCoreBFS(e,t,i,r,n,s){const o=[t,void 0],a=te.D.get("advanced.maxListItems");let c,l,h,u=0;for(;o.length>1;){if(s?.isCancellationRequested)return;if(c=o.shift(),null!=c){if(e(c))return c;if(null!=r){const e=r(c);if((0,ae.tI)(e)){if(!await e)continue}else if(!e)continue}if(l=await c.getChildren(),0!==l.length){for(;null!=c&&!(0,Wi.On)(c);)c=await(c.getSplattedChild?.());if(null!=c&&(0,Wi.On)(c)){let t=l.find(e);if(null!=t)return t;if(i&&c.hasMore)for(;;){if(s?.isCancellationRequested)return;if(await this.loadMoreNodeChildren(c,a),h=await(0,ae.HO)(Promise.resolve(c.getChildren()),s??6e4,{onDidCancel:e=>e([])}),t=h.find(e),null!=t)return t;if(!c.hasMore)break}}else o.push(...l)}}else if(u++,o.push(void 0),u>n)break}}async ensureRevealNode(e,t){const i=[];let r=e;for(;null!=r;)i.push(r),r=r.getParent();i.length>1&&i.pop();for(const e of i.reverse())try{await this.reveal(e,t)}catch{}}async refresh(e=!1){e&&this.nodeState.reset(),await(this.root?.refresh?.(e)),this.triggerNodeChange()}async refreshNode(e,t=!1,i=!1){const r=await(e.refresh?.(t));(i||!0!==r)&&this.triggerNodeChange(e)}async reveal(e,t){if(null!=this.tree)try{await this.tree.reveal(e,t)}catch(e){C.Yd.error(e)}}async show(e){const t=(0,se.UH)();try{await(0,at.dO)(`${this.id}.focus`,e)}catch(e){C.Yd.error(e,t)}}getNodeLastKnownLimit(e){return this._lastKnownLimits.get(e.id)}async loadMoreNodeChildren(e,t,i,r){null!=i&&await this.reveal(i,{select:!0}),await e.loadMore(t,r),this._lastKnownLimits.set(e.id,e.limit)}resetNodeLastKnownLimit(e){this._lastKnownLimits.delete(e.id)}triggerNodeChange(e){this._onDidChangeTreeData.fire(null!=e&&e!==this.root?e:void 0)}_config;get config(){if(null==this._config){const e={...te.D.get("views")};for(const t of je.S4)delete e[t];this._config={...e,...te.D.get("views")[this.configKey]}}return this._config}}lr([(0,L.cM)({args:{0:"<function>",1:e=>`options=${JSON.stringify({...e,canTraverse:void 0,token:void 0})}`}})],ViewBase.prototype,"findNode",1),lr([(0,L.fF)()],ViewBase.prototype,"refresh",1),lr([(0,L.fF)({args:{0:e=>e.toString()}})],ViewBase.prototype,"refreshNode",1),lr([(0,L.cM)({args:{0:e=>e.toString()}})],ViewBase.prototype,"reveal",1),lr([(0,L.cM)()],ViewBase.prototype,"show",1),lr([(0,L.fF)({args:{0:e=>e.toString(),2:e=>e?.toString()}})],ViewBase.prototype,"loadMoreNodeChildren",1),lr([(0,L.fF)({args:{0:e=>e.toString()},singleLine:!0})],ViewBase.prototype,"resetNodeLastKnownLimit",1),lr([(0,L.fF)({args:{0:e=>e?.toString()}})],ViewBase.prototype,"triggerNodeChange",1);class ViewNodeState{_store;_stickyStore;dispose(){this.reset(),this._stickyStore?.clear(),this._stickyStore=void 0}reset(){this._store?.clear(),this._store=void 0}delete(e,t){for(const i of[this._store,this._stickyStore])if(null!=i)for(const[r,n]of i)r.startsWith(e)&&n.delete(t)}deleteState(e,t){null==t?(this._store?.delete(e),this._stickyStore?.delete(e)):(this._store?.get(e)?.delete(t),this._stickyStore?.get(e)?.delete(t))}get(e,t){const i=new Map;for(const r of[this._store,this._stickyStore])if(null!=r)for(const[n,s]of r)n.startsWith(e)&&s.has(t)&&i.set(n,s.get(t));return i}getState(e,t){return this._stickyStore?.get(e)?.get(t)??this._store?.get(e)?.get(t)}storeState(e,t,i,r){let n;r?(null==this._stickyStore&&(this._stickyStore=new Map),n=this._stickyStore):(null==this._store&&(this._store=new Map),n=this._store);const s=n.get(e);null!=s?s.set(t,i):n.set(e,new Map([[t,i]]))}}var hr=i(9311),ur=i(3401),dr=i(6897),pr=i(7445),mr=i(4155),gr=i(8834),fr=i(252),wr=i(6713),vr=i(5025),yr=i(2601),br=Object.defineProperty,Cr=Object.getOwnPropertyDescriptor,Ar=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Cr(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&br(t,i,s),s};class ContributorNode extends Wi.Re{constructor(e,t,i,r,n){super(e,t,i),this.parent=i,this.contributor=r,this._options=n,this.updateContext({contributor:r}),this._uniqueId=(0,Wi.tO)("contributor",this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}toClipboard(){return`${this.contributor.name}${this.contributor.email?` <${this.contributor.email}>`:""}`}get repoPath(){return this.contributor.repoPath}async getChildren(){const e=await this.getLog();if(null==e)return[new Mi.AE(this.view,this,"No commits could be found.")];const t=await this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath),i=[...(0,Li.E)((0,ne.UI)(e.commits.values(),(e=>new Ni.D(this.view,this,e,void 0,void 0,t))),this)];return e.hasMore&&i.push(new Mi.Gd(this.view,this,i[i.length-1])),i}async getTreeItem(){const e=this._options?.presence?.get(this.contributor.email),t=new r.TreeItem(this.contributor.current?`${this.contributor.label} (you)`:this.contributor.label,r.TreeItemCollapsibleState.Collapsed);let i,n;if(t.id=this.id,t.contextValue=this.contributor.current?`${Wi.Td.Contributor}+current`:Wi.Td.Contributor,t.description=`${null!=e&&"offline"!==e.status?`${e.statusText} ${s.NE.Space}${s.NE.Dot}${s.NE.Space} `:""}${null!=this.contributor.date?`${this.contributor.formatDateFromNow()}, `:""}${(0,E._6)("commit",this.contributor.count)}`,this.view.config.avatars){const t=te.D.get("hovers.avatarSize");if(i=await this.contributor.getAvatarUri({defaultStyle:te.D.get("defaultGravatarsStyle"),size:t}),null!=e){const r=`${this.contributor.count?"You are":`${this.contributor.label} is`} ${"dnd"===e.status?"in ":""}${e.statusText.toLocaleLowerCase()}`;n=`![${r}](${i.toString(!0)}|width=${t},height=${t} "${r}")![${r}](${(0,Ve.TU)(e.status)} "${r}")`}else n=`![${this.contributor.label}](${i.toString(!0)}|width=${t},height=${t} "${this.contributor.label}")`}const o=new Intl.NumberFormat,a=null!=this.contributor.stats?`\\\n${(0,E._6)("file",this.contributor.stats.files,{format:o.format})} changed, ${(0,E._6)("addition",this.contributor.stats.additions,{format:o.format})}, ${(0,E._6)("deletion",this.contributor.stats.deletions,{format:o.format})}`:"",c=this.contributor.email?`__[${this.contributor.name}](mailto:${this.contributor.email} "Email ${this.contributor.label} (${this.contributor.email})")__`:`__${this.contributor.label}__`,l=null!=this.contributor.date?`Last commit ${this.contributor.formatDateFromNow()} (${this.contributor.formatDate()})\\\n`:"",h=new r.MarkdownString(`${null!=n?n:""} &nbsp;${c} \n\n${l}${(0,E._6)("commit",this.contributor.count,{format:o.format})}${a}`);return h.supportHtml=!0,h.isTrusted=!0,t.tooltip=h,t.iconPath=i,t}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLog(this.uri.repoPath,{all:this._options?.all,ref:this._options?.ref,limit:this.limit??this.view.config.defaultItemLimit,authors:[{name:this.contributor.name,email:this.contributor.email,username:this.contributor.username,id:this.contributor.id}]})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}}Ar([(0,re.H)(),(0,L.fF)()],ContributorNode.prototype,"refresh",1),Ar([(0,re.H)()],ContributorNode.prototype,"loadMore",1);var Sr=Object.defineProperty,Pr=Object.getOwnPropertyDescriptor,kr=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Pr(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Sr(t,i,s),s};class FileHistoryTrackerNode extends Wi.CF{_base;_child;splatted=!0;constructor(e){super(h.Wj,e)}dispose(){super.dispose(),this.resetChild()}resetChild(){null!=this._child&&(this._child.dispose(),this._child=void 0)}async getChildren(){if(null==this._child){if(!this.hasUri)return this.view.description=void 0,this.view.message="There are no editors open that can provide file history information.",[];this.view.message=void 0;const e={...this.uri,repoPath:this.uri.repoPath,sha:this._base??this.uri.sha},t=new h.YY(this.uri,e);let i,n=!1;try{((await r.workspace.fs.stat(this.uri)).type&r.FileType.Directory)===r.FileType.Directory&&(n=!0)}catch{}this.view.title=n?"Folder History":"File History",e.sha&&"HEAD"!==e.sha?(0,f.D3)(e.sha)||({values:[i]}=await this.view.container.git.getBranches(this.uri.repoPath,{filter:t=>t.name===e.sha})):i=await this.view.container.git.getBranch(this.uri.repoPath),this._child=new FileHistoryNode(t,this.view,this,n,i)}return this._child.getChildren()}getTreeItem(){this.splatted=!1;const e=new r.TreeItem("File History",r.TreeItemCollapsibleState.Expanded);return e.contextValue=Wi.Td.ActiveFileHistory,e}get followingEditor(){return this.canSubscribe}get hasUri(){return this._uri!=h.Wj&&null!=this._uri.repoPath}async changeBase(){const e=await(0,qi.V)(this.uri.repoPath,"Change File History Base","Choose a reference to set as the new base",{allowEnteringRefs:!0,picked:this._base,sort:{branches:{current:!0},tags:{}}});if(null!=e){if((0,f.UR)(e)){const t=await this.view.container.git.getBranch(this.uri.repoPath);this._base=t?.name===e.name?void 0:e.ref}else this._base=e.ref;null!=this._child&&(this.setUri(),await this.triggerChange())}}async refresh(e=!1){const t=(0,se.UH)();if(!this.canSubscribe)return!1;e&&(null!=this._uri&&this._uri!==h.Wj&&await this.view.container.tracker.resetCache(this._uri,"log"),this.reset());const i=r.window.activeTextEditor;if(null==i||!this.view.container.git.isTrackable(i.document.uri))return!!(!this.hasUri||this.view.container.git.isTrackable(this.uri)&&r.window.visibleTextEditors.some((e=>e.document?.uri.path===this.uri.path)))||(this.reset(),(0,se.lH)(t,`, uri=${C.Yd.toLoggable(this._uri)}`),!1);if(i.document.uri.path===this.uri.path)return(0,se.lH)(t,`, uri=${C.Yd.toLoggable(this._uri)}`),!0;let n,s=await h.YY.fromUri(i.document.uri);if(null!=s.sha){const e=await this.view.container.git.getWorkingUri(s.repoPath,s);null!=e&&(n=e)}return!(!this.hasUri||!gt.n.equals(n??s,this.uri))||(null!=n&&(s=await h.YY.fromUri(n)),null==s.repoPath?this.reset():(this.setUri(s),this.resetChild()),(0,se.lH)(t,`, uri=${C.Yd.toLoggable(this._uri)}`),!1)}reset(){this.setUri(),this.resetChild()}setEditorFollowing(e){e&&this.setUri(),this.canSubscribe=e,e||this.triggerChange()}async showHistoryForUri(e){this.setUri(e),await this.triggerChange()}subscribe(){return r.Disposable.from(r.window.onDidChangeActiveTextEditor((0,he.Ds)(this.onActiveEditorChanged,250),this))}etag(){return 0}_triggerChangeDebounced;onActiveEditorChanged(e){if(null==e&&(0,G.pt)(this._uri))return null==this._triggerChangeDebounced&&(this._triggerChangeDebounced=(0,he.Ds)((()=>this.triggerChange()),1500)),void this._triggerChangeDebounced();this.triggerChange()}setUri(e){this._uri=e??h.Wj,(0,ie.v)("gitlens:views:fileHistory:canPin",this.hasUri)}}kr([(0,L.fF)()],FileHistoryTrackerNode.prototype,"resetChild",1),kr([(0,re.H)(),(0,L.cM)()],FileHistoryTrackerNode.prototype,"changeBase",1),kr([(0,re.H)(),(0,L.fF)({exit:!0})],FileHistoryTrackerNode.prototype,"refresh",1),kr([(0,L.cM)()],FileHistoryTrackerNode.prototype,"setEditorFollowing",1),kr([(0,L.cM)()],FileHistoryTrackerNode.prototype,"showHistoryForUri",1),kr([(0,L.fF)()],FileHistoryTrackerNode.prototype,"subscribe",1),kr([(0,L.fF)({args:!1})],FileHistoryTrackerNode.prototype,"onActiveEditorChanged",1);var Rr=i(9719),Dr=Object.defineProperty,_r=Object.getOwnPropertyDescriptor,Tr=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?_r(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Dr(t,i,s),s};class FileHistoryNode extends Wi.CF{constructor(e,t,i,r,n){super(e,t,i),this.parent=i,this.folder=r,this.branch=n,null!=n&&this.updateContext({branch:n}),this._uniqueId=(0,Wi.tO)(`file-history+${e.toString()}`,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;splatted=!0;get id(){return this._uniqueId}toClipboard(){return this.uri.fileName}async getChildren(){this.view.description=`${this.label}${this.parent instanceof FileHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`;const e=[];if(null==this.uri.repoPath)return e;const t=null!=this.branch?await this.view.container.git.getBranchAheadRange(this.branch):void 0,[i,r,n,s,o]=await Promise.all([this.getLog(),null==this.uri.sha?this.view.container.git.getStatusForFiles(this.uri.repoPath,this.getPathOrGlob()):void 0,null==this.uri.sha?this.view.container.git.getCurrentUser(this.uri.repoPath):void 0,null!=this.branch?this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,this.branch.name):void 0,t?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:t}):void 0]);if(r?.length)if(this.folder){const t=(0,ne.UI)((0,ne.uw)((0,ne.VS)(r,(e=>e.getPseudoCommits(this.view.container,n))),(e=>e.sha),((e,t)=>e.with({files:{files:[...e.files,...t.files]}}))),(e=>new Ni.D(this.view,this,e)));e.push(...t)}else{const[t]=r,i=t.getPseudoCommits(this.view.container,n);i.length&&e.push(...i.map((e=>new Rr.m(this.view,this,t,e))))}return null!=i&&(e.push(...(0,Li.E)((0,ne.DZ)(i.commits.values(),(e=>this.folder?new Ni.D(this.view,this,e,o?.has(e.ref),this.branch,void 0,{expand:!1}):null!=e.file?new Rr.m(this.view,this,e.file,e,{branch:this.branch,getBranchAndTagTips:s,unpublished:o?.has(e.ref)}):void 0)),this)),i.hasMore&&e.push(new Mi.Gd(this.view,this,e[e.length-1]))),0===e.length?[new Mi.AE(this.view,this,"No file history could be found.")]:e}getTreeItem(){this.splatted=!1;const e=this.label,t=new r.TreeItem(e,r.TreeItemCollapsibleState.Expanded);return t.contextValue=Wi.Td.FileHistory,t.description=this.uri.directory,t.tooltip=`History of ${this.uri.fileName}\n${this.uri.directory}/${null==this.uri.sha?"":`\n\n${this.uri.sha}`}`,this.view.description=`${e}${this.parent instanceof FileHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`,t}get label(){return this.folder&&""===this.uri.fileName?`${(0,oe.EZ)(this.uri.path)}${this.uri.sha?` ${this.uri.sha===p.Ii?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`:`${this.uri.fileName}${this.uri.sha?` ${this.uri.sha===p.Ii?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`}subscribe(){const e=this.view.container.git.getRepository(this.uri);if(null==e)return;return r.Disposable.from(e.onDidChange(this.onRepositoryChanged,this),e.onDidChangeFileSystem(this.onFileSystemChanged,this),e.startWatchingFileSystem(),te.D.onDidChange((e=>{te.D.changed(e,"advanced.fileHistoryFollowsRenames")&&this.view.resetNodeLastKnownLimit(this)})))}etag(){return Date.now()}onRepositoryChanged(e){e.changed(v.I6.Index,v.I6.Heads,v.I6.Remotes,v.I6.RemoteProviders,v.I6.Status,v.I6.Unknown,v.du.Any)&&(C.Yd.debug(`FileHistoryNode.onRepositoryChanged(${e.toString()}); triggering node refresh`),this.triggerChange(!0))}onFileSystemChanged(e){if(this.folder){if(!e.uris.some((e=>e.fsPath.startsWith(this.uri.fsPath))))return}else if(!e.uris.some((e=>e.toString()===this.uri.toString())))return;C.Yd.debug(`FileHistoryNode.onFileSystemChanged(${this.uri.toString(!0)}); triggering node refresh`),this.triggerChange(!0)}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLogForFile(this.uri.repoPath,this.getPathOrGlob(),{limit:this.limit??this.view.config.pageItemLimit,ref:this.uri.sha})),this._log}getPathOrGlob(){return this.folder?r.Uri.joinPath(this.uri,"*"):this.uri}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1,this.splatted)))}}Tr([(0,L.fF)()],FileHistoryNode.prototype,"subscribe",1),Tr([(0,re.H)(),(0,L.fF)()],FileHistoryNode.prototype,"refresh",1),Tr([(0,Et.H)()],FileHistoryNode.prototype,"getPathOrGlob",1),Tr([(0,re.H)()],FileHistoryNode.prototype,"loadMore",1);var Fr=Object.defineProperty,$r=Object.getOwnPropertyDescriptor,Or=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?$r(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Fr(t,i,s),s};class LineHistoryTrackerNode extends Wi.CF{_base;_child;_editorContents;_selection;splatted=!0;constructor(e){super(h.Wj,e)}dispose(){super.dispose(),this.resetChild()}resetChild(){null!=this._child&&(this._child.dispose(),this._child=void 0)}async getChildren(){if(null==this._child){if(!this.hasUri)return this.view.description=void 0,this.view.message="There are no editors open that can provide line history information.",[];if(null==this._selection)return this.view.description=void 0,this.view.message="There was no selection provided for line history.",this.view.description=`${this.uri.fileName}${this.uri.sha?` ${this.uri.sha===p.Ii?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}${this.followingEditor?"":" (pinned)"}`,[];this.view.message=void 0;const e={...this.uri,repoPath:this.uri.repoPath,sha:this.uri.sha??this._base},t=new h.YY(this.uri,e);let i;e.sha&&"HEAD"!==e.sha?(0,f.D3)(e.sha)||({values:[i]}=await this.view.container.git.getBranches(this.uri.repoPath,{filter:t=>t.name===e.sha})):i=await this.view.container.git.getBranch(this.uri.repoPath),this._child=new LineHistoryNode(t,this.view,this,i,this._selection,this._editorContents)}return this._child.getChildren()}getTreeItem(){this.splatted=!1;const e=new r.TreeItem("Line History",r.TreeItemCollapsibleState.Expanded);return e.contextValue=Wi.Td.ActiveLineHistory,this.ensureSubscription(),e}get followingEditor(){return this.canSubscribe}get hasUri(){return this._uri!=h.Wj&&null!=this._uri.repoPath}async changeBase(){const e=await(0,qi.V)(this.uri.repoPath,"Change Line History Base","Choose a reference to set as the new base",{allowEnteringRefs:!0,picked:this._base,sort:{branches:{current:!0},tags:{}}});if(null!=e){if((0,f.UR)(e)){const t=await this.view.container.git.getBranch(this.uri.repoPath);this._base=t?.name===e.name?void 0:e.ref}else this._base=e.ref;null!=this._child&&(this.setUri(),await this.triggerChange())}}async refresh(e=!1){const t=(0,se.UH)();if(!this.canSubscribe)return!1;e&&(null!=this._uri&&this._uri!==h.Wj&&await this.view.container.tracker.resetCache(this._uri,"log"),this.reset());const i=r.window.activeTextEditor;if(null==i||!this.view.container.git.isTrackable(i.document.uri))return!!(!this.hasUri||this.view.container.git.isTrackable(this.uri)&&r.window.visibleTextEditors.some((e=>e.document?.uri.path===this.uri.path)))||(this.reset(),(0,se.lH)(t,`, uri=${C.Yd.toLoggable(this._uri)}`),!1);if(i.document.uri.path===this.uri.path&&null!=this._selection&&i.selection.isEqual(this._selection))return(0,se.lH)(t,`, uri=${C.Yd.toLoggable(this._uri)}`),!0;const n=await h.YY.fromUri(i.document.uri);return!!(this.hasUri&&gt.n.equals(n,this.uri)&&null!=this._selection&&i.selection.isEqual(this._selection))||(null==n.repoPath?this.reset():(this.setUri(n),this._editorContents=i.document.isDirty?i.document.getText():void 0,this._selection=i.selection,this.resetChild()),(0,se.lH)(t,`, uri=${C.Yd.toLoggable(this._uri)}`),!1)}reset(){this.setUri(),this._editorContents=void 0,this._selection=void 0,this.resetChild()}setEditorFollowing(e){this.canSubscribe=e}subscribe(){if(this.view.container.lineTracker.subscribed(this))return;const e=(0,he.Ds)(this.onActiveLinesChanged.bind(this),250);return this.view.container.lineTracker.subscribe(this,this.view.container.lineTracker.onDidChangeActiveLines((t=>{t.pending||e(t)})))}etag(){return 0}onActiveLinesChanged(e){this.triggerChange()}setUri(e){this._uri=e??h.Wj,(0,ie.v)("gitlens:views:fileHistory:canPin",this.hasUri)}}Or([(0,L.fF)()],LineHistoryTrackerNode.prototype,"resetChild",1),Or([(0,re.H)(),(0,L.cM)()],LineHistoryTrackerNode.prototype,"changeBase",1),Or([(0,re.H)(),(0,L.fF)({exit:!0})],LineHistoryTrackerNode.prototype,"refresh",1),Or([(0,L.cM)()],LineHistoryTrackerNode.prototype,"setEditorFollowing",1),Or([(0,L.fF)()],LineHistoryTrackerNode.prototype,"subscribe",1),Or([(0,L.fF)({args:{0:e=>`editor=${e.editor?.document.uri.toString(!0)}, selections=${e.selections?.map((e=>`[${e.anchor}-${e.active}]`)).join(",")}, pending=${Boolean(e.pending)}, reason=${e.reason}`}})],LineHistoryTrackerNode.prototype,"onActiveLinesChanged",1);var Ir=Object.defineProperty,Er=Object.getOwnPropertyDescriptor,xr=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Er(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Ir(t,i,s),s};class LineHistoryNode extends Wi.CF{constructor(e,t,i,r,n,s){super(e,t,i),this.parent=i,this.branch=r,this.selection=n,this.editorContents=s,null!=r&&this.updateContext({branch:r}),this._uniqueId=(0,Wi.tO)(`file-history+${e.toString()}+[${n.start.line},${n.start.character}-${n.end.line},${n.end.character}]`,this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;splatted=!0;get id(){return this._uniqueId}toClipboard(){return this.uri.fileName}async getChildren(){this.view.description=`${this.label}${this.parent instanceof LineHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`;const e=[];if(null==this.uri.repoPath)return e;let t=this.selection;const i=null!=this.branch?await this.view.container.git.getBranchAheadRange(this.branch):void 0,[n,s,o,a]=await Promise.all([this.getLog(t),null==this.uri.sha||(0,f.l3)(this.uri.sha)?this.editorContents?await this.view.container.git.getBlameForRangeContents(this.uri,t,this.editorContents):await this.view.container.git.getBlameForRange(this.uri,t):void 0,null!=this.branch?this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,this.branch.name):void 0,i?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:i}):void 0]);if(null!=s)for(const i of s.commits.values()){if(!i.isUncommitted)continue;const n=s.lines[0],o=s.lines[s.lines.length-1],a=t.active.line===n.line-1;t=new r.Selection((a?o:n).originalLine-1,t.anchor.character,(a?n:o).originalLine-1,t.active.character);const c=await this.view.container.git.getStatusForFile(this.uri.repoPath,this.uri);if(null!=c){const r={conflictStatus:c?.conflictStatus,path:i.file?.path??"",indexStatus:c?.indexStatus,originalPath:i.file?.originalPath,repoPath:this.uri.repoPath,status:c?.status??g.NV.Modified,workingTreeStatus:c?.workingTreeStatus},n=await this.view.container.git.getCurrentUser(this.uri.repoPath),s=c?.getPseudoCommits(this.view.container,n);if(null!=s)for(const i of s.reverse())e.unshift(new Rr.m(this.view,this,r,i,{selection:t}))}break}return null!=n&&(e.push(...(0,Li.E)((0,ne.DZ)(n.commits.values(),(e=>null!=e.file?new Rr.m(this.view,this,e.file,e,{branch:this.branch,getBranchAndTagTips:o,selection:t,unpublished:a?.has(e.ref)}):void 0)),this)),n.hasMore&&e.push(new Mi.Gd(this.view,this,e[e.length-1]))),0===e.length?[new Mi.AE(this.view,this,"No line history could be found.")]:e}getTreeItem(){this.splatted=!1;const e=this.label,t=new r.TreeItem(e,r.TreeItemCollapsibleState.Expanded);return t.contextValue=Wi.Td.LineHistory,t.description=this.uri.directory,t.tooltip=`History of ${this.uri.fileName}${this.lines}\n${this.uri.directory}/${null==this.uri.sha?"":`\n\n${this.uri.sha}`}`,this.view.description=`${e}${this.parent instanceof LineHistoryTrackerNode&&!this.parent.followingEditor?" (pinned)":""}`,t}get label(){return`${this.uri.fileName}${this.lines}${this.uri.sha?` ${this.uri.sha===p.Ii?this.uri.shortSha:`(${this.uri.shortSha})`}`:""}`}get lines(){return this.selection.isSingleLine?`:${this.selection.start.line+1}`:`:${this.selection.start.line+1}-${this.selection.end.line+1}`}subscribe(){const e=this.view.container.git.getRepository(this.uri);if(null==e)return;return r.Disposable.from(e.onDidChange(this.onRepositoryChanged,this),e.onDidChangeFileSystem(this.onFileSystemChanged,this),e.startWatchingFileSystem())}etag(){return Date.now()}onRepositoryChanged(e){e.changed(v.I6.Index,v.I6.Heads,v.I6.Remotes,v.I6.RemoteProviders,v.I6.Status,v.I6.Unknown,v.du.Any)&&(C.Yd.debug(`LineHistoryNode.onRepositoryChanged(${e.toString()}); triggering node refresh`),this.triggerChange(!0))}onFileSystemChanged(e){e.uris.some((e=>e.toString()===this.uri.toString()))&&(C.Yd.debug(`LineHistoryNode.onFileSystemChanged(${this.uri.toString(!0)}); triggering node refresh`),this.triggerChange(!0))}refresh(e){e&&(this._log=void 0)}_log;async getLog(e){return null==this._log&&(this._log=await this.view.container.git.getLogForFile(this.uri.repoPath,this.uri,{all:!1,limit:this.limit??this.view.config.pageItemLimit,range:e??this.selection,ref:this.uri.sha,renames:!1})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1,this.splatted)))}}xr([(0,Et.H)()],LineHistoryNode.prototype,"lines",1),xr([(0,L.fF)()],LineHistoryNode.prototype,"subscribe",1),xr([(0,re.H)(),(0,L.fF)()],LineHistoryNode.prototype,"refresh",1),xr([(0,re.H)()],LineHistoryNode.prototype,"loadMore",1);var Br=Object.defineProperty,Wr=Object.getOwnPropertyDescriptor;class RemoteNode extends Wi.Re{constructor(e,t,i,r,n){super(e,t,i),this.parent=i,this.repo=r,this.remote=n,this.updateContext({repository:r,remote:n}),this._uniqueId=(0,Wi.tO)("remote",this.context)}get id(){return this._uniqueId}toClipboard(){return this.remote.name}get repoPath(){return this.repo.path}async getChildren(){const e=await this.repo.getBranches({filter:e=>e.remote&&e.name.startsWith(this.remote.name),sort:!0});if(0===e.values.length)return[new Mi.AE(this.view,this,"No branches could be found.")];const t=e.values.map((e=>new BranchNode(h.YY.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,this.repo,e,!1,{showComparison:!1,showTracking:!1})));if("list"===this.view.config.branches.layout)return t;const i=(0,ot.Mo)(t,(e=>e.treeHierarchy),((...e)=>e.join("/")),this.view.config.files.compact,(e=>(e.compacted=!0,!0)));return new BranchOrTagFolderNode(this.view,this,"remote-branch",i,this.repo.path,"",void 0).getChildren()}async getTreeItem(){const e=new r.TreeItem(this.remote.name,r.TreeItemCollapsibleState.Collapsed);if(e.id=this.id,e.description=(0,w.jv)(this.remote),null!=this.remote.provider){const{provider:t}=this.remote;if(e.iconPath=null!=t.avatarUri&&this.view.config.avatars?t.avatarUri:"remote"===t.icon?new r.ThemeIcon("cloud"):{dark:this.view.container.context.asAbsolutePath(`images/dark/icon-${t.icon}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-${t.icon}.svg`)},t.hasRichIntegration()){const i=t.maybeConnected??await t.isConnected();e.contextValue=`${Wi.Td.Remote}${i?"+connected":"+disconnected"}`,e.tooltip=`${this.remote.name} (${t.name} ${s.NE.Dash} ${i?"connected":"not connected"})\n${t.displayPath}\n`}else e.contextValue=Wi.Td.Remote,e.tooltip=`${this.remote.name} (${t.name})\n${t.displayPath}\n`}else e.contextValue=Wi.Td.Remote,e.iconPath=new r.ThemeIcon("cloud"),e.tooltip=`${this.remote.name} (${this.remote.domain})\n${this.remote.path}\n`;this.remote.default&&(e.contextValue+="+default",e.resourceUri=r.Uri.parse("gitlens-view://remote/default"));for(const{type:t,url:i}of this.remote.urls)e.tooltip+=`\n${i} (${t})`;return e}async setAsDefault(e=!0){await this.remote.setAsDefault(e),this.triggerChange()}}function Nr(e,t){let i,r=!1;return"boolean"==typeof e?r=e:i=e,(e,n,s)=>{let o;if("function"==typeof s.value&&(o=s.value),null==o)throw new Error("Not supported");s.value=function(...e){if(r){const r=e[e.length-1];i=null!=r&&"number"==typeof r?r:t}const n=o?.apply(this,e);return null==i||i<1||!(0,ae.tI)(n)?n:(0,ae.HO)(n,i,{onDidCancel:e=>e(void 0)})}}}((e,t,i,r)=>{for(var n,s=r>1?void 0:r?Wr(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);r&&s&&Br(t,i,s)})([(0,L.cM)()],RemoteNode.prototype,"setAsDefault",1);var Mr=Object.defineProperty,Lr=Object.getOwnPropertyDescriptor,Ur=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Lr(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Mr(t,i,s),s};class ContributorsNode extends Wi.Re{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,Wi.tO)("contributors",this.context)}splatted=!0;get id(){return this._uniqueId}get repoPath(){return this.repo.path}_children;async getChildren(){if(null==this._children){const e=te.D.get("views.contributors.showAllBranches");let t;if(!e)try{const e=await this.view.container.git.getBranch(this.uri.repoPath);null==e?.upstream?.name||e.upstream.missing||(t="@{u}")}catch{}const i=te.D.get("views.contributors.showStatistics"),r=await this.repo.getContributors({all:e,ref:t,stats:i});if(0===r.length)return[new Mi.AE(this.view,this,"No contributors could be found.")];m.V.sort(r);const n=await this.maybeGetPresenceMap(r);this._children=r.map((i=>new ContributorNode(this.uri,this.view,this,i,{all:e,ref:t,presence:n})))}return this._children}getTreeItem(){this.splatted=!1;const e=new r.TreeItem("Contributors",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=Wi.Td.Contributors,e.iconPath=new r.ThemeIcon("organization"),e}updateAvatar(e){if(null!=this._children)for(const t of this._children)t.contributor.email===e&&t.triggerChange()}refresh(){this._children=void 0}async maybeGetPresenceMap(e){const t=e.find((e=>e.current))?.email;if(null!=t)return this.view.container.vsls.getContactsPresence([t])}}Ur([(0,re.H)(),(0,L.fF)()],ContributorsNode.prototype,"refresh",1),Ur([(0,L.fF)({args:!1}),Nr(250)],ContributorsNode.prototype,"maybeGetPresenceMap",1);var Gr=Object.defineProperty,Hr=Object.getOwnPropertyDescriptor,Vr=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Hr(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Gr(t,i,s),s};class ReflogRecordNode extends Wi.Re{constructor(e,t,i){super(h.YY.fromRepoPath(i.repoPath),e,t),this.record=i,this.updateContext({reflog:i}),this._uniqueId=(0,Wi.tO)("reflog-record",this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}async getChildren(){const e=await this.getLog();if(void 0===e)return[new Mi.AE(this.view,this,"No commits could be found.")];const t=[...(0,ne.UI)(e.commits.values(),(e=>new Ni.D(this.view,this,e)))];return e.hasMore&&t.push(new Mi.Gd(this.view,this,t[t.length-1])),t}getTreeItem(){const e=new r.TreeItem(`${this.record.command}${this.record.commandArgs?` ${this.record.commandArgs}`:""}`,r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.description=`${0===this.record.HEAD.length?"":`${this.record.HEAD} ${s.NE.Space}${s.NE.Dot}${s.NE.Space} `}${this.record.formattedDate}`,e.contextValue=Wi.Td.ReflogRecord,e.tooltip=`${0===this.record.HEAD.length?"":`${this.record.HEAD}\n`}${this.record.command}${this.record.commandArgs?` ${this.record.commandArgs}`:""}${this.record.details?` (${this.record.details})`:""}\n${this.record.formatDateFromNow()} (${this.record.formatDate()})\n${this.record.previousShortSha} ${s.NE.Space}${s.NE.ArrowRight}${s.NE.Space} ${this.record.shortSha}`,e}refresh(e){e&&(this._log=void 0)}_log;async getLog(){if(void 0===this._log){const e=`${this.record.previousSha}..${this.record.sha}`;this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:this.limit??this.view.config.defaultItemLimit,ref:e})}return this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));void 0!==t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}}Vr([(0,re.H)(),(0,L.fF)()],ReflogRecordNode.prototype,"refresh",1),Vr([(0,re.H)()],ReflogRecordNode.prototype,"loadMore",1);var qr=Object.defineProperty,Qr=Object.getOwnPropertyDescriptor;class ReflogNode extends Wi.Re{constructor(e,t,i,r){super(e,t,i),this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,Wi.tO)("reflog",this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}_children;async getChildren(){if(void 0===this._children){const e=[],t=await this.getReflog();if(void 0===t||0===t.records.length)return[new Mi.AE(this.view,this,"No activity could be found.")];e.push(...t.records.map((e=>new ReflogRecordNode(this.view,this,e)))),t.hasMore&&e.push(new Mi.Gd(this.view,this,e[e.length-1])),this._children=e}return this._children}getTreeItem(){const e=new r.TreeItem("Incoming Activity",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=Wi.Td.Reflog,e.description="experimental",e.iconPath={dark:this.view.container.context.asAbsolutePath("images/dark/icon-activity.svg"),light:this.view.container.context.asAbsolutePath("images/light/icon-activity.svg")},e}refresh(e){this._children=void 0,e&&(this._reflog=void 0)}_reflog;async getReflog(){return void 0===this._reflog&&(this._reflog=await this.view.container.git.getIncomingActivity(this.repo.path,{all:!0,limit:this.limit??this.view.config.defaultItemLimit})),this._reflog}get hasMore(){return this._reflog?.hasMore??!0}async loadMore(e){let t=await this.getReflog();void 0!==t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._reflog!==t&&(this._reflog=t,this.limit=t?.count,this.triggerChange(!1)))}}((e,t,i,r)=>{for(var n,s=r>1?void 0:r?Qr(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);r&&s&&qr(t,i,s)})([(0,re.H)(),(0,L.fF)()],ReflogNode.prototype,"refresh",1);var jr=Object.defineProperty,Yr=Object.getOwnPropertyDescriptor;class RemotesNode extends Wi.Re{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,Wi.tO)("remotes",this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}_children;async getChildren(){if(null==this._children){const e=await this.repo.getRemotes({sort:!0});if(0===e.length)return[new Mi.AE(this.view,this,"No remotes could be found")];this._children=e.map((e=>new RemoteNode(this.uri,this.view,this,this.repo,e)))}return this._children}getTreeItem(){const e=new r.TreeItem("Remotes",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=Wi.Td.Remotes,e.iconPath=new r.ThemeIcon("cloud"),e}refresh(){this._children=void 0}}((e,t,i,r)=>{for(var n,s=r>1?void 0:r?Yr(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);r&&s&&jr(t,i,s)})([(0,re.H)(),(0,L.fF)()],RemotesNode.prototype,"refresh",1);var zr=i(1101),Kr=Object.defineProperty,Jr=Object.getOwnPropertyDescriptor;class StashesNode extends Wi.Re{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,Wi.tO)("stashes",this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}_children;async getChildren(){if(null==this._children){const e=await this.repo.getStash();if(null==e)return[new Mi.AE(this.view,this,"No stashes could be found.")];this._children=[...(0,ne.UI)(e.commits.values(),(e=>new zr.i(this.view,this,e)))]}return this._children}getTreeItem(){const e=new r.TreeItem("Stashes",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=Wi.Td.Stashes,e.iconPath=new r.ThemeIcon("gitlens-stashes"),e}refresh(){this._children=void 0}}((e,t,i,r)=>{for(var n,s=r>1?void 0:r?Jr(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);r&&s&&Kr(t,i,s)})([(0,re.H)(),(0,L.fF)()],StashesNode.prototype,"refresh",1);class StatusFilesNode extends Wi.Re{constructor(e,t,i,r){super(h.YY.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.range=r,this._uniqueId=(0,Wi.tO)("status-files",this.context)}get id(){return this._uniqueId}get repoPath(){return this.status.repoPath}async getChildren(){let e=[];const t=this.repoPath;let i;null!=this.range&&(i=await this.view.container.git.getLog(t,{limit:0,ref:this.range}),null!=i&&(await Promise.allSettled((0,ne.UI)((0,ne.hX)(i.commits.values(),(e=>null==e.files)),(e=>e.ensureFullDetails()))),e=[...(0,ne.VS)(i.commits.values(),(e=>e.files?.map((t=>({...t,commit:e})))??[]))])),"worktrees"!==this.view.type&&!this.view.config.includeWorkingTree||0===this.status.files.length||e.unshift(...(0,ne.VS)(this.status.files,(e=>(0,ne.UI)(e.getPseudoCommits(this.view.container,void 0),(t=>this.getFileWithPseudoCommit(e,t)))))),e.sort(((e,t)=>t.commit.date.getTime()-e.commit.date.getTime()));const r=(0,ot.vM)(e,(e=>e.path));let n=Object.values(r).map((e=>new Bi.q(this.view,this,e[e.length-1],t,e.map((e=>e.commit)))));if("list"!==this.view.config.files.layout){const e=(0,ot.Mo)(n,(e=>e.uri.relativePath.split("/")),((...e)=>(0,oe.AH)((0,oe.RQ)(...e))),this.view.config.files.compact);n=new xi.Y(this.view,this,e,t,"",void 0,!0).getChildren()}else n.sort(((e,t)=>e.priority-t.priority||(0,E.dm)(e.label,t.label)));return n}async getTreeItem(){let e="worktrees"===this.view.type||this.view.config.includeWorkingTree?this.status.files.length:0;if(null!=this.range&&null!=this.status.upstream&&this.status.state.ahead>0)if(e>0){const t=await this.view.container.git.getDiffStatus(this.repoPath,`${this.status.upstream}...`);if(null!=t){const i=new Set;for(const e of this.status.files)i.add(e.path);for(const e of t)i.add(e.path);e=i.size}}else{const t=await this.view.container.git.getChangedFilesCount(this.repoPath,`${this.status.upstream}...`);null!=t?e+=t.changedFiles:e=-1}const t=-1===e?"?? files changed":`${(0,E._6)("file",e)} changed`,i=new r.TreeItem(t,r.TreeItemCollapsibleState.Collapsed);return i.id=this.id,i.contextValue=Wi.Td.StatusFiles,i.iconPath={dark:this.view.container.context.asAbsolutePath("images/dark/icon-diff.svg"),light:this.view.container.context.asAbsolutePath("images/light/icon-diff.svg")},i}getFileWithPseudoCommit(e,t){return{status:e.status,repoPath:e.repoPath,indexStatus:e.indexStatus,workingTreeStatus:e.workingTreeStatus,path:e.path,originalPath:e.originalPath,commit:t}}}var Xr=Object.defineProperty,Zr=Object.getOwnPropertyDescriptor,en=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Zr(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Xr(t,i,s),s};class TagNode extends Wi.bT{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.tag=r,this.updateContext({tag:r}),this._uniqueId=(0,Wi.tO)("tag",this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;get id(){return this._uniqueId}toClipboard(){return this.tag.name}get label(){return"tree"===this.view.config.branches.layout?this.tag.getBasename():this.tag.name}get ref(){return this.tag}async getChildren(){const e=await this.getLog();if(null==e)return[new Mi.AE(this.view,this,"No commits could be found.")];const t=await this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath,this.tag.name),i=[...(0,Li.E)((0,ne.UI)(e.commits.values(),(e=>new Ni.D(this.view,this,e,void 0,void 0,t))),this)];return e.hasMore&&i.push(new Mi.Gd(this.view,this,i[i.length-1],{getCount:()=>this.view.container.git.getCommitCount(this.tag.repoPath,this.tag.name)})),i}getTreeItem(){const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=Wi.Td.Tag,e.description=(0,o.X)(this.tag.message),e.tooltip=`${this.tag.name}${(0,E.vk)(s.NE.Dash,2,2)}${(0,f.zL)(this.tag.sha,{force:!0})}${null!=this.tag.date?`\n${this.tag.formatDateFromNow()} (${this.tag.formatDate(this.view.container.TagDateFormatting.dateFormat)})`:""}\n\n${(0,o.X)(this.tag.message)}${null!=this.tag.commitDate&&this.tag.date!==this.tag.commitDate?`\n${this.tag.formatCommitDateFromNow()} (${this.tag.formatCommitDate(this.view.container.TagDateFormatting.dateFormat)})`:""}`,e}refresh(e){e&&(this._log=void 0)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLog(this.uri.repoPath,{limit:this.limit??this.view.config.defaultItemLimit,ref:this.tag.name})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this.triggerChange(!1)))}}en([(0,re.H)(),(0,L.fF)()],TagNode.prototype,"refresh",1),en([(0,re.H)()],TagNode.prototype,"loadMore",1);var tn=Object.defineProperty,rn=Object.getOwnPropertyDescriptor;class TagsNode extends Wi.Re{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,Wi.tO)("tags",this.context)}get id(){return this._uniqueId}get repoPath(){return this.repo.path}_children;async getChildren(){if(null==this._children){const e=await this.repo.getTags({sort:!0});if(0===e.values.length)return[new Mi.AE(this.view,this,"No tags could be found.")];const t=e.values.map((e=>new TagNode(h.YY.fromRepoPath(this.uri.repoPath,e.ref),this.view,this,e)));if("list"===this.view.config.branches.layout)return t;const i=(0,ot.Mo)(t,(e=>e.tag.name.split("/")),((...e)=>e.join("/")),this.view.config.files.compact),r=new BranchOrTagFolderNode(this.view,this,"tag",i,this.repo.path,"",void 0);this._children=r.getChildren()}return this._children}getTreeItem(){const e=new r.TreeItem("Tags",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=Wi.Td.Tags,e.iconPath=new r.ThemeIcon("tag"),e}refresh(){this._children=void 0}}((e,t,i,r)=>{for(var n,s=r>1?void 0:r?rn(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);r&&s&&tn(t,i,s)})([(0,re.H)(),(0,L.fF)()],TagsNode.prototype,"refresh",1);class UncommittedFileNode extends Wi.Te{constructor(e,t,i,r){super(h.YY.fromFile(r,i),e,t,r)}toClipboard(){return this.path}get path(){return this.file.path}getChildren(){return[]}getTreeItem(){const e=new r.TreeItem(this.label,r.TreeItemCollapsibleState.None);e.contextValue=Wi.Td.File,e.description=this.description,e.resourceUri=this.view.container.git.getAbsoluteUri(this.file.path,this.repoPath);const t=(0,g.tK)(this.file.status);return e.iconPath={dark:this.view.container.context.asAbsolutePath((0,oe.RQ)("images","dark",t)),light:this.view.container.context.asAbsolutePath((0,oe.RQ)("images","light",t))},e.tooltip=Xi.o.fromTemplate("${file}\n${directory}/\n\n${status}${ (originalPath)}",this.file),e.command=this.getCommand(),this._label=void 0,this._description=void 0,e}_description;get description(){return null==this._description&&(this._description=Xi.o.fromTemplate(this.view.config.formats.files.description,{...this.file},{relativePath:this.relativePath})),this._description}_folderName;get folderName(){return null==this._folderName&&(this._folderName=(0,oe.XX)(this.uri.relativePath)),this._folderName}_label;get label(){return null==this._label&&(this._label=Xi.o.fromTemplate("${file}",{...this.file},{relativePath:this.relativePath})),this._label}get priority(){return 0}_relativePath;get relativePath(){return this._relativePath}set relativePath(e){this._relativePath=e,this._label=void 0,this._description=void 0}getCommand(){const e={uri:h.YY.fromFile(this.file,this.repoPath),line:0,showOptions:{preserveFocus:!0,preview:!0}};return{title:"Open Changes with Previous Revision",command:s.Gh.DiffWithPrevious,arguments:[void 0,e]}}}class UncommittedFilesNode extends Wi.Re{constructor(e,t,i,r){super(h.YY.fromRepoPath(i.repoPath),e,t),this.parent=t,this.status=i,this.range=r,this._uniqueId=(0,Wi.tO)("uncommitted-files",this.context)}get id(){return this._uniqueId}get repoPath(){return this.status.repoPath}getChildren(){const e=this.repoPath,t=[...(0,ne.VS)(this.status.files,(e=>e.getPseudoCommits(this.view.container,void 0).map((t=>({status:e.status,repoPath:e.repoPath,indexStatus:e.indexStatus,workingTreeStatus:e.workingTreeStatus,path:e.path,originalPath:e.originalPath,commit:t})))))];t.sort(((e,t)=>t.commit.date.getTime()-e.commit.date.getTime()));const i=(0,ot.vM)(t,(e=>e.path));let r=Object.values(i).map((t=>new UncommittedFileNode(this.view,this,e,t[t.length-1])));if("list"!==this.view.config.files.layout){const t=(0,ot.Mo)(r,(e=>e.uri.relativePath.split("/")),((...e)=>(0,oe.AH)((0,oe.RQ)(...e))),this.view.config.files.compact);r=new xi.Y(this.view,this,t,e,"",void 0,!0).getChildren()}else r.sort(((e,t)=>e.priority-t.priority||e.label.localeCompare(t.label,void 0,{numeric:!0,sensitivity:"base"})));return r}getTreeItem(){const e=new r.TreeItem("Uncommitted changes",r.TreeItemCollapsibleState.Collapsed);return e.id=this.id,e.contextValue=Wi.Td.UncommittedFiles,e.iconPath=new r.ThemeIcon("folder"),e}}var nn=Object.defineProperty,sn=Object.getOwnPropertyDescriptor,on=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?sn(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&nn(t,i,s),s};class WorktreeNode extends Wi.Re{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.worktree=r,this.updateContext({worktree:r}),this._uniqueId=(0,Wi.tO)("worktree",this.context),this.limit=this.view.getNodeLastKnownLimit(this)}limit;_branch;get id(){return this._uniqueId}toClipboard(){return this.worktree.uri.fsPath}get repoPath(){return this.uri.repoPath}_children;async getChildren(){if(null==this._children){const e=this._branch;let t,i;if(null!=e&&this.view.config.pullRequests.enabled&&this.view.config.pullRequests.showForBranches&&(null!=e.upstream||e.remote)&&(0,ie.fw)("gitlens:hasConnectedRemotes")&&(i=this.getState("pullRequest"),void 0===i&&void 0===this.getState("pendingPullRequest"))){t=(0,ae.PQ)();const i=this.getAssociatedPullRequest(e,{include:["opened","merged"]});queueMicrotask((async()=>{await(t?.promise);let r=!1;const n=setTimeout((()=>{r=!0,this.view.triggerNodeChange(this)}),250),s=await i;clearTimeout(n),null!=s&&null!=this._children&&this._children.splice(this._children[0]instanceof CompareBranchNode?1:0,0,new tr.Z(this.view,this,s,e)),(r||null!=s)&&this.view.triggerNodeChange(this)}))}const[r,n,s,o]=await Promise.allSettled([this.getLog(),this.view.container.git.getBranchesAndTagsTipsFn(this.uri.repoPath),this.worktree.getStatus(),null==e||e.remote?void 0:this.view.container.git.getBranchAheadRange(e).then((e=>e?this.view.container.git.getLogRefsOnly(this.uri.repoPath,{limit:0,ref:e}):void 0))]),a=(0,ae.Sb)(r);if(null==a)return[new Mi.AE(this.view,this,"No commits could be found.")];const c=[];null!=e&&!1!==this.view.config.showBranchComparison&&c.push(new CompareBranchNode(this.uri,this.view,this,e,this.view.config.showBranchComparison,this.splatted)),null!=e&&null!=i&&c.push(new tr.Z(this.view,this,i,e));const l=(0,ae.Sb)(o),h=(0,ae.Sb)(n);c.push(...(0,Li.E)((0,ne.UI)(a.commits.values(),(t=>new Ni.D(this.view,this,t,l?.has(t.ref),e,h))),this)),a.hasMore&&c.push(new Mi.Gd(this.view,this,c[c.length-1]));const u=(0,ae.Sb)(s);u?.hasChanges&&c.unshift(new UncommittedFilesNode(this.view,this,u,void 0)),this._children=c,t?.fulfill()}return this._children}async getTreeItem(){this.splatted=!1;let e="";const t=new r.MarkdownString("",!0);let i,n=!1;const o=this.worktree.main||this.worktree.opened?`${(0,E.vk)(s.NE.Dash,2,2)} ${this.worktree.main?"_Main"+(this.worktree.opened?", Active_":"_"):this.worktree.opened?"_Active_":""} `:"";let a=!1;switch(this.worktree.type){case"bare":i=new r.ThemeIcon("folder"),t.appendMarkdown(`${this.worktree.main?"$(pass) ":""}Bare Worktree${o}\\\n\`${this.worktree.friendlyPath}\``);break;case"branch":{const[c,l]=await Promise.allSettled([this.worktree.getBranch(),this.worktree.getStatus()]),h=(0,ae.Sb)(c),u=(0,ae.Sb)(l);if(this._branch=h,t.appendMarkdown(`${this.worktree.main?"$(pass) ":""}Worktree for Branch $(git-branch) ${h?.getNameWithoutRemote()??this.worktree.branch}${o}\\\n\`${this.worktree.friendlyPath}\``),i=new r.ThemeIcon("git-branch"),null!=u?(n=u.hasChanges,t.appendMarkdown(`\n\n${u.getFormattedDiffStatus({prefix:"Has Uncommitted Changes\\\n",empty:"No Uncommitted Changes",expand:!0})}`)):"rejected"===l.status&&(C.Yd.error(l.reason,"Worktree status failed"),a=!0),null!=h&&(t.appendMarkdown(`\n\nBranch $(git-branch) ${h.getNameWithoutRemote()}`),!h.remote))if(null!=h.upstream){let i=s.NE.Dash;const r=await h.getRemote();if(h.upstream.missing)i=s.NE.Warning;else if(null!=r){let e,t;for(const{type:i}of r.urls)if("fetch"===i){if(e=!0,t)break}else if("push"===i&&(t=!0,e))break;e&&t?i=s.NE.ArrowsRightLeft:t?i=s.NE.ArrowRight:e&&(i=s.NE.ArrowLeft)}e=`${h.getTrackingStatus({empty:(0,E.vk)(i,0,2),suffix:(0,E.vk)(i,2,2)})}${h.upstream.name}`,t.appendMarkdown(` is ${h.getTrackingStatus({empty:h.upstream.missing?`missing upstream $(git-branch) ${h.upstream.name}`:`up to date with $(git-branch)  ${h.upstream.name}${r?.provider?.name?` on ${r.provider.name}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${h.upstream.name}${r?.provider?.name?` on ${r.provider.name}`:""}`})}`)}else{const e=w.ss.getHighlanderProviderName(await this.view.container.git.getRemotesWithProviders(h.repoPath));t.appendMarkdown(` hasn't been published to ${e??"a remote"}`)}break}case"detached":{let e;i=new r.ThemeIcon("git-commit"),t.appendMarkdown(`${this.worktree.main?"$(pass) ":""}Detached Worktree at $(git-commit) ${(0,f.zL)(this.worktree.sha)}${o}\\\n\`${this.worktree.friendlyPath}\``);try{e=await this.worktree.getStatus()}catch(e){C.Yd.error(e,"Worktree status failed"),a=!0}null!=e&&(n=e.hasChanges,t.appendMarkdown(`\n\n${e.getFormattedDiffStatus({prefix:"Has Uncommitted Changes",empty:"No Uncommitted Changes",expand:!0})}`));break}}const c=this.getState("pendingPullRequest");null!=c&&t.appendMarkdown(`\n\n$(loading~spin) Loading associated pull request${s.NE.Ellipsis}`),a&&t.appendMarkdown(`\n\n${s.NE.Warning} Unable to locate worktree path`);const l=new r.TreeItem(this.worktree.name,r.TreeItemCollapsibleState.Collapsed);return l.id=this.id,l.description=e,l.contextValue=`${Wi.Td.Worktree}${this.worktree.main?"+main":""}${this.worktree.opened?"+active":""}`,l.iconPath=null!=c?new r.ThemeIcon("loading~spin"):this.worktree.opened?new r.ThemeIcon("check"):i,l.tooltip=t,l.resourceUri=a?r.Uri.parse("gitlens-view://worktree/missing"):n?r.Uri.parse("gitlens-view://worktree/changes"):void 0,l}refresh(e){this._children=void 0,e&&(this._log=void 0,this.deleteState())}async getAssociatedPullRequest(e,t){let i=this.getState("pullRequest");if(void 0!==i)return Promise.resolve(i??void 0);let r=this.getState("pendingPullRequest");return r??(r=e.getAssociatedPullRequest(t),this.storeState("pendingPullRequest",r),i=await r,this.storeState("pullRequest",i??null),this.deleteState("pendingPullRequest"),i)}_log;async getLog(){return null==this._log&&(this._log=await this.view.container.git.getLog(this.uri.repoPath,{ref:this.worktree.sha,limit:this.limit??this.view.config.defaultItemLimit})),this._log}get hasMore(){return this._log?.hasMore??!0}async loadMore(e){let t=await r.window.withProgress({location:{viewId:this.view.id}},(()=>this.getLog()));null!=t&&t.hasMore&&(t=await(t.more?.(e??this.view.config.pageItemLimit)),this._log!==t&&(this._log=t,this.limit=t?.count,this._children=void 0,this.triggerChange(!1)))}}on([(0,re.H)(),(0,L.fF)()],WorktreeNode.prototype,"refresh",1),on([(0,re.H)()],WorktreeNode.prototype,"loadMore",1);var an=Object.defineProperty,cn=Object.getOwnPropertyDescriptor;class WorktreesNode extends Wi.Re{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.repo=r,this.updateContext({repository:r}),this._uniqueId=(0,Wi.tO)("worktrees",this.context)}_children;get id(){return this._uniqueId}get repoPath(){return this.repo.path}async getChildren(){if(null==this._children){if(!(await this.repo.access(c.x.Worktrees)).allowed)return[];const e=await this.repo.getWorktrees();if(0===e.length)return[new Mi.AE(this.view,this,"No worktrees could be found.")];this._children=e.map((e=>new WorktreeNode(this.uri,this.view,this,e)))}return this._children}async getTreeItem(){const e=await this.repo.access(c.x.Worktrees),t=new r.TreeItem("Worktrees",e.allowed?r.TreeItemCollapsibleState.Collapsed:r.TreeItemCollapsibleState.None);return t.id=this.id,t.contextValue=Wi.Td.Worktrees,t.description=e.allowed?void 0:` ${s.NE.Warning}  Requires a trial or paid plan for use on privately hosted repos`,t.iconPath=new r.ThemeIcon("folder-opened"),t}refresh(){this._children=void 0}}((e,t,i,r)=>{for(var n,s=r>1?void 0:r?cn(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);r&&s&&an(t,i,s)})([(0,re.H)(),(0,L.fF)()],WorktreesNode.prototype,"refresh",1);var ln=Object.defineProperty,hn=Object.getOwnPropertyDescriptor,un=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?hn(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&ln(t,i,s),s};class RepositoryNode extends Wi.CF{constructor(e,t,i,r,n){super(e,t,i),this.repo=r,this.updateContext({...n,repository:this.repo}),this._uniqueId=(0,Wi.tO)("repository",this.context),this._status=this.repo.getStatus()}_children;_status;get id(){return this._uniqueId}toClipboard(){return this.repo.path}get repoPath(){return this.repo.path}get workspace(){return this.context.workspace}get wsRepositoryDescriptor(){return this.context.wsRepositoryDescriptor}async getChildren(){if(void 0===this._children){const e=[],t=await this._status;if(null!=t){const i=new u.XI(this.view.container,t.repoPath,t.branch,!1,!0,void 0,t.sha,t.upstream?{name:t.upstream,missing:!1}:void 0,t.state.ahead,t.state.behind,t.detached,t.rebasing);!1!==this.view.config.showBranchComparison&&e.push(new CompareBranchNode(this.uri,this.view,this,i,this.view.config.showBranchComparison,!0));const[r,n]=await Promise.all([this.view.container.git.getMergeStatus(t.repoPath),this.view.container.git.getRebaseStatus(t.repoPath)]);if(null!=r?e.push(new MergeStatusNode(this.view,this,i,r,t,!0)):null!=n?e.push(new RebaseStatusNode(this.view,this,i,n,t,!0)):this.view.config.showUpstreamStatus&&(t.upstream?t.state.behind||t.state.ahead?(t.state.behind&&e.push(new BranchTrackingStatusNode(this.view,this,i,t,"behind",!0)),t.state.ahead&&e.push(new BranchTrackingStatusNode(this.view,this,i,t,"ahead",!0,{showAheadCommits:!0}))):e.push(new BranchTrackingStatusNode(this.view,this,i,t,"same",!0)):e.push(new BranchTrackingStatusNode(this.view,this,i,t,"none",!0))),this.view.config.includeWorkingTree&&0!==t.files.length){const i=void 0;e.push(new StatusFilesNode(this.view,this,t,i))}0===e.length||this.view.config.compact||e.push(new Mi.AE(this.view,this,"",s.NE.Dash.repeat(2),"")),this.view.config.showCommits&&e.push(new BranchNode(this.uri,this.view,this,this.repo,i,!0,{showAsCommits:!0,showComparison:!1,showCurrent:!1,showStatus:!1,showTracking:!1}))}this.view.config.showBranches&&e.push(new BranchesNode(this.uri,this.view,this,this.repo)),this.view.config.showRemotes&&e.push(new RemotesNode(this.uri,this.view,this,this.repo)),this.view.config.showStashes&&await this.repo.supports(c.A.Stashes)&&e.push(new StashesNode(this.uri,this.view,this,this.repo)),this.view.config.showTags&&e.push(new TagsNode(this.uri,this.view,this,this.repo)),this.view.config.showWorktrees&&await this.repo.supports(c.A.Worktrees)&&e.push(new WorktreesNode(this.uri,this.view,this,this.repo)),this.view.config.showContributors&&e.push(new ContributorsNode(this.uri,this.view,this,this.repo)),this.view.config.showIncomingActivity&&!this.repo.provider.virtual&&e.push(new ReflogNode(this.uri,this.view,this,this.repo)),this._children=e}return this._children}async getTreeItem(){const e=this.repo.formattedName??this.uri.repoPath??"",t=await(this.repo?.getLastFetched())??0;let i,n=`${this.repo.formattedName??this.uri.repoPath??""}${t?`${(0,E.vk)(s.NE.Dash,2,2)}Last fetched ${v._j.formatLastFetched(t,!1)}`:""}${this.repo.formattedName?`\\\n${this.uri.repoPath}`:""}`,o="";const{workspace:a}=this.context;let c,l=Wi.Td.Repository;this.repo.starred&&(l+="+starred"),null!=a&&(l+="+workspace","cloud"===a.type?l+="+cloud":"local"===a.type&&(l+="+local")),this.repo.closed?(l+="+closed",c=""):c="-solid",this.repo.virtual&&(l+="+virtual",c="-cloud");const h=await this._status;if(null!=h){n+=`\n\nCurrent branch $(git-branch) ${h.branch}${h.rebasing?" (Rebasing)":""}`,this.view.config.includeWorkingTree&&0!==h.files.length&&(o=h.getFormattedDiffStatus({compact:!0,prefix:(0,E.vk)(s.NE.Dot,1,1)}));let e;if(i=`${h.getUpstreamStatus({suffix:(0,E.vk)(s.NE.Dot,1,1)})}${h.branch}${h.rebasing?" (Rebasing)":""}${o}`,null!=h.upstream){const t=w.ss.getHighlanderProviders(await this.view.container.git.getRemotesWithProviders(h.repoPath));e=t?.length?t[0].name:void 0}else{const t=await h.getRemote();e=t?.provider?.name}c+=o?"-blue":"",null!=h.upstream&&(n+=` is ${h.getUpstreamStatus({empty:`up to date with $(git-branch) ${h.upstream}${e?` on ${e}`:""}`,expand:!0,icons:!0,separator:", ",suffix:` $(git-branch) ${h.upstream}${e?` on ${e}`:""}`})}`,h.state.behind&&(l+="+behind",c+="-red"),h.state.ahead&&(c+=h.state.behind?"-yellow":"-green",l+="+ahead")),o&&(n+=`\n\nWorking tree has uncommitted changes${h.getFormattedDiffStatus({expand:!0,prefix:"\n",separator:"\n"})}`)}null!=a&&(n+=`\n\nRepository is ${this.repo.closed?"not ":""}open in the current window`);const u=new r.TreeItem(e,null!=a||"workspaces"===this.view.type?r.TreeItemCollapsibleState.Collapsed:r.TreeItemCollapsibleState.Expanded);u.id=this.id,u.contextValue=l,u.description=`${i??""}${t?`${(0,E.vk)(s.NE.Dot,1,1)}Last fetched ${v._j.formatLastFetched(t)}`:""}`,u.iconPath={dark:this.view.container.context.asAbsolutePath(`images/dark/icon-repo${c}.svg`),light:this.view.container.context.asAbsolutePath(`images/light/icon-repo${c}.svg`)},null==a||this.repo.closed||(u.resourceUri=r.Uri.parse("gitlens-view://workspaces/repository/open"));const d=new r.MarkdownString(n,!0);return d.supportHtml=!0,d.isTrusted=!0,u.tooltip=d,u}fetch(e={}){return this.repo.fetch(e)}pull(e={}){return this.repo.pull(e)}push(e={}){return this.repo.push(e)}async refresh(e=!1){e&&(this._status=this.repo.getStatus(),this._children=void 0),await this.ensureSubscription()}async star(){await this.repo.star(),this.parent.triggerChange()}async unstar(){await this.repo.unstar(),this.parent.triggerChange()}async subscribe(){const e=await(this.repo?.getLastFetched())??0,t=[this.repo.onDidChange(this.onRepositoryChanged,this)],i=v._j.getLastFetchedUpdateInterval(e);return 0!==e&&i>0&&t.push((0,he.DH)((()=>{i!==v._j.getLastFetchedUpdateInterval(e)&&this.resetSubscription(),this.splatted?this.view.triggerNodeChange(this.parent??this):this.view.triggerNodeChange(this)}),i)),this.view.config.includeWorkingTree&&t.push(this.repo.onDidChangeFileSystem(this.onFileSystemChanged,this),this.repo.startWatchingFileSystem()),r.Disposable.from(...t)}etag(){return this.repo.etag}async onFileSystemChanged(e){if(this._status=this.repo.getStatus(),void 0!==this._children){const e=await this._status;let t=this._children.findIndex((e=>e instanceof StatusFilesNode));if(void 0===e||!e.state.ahead&&0===e.files.length)-1!==t&&this._children.splice(t,1);else{let i=1;-1===t&&(t=(0,ot.qr)(this._children,(e=>e instanceof BranchTrackingStatusNode||e instanceof BranchNode)),i=0,t++);const r=void 0;this._children.splice(t,i,new StatusFilesNode(this.view,this,e,r))}}this.triggerChange(!1)}onRepositoryChanged(e){if(e.changed(v.I6.Closed,v.du.Any))this.dispose();else if(null==this._children||e.changed(v.I6.Config,v.I6.Index,v.I6.Heads,v.I6.Opened,v.I6.Status,v.I6.Unknown,v.du.Any))this.triggerChange(!0);else{if(e.changed(v.I6.Remotes,v.I6.RemoteProviders,v.du.Any)){const e=this._children.find((e=>e instanceof RemotesNode));null!=e&&this.view.triggerNodeChange(e)}if(e.changed(v.I6.Stash,v.du.Any)){const e=this._children.find((e=>e instanceof StashesNode));null!=e&&this.view.triggerNodeChange(e)}if(e.changed(v.I6.Tags,v.du.Any)){const e=this._children.find((e=>e instanceof TagsNode));null!=e&&this.view.triggerNodeChange(e)}}}}un([(0,L.cM)()],RepositoryNode.prototype,"fetch",1),un([(0,L.cM)()],RepositoryNode.prototype,"pull",1),un([(0,L.cM)()],RepositoryNode.prototype,"push",1),un([(0,re.H)(),(0,L.fF)()],RepositoryNode.prototype,"refresh",1),un([(0,L.cM)()],RepositoryNode.prototype,"star",1),un([(0,L.cM)()],RepositoryNode.prototype,"unstar",1),un([(0,L.fF)()],RepositoryNode.prototype,"subscribe",1),un([(0,L.fF)({args:{0:e=>`{ repository: ${e.repository?.name??""}, uris(${e.uris.length}): [${e.uris.slice(0,1).map((e=>e.fsPath)).join(", ")}${e.uris.length>1?", ...":""}] }`}})],RepositoryNode.prototype,"onFileSystemChanged",1),un([(0,L.fF)({args:{0:e=>e.toString()}})],RepositoryNode.prototype,"onRepositoryChanged",1);var dn=i(202),pn=i(2758),mn=Object.defineProperty,gn=Object.getOwnPropertyDescriptor,fn=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?gn(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&mn(t,i,s),s};function wn(e,t,i,r=1){return(0,at.xR)(e,((...e)=>{if(0!==r){let[n,s,...o]=e;if(n instanceof Wi.Re&&Array.isArray(s)&&s[0]instanceof Wi.Re)return s=s.filter((e=>e?.constructor===n.constructor)),2===r?t.apply(i,[n,s,...o]):(0,he.df)(t,s.map((e=>[e,...o])),i)}return t.apply(i,e)}),i)}class ViewCommands{constructor(e){this.container=e,wn("gitlens.views.clearNode",(e=>(0,Wi.kr)(e)&&e.clear()),this),(0,at.xR)(s.Gh.ViewsCopy,(async(e,t)=>{if(0===(t=Array.isArray(t)?t:null!=e?[e]:[]).length)return;const i=t.map((e=>e.toClipboard?.())).filter((e=>Boolean(e))).join("\n");await r.env.clipboard.writeText(i)}),this),wn("gitlens.views.dismissNode",(e=>(0,Wi.kP)(e.view)&&e.view.dismissNode(e)),this),wn("gitlens.views.editNode",(e=>(0,Wi.LD)(e)&&e.edit()),this),wn("gitlens.views.expandNode",(e=>e.view.reveal(e,{select:!1,focus:!1,expand:3})),this),wn("gitlens.views.loadMoreChildren",(e=>e.loadMore()),this),wn("gitlens.views.loadAllChildren",(e=>e.loadAll()),this),wn("gitlens.views.refreshNode",((e,t)=>(null==t&&(0,Wi.On)(e)&&(e.limit=void 0,e.view.resetNodeLastKnownLimit(e)),e.view.refreshNode(e,t??!0))),this),wn("gitlens.views.setShowRelativeDateMarkersOn",(()=>this.setShowRelativeDateMarkers(!0)),this),wn("gitlens.views.setShowRelativeDateMarkersOff",(()=>this.setShowRelativeDateMarkers(!1)),this),wn("gitlens.views.fetch",this.fetch,this),wn("gitlens.views.publishBranch",this.publishBranch,this),wn("gitlens.views.publishRepository",this.publishRepository,this),wn("gitlens.views.pull",this.pull,this),wn("gitlens.views.push",this.push,this),wn("gitlens.views.pushWithForce",(e=>this.push(e,!0)),this),wn("gitlens.views.closeRepository",this.closeRepository,this),wn("gitlens.views.setAsDefault",this.setAsDefault,this),wn("gitlens.views.unsetAsDefault",this.unsetAsDefault,this),wn("gitlens.views.openInTerminal",this.openInTerminal,this),wn("gitlens.views.star",this.star,this),wn("gitlens.views.unstar",this.unstar,this),wn("gitlens.views.browseRepoAtRevision",this.browseRepoAtRevision,this),wn("gitlens.views.browseRepoAtRevisionInNewWindow",(e=>this.browseRepoAtRevision(e,{openInNewWindow:!0})),this),wn("gitlens.views.browseRepoBeforeRevision",(e=>this.browseRepoAtRevision(e,{before:!0})),this),wn("gitlens.views.browseRepoBeforeRevisionInNewWindow",(e=>this.browseRepoAtRevision(e,{before:!0,openInNewWindow:!0})),this),wn("gitlens.views.addAuthors",this.addAuthors,this),wn("gitlens.views.addAuthor",this.addAuthor,this),wn("gitlens.views.openChanges",this.openChanges,this),wn("gitlens.views.openChangesWithWorking",this.openChangesWithWorking,this),wn("gitlens.views.openPreviousChangesWithWorking",this.openPreviousChangesWithWorking,this),wn("gitlens.views.openFile",this.openFile,this),wn("gitlens.views.openFileRevision",this.openRevision,this),wn("gitlens.views.openChangedFiles",this.openFiles,this),wn("gitlens.views.openChangedFileDiffs",this.openAllChanges,this),wn("gitlens.views.openChangedFileDiffsWithWorking",this.openAllChangesWithWorking,this),wn("gitlens.views.openChangedFileRevisions",this.openRevisions,this),wn("gitlens.views.applyChanges",this.applyChanges,this),wn("gitlens.views.highlightChanges",this.highlightChanges,this),wn("gitlens.views.highlightRevisionChanges",this.highlightRevisionChanges,this),wn("gitlens.views.restore",this.restore,this),wn("gitlens.views.switchToAnotherBranch",this.switch,this),wn("gitlens.views.switchToBranch",this.switchTo,this),wn("gitlens.views.switchToCommit",this.switchTo,this),wn("gitlens.views.switchToTag",this.switchTo,this),wn("gitlens.views.addRemote",this.addRemote,this),wn("gitlens.views.pruneRemote",this.pruneRemote,this),wn("gitlens.views.removeRemote",this.removeRemote,this),wn("gitlens.views.stageDirectory",this.stageDirectory,this),wn("gitlens.views.stageFile",this.stageFile,this),wn("gitlens.views.unstageDirectory",this.unstageDirectory,this),wn("gitlens.views.unstageFile",this.unstageFile,this),wn("gitlens.views.compareAncestryWithWorking",this.compareAncestryWithWorking,this),wn("gitlens.views.compareWithHead",this.compareHeadWith,this),wn("gitlens.views.compareWithUpstream",this.compareWithUpstream,this),wn("gitlens.views.compareWithSelected",this.compareWithSelected,this),wn("gitlens.views.selectForCompare",this.selectForCompare,this),wn("gitlens.views.compareFileWithSelected",this.compareFileWithSelected,this),wn("gitlens.views.selectFileForCompare",this.selectFileForCompare,this),wn("gitlens.views.compareWithWorking",this.compareWorkingWith,this),wn("gitlens.views.setBranchComparisonToWorking",(e=>this.setBranchComparison(e,"working")),this),wn("gitlens.views.setBranchComparisonToBranch",(e=>this.setBranchComparison(e,"branch")),this),wn("gitlens.views.cherryPick",this.cherryPick,this,2),wn("gitlens.views.title.createBranch",(()=>this.createBranch())),wn("gitlens.views.createBranch",this.createBranch,this),wn("gitlens.views.deleteBranch",this.deleteBranch,this),wn("gitlens.views.renameBranch",this.renameBranch,this),wn("gitlens.views.title.applyStash",(()=>this.applyStash())),wn("gitlens.views.stash.delete",this.deleteStash,this,2),wn("gitlens.views.stash.rename",this.renameStash,this),wn("gitlens.views.title.createTag",(()=>this.createTag())),wn("gitlens.views.createTag",this.createTag,this),wn("gitlens.views.deleteTag",this.deleteTag,this),wn("gitlens.views.mergeBranchInto",this.merge,this),wn("gitlens.views.pushToCommit",this.pushToCommit,this),wn("gitlens.views.rebaseOntoBranch",this.rebase,this),wn("gitlens.views.rebaseOntoUpstream",this.rebaseToRemote,this),wn("gitlens.views.rebaseOntoCommit",this.rebase,this),wn("gitlens.views.resetCommit",this.resetCommit,this),wn("gitlens.views.resetToCommit",this.resetToCommit,this),wn("gitlens.views.resetToTip",this.resetToTip,this),wn("gitlens.views.revert",this.revert,this),wn("gitlens.views.undoCommit",this.undoCommit,this),wn("gitlens.views.createPullRequest",this.createPullRequest,this),wn("gitlens.views.openPullRequest",this.openPullRequest,this),wn("gitlens.views.title.createWorktree",(()=>this.createWorktree())),wn("gitlens.views.createWorktree",this.createWorktree,this),wn("gitlens.views.deleteWorktree",this.deleteWorktree,this),wn("gitlens.views.openWorktree",this.openWorktree,this),wn("gitlens.views.revealRepositoryInExplorer",this.revealRepositoryInExplorer,this),wn("gitlens.views.revealWorktreeInExplorer",this.revealWorktreeInExplorer,this),wn("gitlens.views.openWorktreeInNewWindow",(e=>this.openWorktree(e,{location:"newWindow"})),this)}addAuthors(e){return pr.q((0,Wi.pp)(e))}addAuthor(e){return e instanceof ContributorNode?pr.q(e.repoPath,e.contributor.current?void 0:e.contributor):Promise.resolve()}addRemote(e){return mr.IH((0,Wi.pp)(e))}applyChanges(e){return e instanceof Wi.RW?e instanceof dn.C?dr.zb(e.file,(0,f.xB)(e.ref1,e.repoPath),(0,f.xB)(e.ref2,e.repoPath)):null==e.ref||"HEAD"===e.ref.ref?Promise.resolve():dr.zb(e.file,e.ref):Promise.resolve()}applyStash(){return fr.nn()}browseRepoAtRevision(e,t){return e instanceof Wi.bT||e instanceof Wi.RW?(0,hr.g)(e.uri,{before:t?.before,openInNewWindow:t?.openInNewWindow}):Promise.resolve()}cherryPick(e,t){return e instanceof Ni.D?null!=t&&0!==t.length?gr.QP(e.repoPath,t.map((e=>e.ref))):gr.QP(e.repoPath,e.ref):Promise.resolve()}closeRepository(e){(e instanceof RepositoryNode||e instanceof Wi.vb)&&(e.repo.closed=!0)}async createBranch(e){let t=e instanceof Wi.bT||e instanceof Wi.RW?e?.ref:e instanceof BranchTrackingStatusNode?e.branch:void 0;if(null==t){t=await this.container.git.getBranch(e?.repoPath??this.container.git.getBestRepository()?.uri)}return ur.Ue(e?.repoPath,t)}async createPullRequest(e){if(!(e instanceof BranchNode||e instanceof BranchTrackingStatusNode))return Promise.resolve();const t=await e.branch.getRemote();return(0,at.SI)("createPullRequest",{repoPath:e.repoPath,remote:null!=t?{name:t.name,provider:null!=t.provider?{id:t.provider.id,name:t.provider.name,domain:t.provider.domain}:void 0,url:t.url}:void 0,branch:{name:e.branch.name,upstream:e.branch.upstream?.name,isRemote:e.branch.remote}})}async createTag(e){let t=e instanceof Wi.bT||e instanceof Wi.RW?e?.ref:e instanceof BranchTrackingStatusNode?e.branch:void 0;if(null==t){t=await this.container.git.getBranch(e?.repoPath??this.container.git.getBestRepository()?.uri)}return wr.Ue(e?.repoPath,t)}async createWorktree(e){if(e instanceof WorktreesNode&&(e=void 0),null==e||e instanceof BranchNode)return vr.Ue(e?.repoPath,void 0,e?.ref)}deleteBranch(e){return e instanceof BranchNode?ur.Od(e.repoPath,e.branch):Promise.resolve()}deleteStash(e,t){if(!(e instanceof zr.i))return Promise.resolve();if(null!=t&&0!==t.length){const e=t.sort(((e,t)=>parseInt(t.commit.number,10)-parseInt(e.commit.number,10)));return(0,he.df)(fr.Cw,e.map((e=>[e.repoPath,e.commit])),this)}return fr.Cw(e.repoPath,e.commit)}renameStash(e){return e instanceof zr.i?fr.PQ(e.repoPath,e.commit):Promise.resolve()}deleteTag(e){return e instanceof TagNode?wr.Od(e.repoPath,e.tag):Promise.resolve()}async deleteWorktree(e){if(e instanceof WorktreeNode)return vr.Od(e.repoPath,e.worktree.uri)}fetch(e){return e instanceof RepositoryNode||e instanceof Wi.vb?gr.he(e.repo):e instanceof RemoteNode?mr.he(e.remote.repoPath,e.remote.name):e instanceof BranchNode||e instanceof BranchTrackingStatusNode?gr.he(e.repoPath,e.root?void 0:e.branch):Promise.resolve()}async highlightChanges(e){(e instanceof yr.R||e instanceof pn.y||e instanceof Rr.m||e instanceof dn.C)&&(await this.openFile(e,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(r.window.activeTextEditor,"changes",{sha:e.ref.ref},!0))}async highlightRevisionChanges(e){(e instanceof yr.R||e instanceof pn.y||e instanceof Rr.m||e instanceof dn.C)&&(await this.openFile(e,{preserveFocus:!0,preview:!0}),await this.container.fileAnnotations.toggle(r.window.activeTextEditor,"changes",{sha:e.ref.ref,only:!0},!0))}merge(e){return e instanceof BranchNode||e instanceof TagNode?gr.TS(e.repoPath,e instanceof BranchNode?e.branch:e.tag):Promise.resolve()}openInTerminal(e){return e instanceof RepositoryNode||e instanceof Wi.vb?(0,at.dO)("openInTerminal",r.Uri.file(e.repo.path)):Promise.resolve()}openPullRequest(e){return e instanceof tr.Z?(0,at.SI)("openPullRequest",{repoPath:e.uri.repoPath,provider:{id:e.pullRequest.provider.id,name:e.pullRequest.provider.name,domain:e.pullRequest.provider.domain},pullRequest:{id:e.pullRequest.id,url:e.pullRequest.url}}):Promise.resolve()}openWorktree(e,t){e instanceof WorktreeNode&&(0,G.ic)(e.worktree.uri,t)}pruneRemote(e){return e instanceof RemoteNode?mr.Qs(e.remote.repoPath,e.remote.name):Promise.resolve()}async removeRemote(e){return e instanceof RemoteNode?mr.Od(e.remote.repoPath,e.remote.name):Promise.resolve()}publishBranch(e){return e instanceof BranchNode||e instanceof BranchTrackingStatusNode?gr.VF(e.repoPath,void 0,e.branch):Promise.resolve()}publishRepository(e){return e instanceof BranchNode||e instanceof BranchTrackingStatusNode?(0,at.Zv)("git.publish",r.Uri.file(e.repoPath)):Promise.resolve()}pull(e){return e instanceof RepositoryNode||e instanceof Wi.vb?gr.X4(e.repo):e instanceof BranchNode||e instanceof BranchTrackingStatusNode?gr.X4(e.repoPath,e.root?void 0:e.branch):Promise.resolve()}push(e,t){return e instanceof RepositoryNode||e instanceof Wi.vb?gr.VF(e.repo,t):e instanceof BranchNode||e instanceof BranchTrackingStatusNode?gr.VF(e.repoPath,t,e.root?void 0:e.branch):e instanceof Ni.D||e instanceof Rr.m?e.isTip?gr.VF(e.repoPath,t):this.pushToCommit(e):Promise.resolve()}pushToCommit(e){return e instanceof Ni.D||e instanceof Rr.m?gr.VF(e.repoPath,!1,e.commit):Promise.resolve()}rebase(e){return e instanceof BranchNode||e instanceof Ni.D||e instanceof Rr.m||e instanceof TagNode?gr.DW(e.repoPath,e.ref):Promise.resolve()}rebaseToRemote(e){if(!(e instanceof BranchNode||e instanceof BranchTrackingStatusNode))return Promise.resolve();const t=e instanceof BranchNode?e.branch.upstream?.name:e.status.upstream;return null==t?Promise.resolve():gr.DW(e.repoPath,(0,f.xB)(t,e.repoPath,{refType:"branch",name:t,remote:!0}))}renameBranch(e){return e instanceof BranchNode?ur.PQ(e.repoPath,e.branch):Promise.resolve()}resetCommit(e){return e instanceof Ni.D||e instanceof Rr.m?gr.mc(e.repoPath,(0,f.xB)(`${e.ref.ref}^`,e.ref.repoPath,{refType:"revision",name:`${e.ref.name}^`,message:e.ref.message})):Promise.resolve()}resetToCommit(e){return e instanceof Ni.D||e instanceof Rr.m?gr.mc(e.repoPath,e.ref):Promise.resolve()}resetToTip(e){return e instanceof BranchNode?gr.mc(e.repoPath,(0,f.xB)(e.ref.ref,e.repoPath,{refType:"revision",name:e.ref.name})):Promise.resolve()}restore(e){return e instanceof Wi.RW?dr.Hl(e.file,e.ref):Promise.resolve()}revealRepositoryInExplorer(e){if(e instanceof RepositoryNode)return gr.qM(e.repo)}revealWorktreeInExplorer(e){if(e instanceof WorktreeNode)return vr.qM(e.worktree)}revert(e){return e instanceof Ni.D||e instanceof Rr.m?gr.CU(e.repoPath,e.ref):Promise.resolve()}setAsDefault(e){return e instanceof RemoteNode?e.setAsDefault():Promise.resolve()}setBranchComparison(e,t){if(e instanceof CompareBranchNode)return e.setComparisonType(t)}setShowRelativeDateMarkers(e){return te.D.updateEffective("views.showRelativeDateMarkers",e)}async stageFile(e){(e instanceof yr.R||e instanceof Rr.m||e instanceof Bi.q)&&(await this.container.git.stageFile(e.repoPath,e.file.path),e.triggerChange())}async stageDirectory(e){e instanceof xi.Y&&e.relativePath&&(await this.container.git.stageDirectory(e.repoPath,e.relativePath),e.triggerChange())}star(e){return e instanceof BranchNode||e instanceof RepositoryNode||e instanceof Wi.vb?e.star():Promise.resolve()}switch(e){return gr.gu((0,Wi.pp)(e))}switchTo(e){return e instanceof Wi.bT?gr.gu(e.repoPath,e instanceof BranchNode&&e.branch.current?void 0:e.ref):gr.gu((0,Wi.pp)(e))}async undoCommit(e){if(!(e instanceof Ni.D||e instanceof Rr.m))return;const t=await this.container.git.getOrOpenScmRepository(e.repoPath),i=await(t?.getCommit("HEAD"));i?.hash===e.ref.ref?await(0,at.Zv)("git.undoCommit",e.repoPath):r.window.showWarningMessage(`Commit ${(0,f.Wh)(e.ref,{capitalize:!0,icon:!1})} cannot be undone, because it is no longer the most recent commit.`)}unsetAsDefault(e){return e instanceof RemoteNode?e.setAsDefault(!1):Promise.resolve()}async unstageFile(e){(e instanceof yr.R||e instanceof Rr.m||e instanceof Bi.q)&&(await this.container.git.unstageFile(e.repoPath,e.file.path),e.triggerChange())}async unstageDirectory(e){e instanceof xi.Y&&e.relativePath&&(await this.container.git.unstageDirectory(e.repoPath,e.relativePath),e.triggerChange())}unstar(e){return e instanceof BranchNode||e instanceof RepositoryNode||e instanceof Wi.vb?e.unstar():Promise.resolve()}compareHeadWith(e){return e instanceof Wi.bT||e instanceof Wi.RW?e instanceof Wi.RW?this.compareFileWith(e.repoPath,e.uri,e.ref.ref,void 0,"HEAD"):this.container.searchAndCompareView.compare(e.repoPath,"HEAD",e.ref):Promise.resolve()}compareWithUpstream(e){return e instanceof BranchNode?null==e.branch.upstream?Promise.resolve():this.container.searchAndCompareView.compare(e.repoPath,e.ref,e.branch.upstream.name):Promise.resolve()}compareWorkingWith(e){return e instanceof Wi.bT||e instanceof Wi.RW?e instanceof Wi.RW?this.compareFileWith(e.repoPath,e.uri,e.ref.ref,void 0,""):this.container.searchAndCompareView.compare(e.repoPath,"",e.ref):Promise.resolve()}async compareAncestryWithWorking(e){if(!(e instanceof BranchNode))return;const t=await this.container.git.getBranch(e.repoPath);if(null==t)return;const i=await this.container.git.getMergeBase(e.repoPath,t.ref,e.ref.ref);return null!=i?this.container.searchAndCompareView.compare(e.repoPath,{ref:i,label:`ancestry with ${e.ref.ref} (${(0,f.zL)(i)})`},""):void 0}compareWithSelected(e){(e instanceof Wi.bT||e instanceof Wi.RW)&&this.container.searchAndCompareView.compareWithSelected(e.repoPath,e.ref)}selectForCompare(e){(e instanceof Wi.bT||e instanceof Wi.RW)&&this.container.searchAndCompareView.selectForCompare(e.repoPath,e.ref)}async compareFileWith(e,t,i,r,n){return null==r&&(r=await this.container.git.getWorkingUri(e,t)),(0,at.P0)(s.Gh.DiffWith,{repoPath:e,lhs:{sha:i,uri:t},rhs:{sha:n,uri:r??t}})}compareFileWithSelected(e){if(null==this._selectedFile||!(e instanceof Wi.RW)||null==e.ref)return Promise.resolve();if(this._selectedFile.repoPath!==e.repoPath)return this.selectFileForCompare(e),Promise.resolve();const t=this._selectedFile;return this._selectedFile=void 0,(0,ie.v)("gitlens:views:canCompare:file",!1),this.compareFileWith(t.repoPath,t.uri,t.ref,e.uri,e.ref.ref)}_selectedFile;selectFileForCompare(e){e instanceof Wi.RW&&null!=e.ref&&(this._selectedFile={ref:e.ref.ref,repoPath:e.repoPath,uri:e.uri},(0,ie.v)("gitlens:views:canCompare:file",!0))}async openAllChanges(e,t){if(e instanceof Ni.D||e instanceof zr.i||e instanceof Yi.V){if(e instanceof Yi.V){const{files:i}=await e.getFilesQueryResults();if(null==i||0===i.length)return;return dr.Gp(i,{repoPath:e.repoPath,ref1:e.ref1,ref2:e.ref2},t)}return dr.Gp(e.commit,t)}}openChanges(e){if(!(e instanceof Wi.RW||e instanceof MergeConflictFileNode||e instanceof Bi.q))return;if(e instanceof MergeConflictFileNode)return void(0,at.P0)(s.Gh.DiffWith,{lhs:{sha:e.status.HEAD.ref,uri:h.YY.fromFile(e.file,e.repoPath,void 0,!0)},rhs:{sha:"HEAD",uri:h.YY.fromFile(e.file,e.repoPath)},repoPath:e.repoPath,line:0,showOptions:{preserveFocus:!1,preview:!1}});const t=e.getCommand();if(null!=t?.arguments)switch(t.command){case s.Gh.DiffWith:{const[e]=t.arguments;e.showOptions.preview=!1,(0,at.P0)(t.command,e);break}case s.Gh.DiffWithPrevious:{const[,e]=t.arguments;e.showOptions.preview=!1,(0,at.b2)(t.command,void 0,e);break}default:throw new Error(`Unexpected command: ${t.command}`)}}async openAllChangesWithWorking(e,t){if(e instanceof Ni.D||e instanceof zr.i||e instanceof Yi.V){if(e instanceof Yi.V){const{files:i}=await e.getFilesQueryResults();if(null==i||0===i.length)return;return dr.Ou(i,{repoPath:e.repoPath,ref:e.ref1||e.ref2},t)}return dr.Ou(e.commit,t)}}async openChangesWithWorking(e){if(!(e instanceof Wi.RW||e instanceof MergeConflictFileNode||e instanceof Bi.q))return Promise.resolve();if(e instanceof Bi.q)return(0,at.b2)(s.Gh.DiffWithWorking,void 0,{uri:e.uri,showOptions:{preserveFocus:!0,preview:!0}});if(e instanceof MergeConflictFileNode)return(0,at.b2)(s.Gh.DiffWithWorking,void 0,{uri:e.baseUri,showOptions:{preserveFocus:!0,preview:!0}});if(e instanceof Rr.m&&e.commit.file?.hasConflicts){const t=await e.getConflictBaseUri();if(null!=t)return(0,at.b2)(s.Gh.DiffWithWorking,void 0,{uri:t,showOptions:{preserveFocus:!0,preview:!0}})}return dr.ce(e.file,{repoPath:e.repoPath,ref:e.ref.ref})}async openPreviousChangesWithWorking(e){return e instanceof Wi.RW?dr.ce(e.file,{repoPath:e.repoPath,ref:`${e.ref.ref}^`}):Promise.resolve()}openFile(e,t){return e instanceof Wi.RW||e instanceof MergeConflictFileNode||e instanceof Bi.q||e instanceof FileHistoryNode||e instanceof LineHistoryNode?dr.ZB(e.uri,{preserveFocus:!0,preview:!1,...t}):Promise.resolve()}async openFiles(e){if(e instanceof Ni.D||e instanceof zr.i||e instanceof Yi.V){if(e instanceof Yi.V){const{files:t}=await e.getFilesQueryResults();if(null==t||0===t.length)return;return dr.aE(t,e.repoPath,e.ref1||e.ref2)}return dr.aE(e.commit)}}async openRevision(e,t){if(!(e instanceof yr.R||e instanceof Rr.m||e instanceof dn.C||e instanceof pn.y||e instanceof MergeConflictFileNode||e instanceof Bi.q))return Promise.resolve();let i=(t={showOptions:{preserveFocus:!0,preview:!1},...t}).revisionUri;return null==i&&(i=e instanceof dn.C||e instanceof MergeConflictFileNode?this.container.git.getRevisionUri(e.uri):"D"===e.commit.file?.status?this.container.git.getRevisionUri(await e.commit.getPreviousSha()??p.Ii,e.commit.file.path,e.commit.repoPath):this.container.git.getRevisionUri(e.uri)),dr.YS(i,t.showOptions??{preserveFocus:!0,preview:!1})}async openRevisions(e,t){if(e instanceof Ni.D||e instanceof zr.i||e instanceof Yi.V){if(e instanceof Yi.V){const{files:t}=await e.getFilesQueryResults();if(null==t||0===t.length)return;return dr.Dh(t,e.repoPath,e.ref1,e.ref2)}return dr.Dh(e.commit)}}}fn([(0,L.fF)()],ViewCommands.prototype,"addAuthors",1),fn([(0,L.fF)()],ViewCommands.prototype,"addAuthor",1),fn([(0,L.fF)()],ViewCommands.prototype,"addRemote",1),fn([(0,L.fF)()],ViewCommands.prototype,"applyChanges",1),fn([(0,L.fF)()],ViewCommands.prototype,"applyStash",1),fn([(0,L.fF)()],ViewCommands.prototype,"browseRepoAtRevision",1),fn([(0,L.fF)()],ViewCommands.prototype,"cherryPick",1),fn([(0,L.fF)()],ViewCommands.prototype,"closeRepository",1),fn([(0,L.fF)()],ViewCommands.prototype,"createBranch",1),fn([(0,L.fF)()],ViewCommands.prototype,"createPullRequest",1),fn([(0,L.fF)()],ViewCommands.prototype,"createTag",1),fn([(0,L.fF)()],ViewCommands.prototype,"createWorktree",1),fn([(0,L.fF)()],ViewCommands.prototype,"deleteBranch",1),fn([(0,L.fF)()],ViewCommands.prototype,"deleteStash",1),fn([(0,L.fF)()],ViewCommands.prototype,"renameStash",1),fn([(0,L.fF)()],ViewCommands.prototype,"deleteTag",1),fn([(0,L.fF)()],ViewCommands.prototype,"deleteWorktree",1),fn([(0,L.fF)()],ViewCommands.prototype,"fetch",1),fn([(0,L.fF)()],ViewCommands.prototype,"highlightChanges",1),fn([(0,L.fF)()],ViewCommands.prototype,"highlightRevisionChanges",1),fn([(0,L.fF)()],ViewCommands.prototype,"merge",1),fn([(0,L.fF)()],ViewCommands.prototype,"openInTerminal",1),fn([(0,L.fF)()],ViewCommands.prototype,"openPullRequest",1),fn([(0,L.fF)()],ViewCommands.prototype,"openWorktree",1),fn([(0,L.fF)()],ViewCommands.prototype,"pruneRemote",1),fn([(0,L.fF)()],ViewCommands.prototype,"removeRemote",1),fn([(0,L.fF)()],ViewCommands.prototype,"publishBranch",1),fn([(0,L.fF)()],ViewCommands.prototype,"publishRepository",1),fn([(0,L.fF)()],ViewCommands.prototype,"pull",1),fn([(0,L.fF)()],ViewCommands.prototype,"push",1),fn([(0,L.fF)()],ViewCommands.prototype,"pushToCommit",1),fn([(0,L.fF)()],ViewCommands.prototype,"rebase",1),fn([(0,L.fF)()],ViewCommands.prototype,"rebaseToRemote",1),fn([(0,L.fF)()],ViewCommands.prototype,"renameBranch",1),fn([(0,L.fF)()],ViewCommands.prototype,"resetCommit",1),fn([(0,L.fF)()],ViewCommands.prototype,"resetToCommit",1),fn([(0,L.fF)()],ViewCommands.prototype,"resetToTip",1),fn([(0,L.fF)()],ViewCommands.prototype,"restore",1),fn([(0,L.fF)()],ViewCommands.prototype,"revealRepositoryInExplorer",1),fn([(0,L.fF)()],ViewCommands.prototype,"revealWorktreeInExplorer",1),fn([(0,L.fF)()],ViewCommands.prototype,"revert",1),fn([(0,L.fF)()],ViewCommands.prototype,"setAsDefault",1),fn([(0,L.fF)()],ViewCommands.prototype,"setBranchComparison",1),fn([(0,L.fF)()],ViewCommands.prototype,"setShowRelativeDateMarkers",1),fn([(0,L.fF)()],ViewCommands.prototype,"stageFile",1),fn([(0,L.fF)()],ViewCommands.prototype,"stageDirectory",1),fn([(0,L.fF)()],ViewCommands.prototype,"star",1),fn([(0,L.fF)()],ViewCommands.prototype,"switch",1),fn([(0,L.fF)()],ViewCommands.prototype,"switchTo",1),fn([(0,L.fF)()],ViewCommands.prototype,"undoCommit",1),fn([(0,L.fF)()],ViewCommands.prototype,"unsetAsDefault",1),fn([(0,L.fF)()],ViewCommands.prototype,"unstageFile",1),fn([(0,L.fF)()],ViewCommands.prototype,"unstageDirectory",1),fn([(0,L.fF)()],ViewCommands.prototype,"unstar",1),fn([(0,L.fF)()],ViewCommands.prototype,"compareHeadWith",1),fn([(0,L.fF)()],ViewCommands.prototype,"compareWithUpstream",1),fn([(0,L.fF)()],ViewCommands.prototype,"compareWorkingWith",1),fn([(0,L.fF)()],ViewCommands.prototype,"compareAncestryWithWorking",1),fn([(0,L.fF)()],ViewCommands.prototype,"compareWithSelected",1),fn([(0,L.fF)()],ViewCommands.prototype,"selectForCompare",1),fn([(0,L.fF)()],ViewCommands.prototype,"compareFileWithSelected",1),fn([(0,L.fF)()],ViewCommands.prototype,"selectFileForCompare",1),fn([(0,L.fF)()],ViewCommands.prototype,"openAllChanges",1),fn([(0,L.fF)()],ViewCommands.prototype,"openChanges",1),fn([(0,L.fF)()],ViewCommands.prototype,"openAllChangesWithWorking",1),fn([(0,L.fF)()],ViewCommands.prototype,"openChangesWithWorking",1),fn([(0,L.fF)()],ViewCommands.prototype,"openPreviousChangesWithWorking",1),fn([(0,L.fF)()],ViewCommands.prototype,"openFile",1),fn([(0,L.fF)()],ViewCommands.prototype,"openFiles",1),fn([(0,L.fF)()],ViewCommands.prototype,"openRevision",1),fn([(0,L.fF)()],ViewCommands.prototype,"openRevisions",1);var vn=Object.defineProperty,yn=Object.getOwnPropertyDescriptor,bn=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?yn(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&vn(t,i,s),s};class BranchesRepositoryNode extends Wi.vb{async getChildren(){return null==this.child&&(this.child=new BranchesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(v.I6.Config,v.I6.Heads,v.I6.Index,v.I6.Remotes,v.I6.RemoteProviders,v.I6.Status,v.I6.Unknown,v.du.Any)}}class BranchesViewNode extends Wi.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No branches could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new BranchesRepositoryNode(h.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.repo.getBranches({filter:e=>!e.remote});return 0===t.values.length?(this.view.message="No branches could be found.",this.view.title="Branches",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Branches (${t.values.length})`,e.getChildren())}return this.view.title="Branches",this.children}getTreeItem(){return new r.TreeItem("Branches",r.TreeItemCollapsibleState.Expanded)}}class BranchesView extends ViewBase{configKey="branches";constructor(e){super(e,"branches","Branches","branchesView")}get canReveal(){return this.config.reveal||!te.D.get("views.repositories.showBranches")}getRoot(){return new BranchesViewNode(this)}registerCommands(){return this.container.viewCommands,[wn(this.getQualifiedCommand("copy"),(()=>(0,at.P0)(s.Gh.ViewsCopy,this.activeSelection,this.selection)),this),wn(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("branches"),this.refresh(!0))),this),wn(this.getQualifiedCommand("setLayoutToList"),(()=>this.setLayout("list")),this),wn(this.getQualifiedCommand("setLayoutToTree"),(()=>this.setLayout("tree")),this),wn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),wn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),wn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),wn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),wn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),wn(this.getQualifiedCommand("setShowBranchComparisonOn"),(()=>this.setShowBranchComparison(!0)),this),wn(this.getQualifiedCommand("setShowBranchComparisonOff"),(()=>this.setShowBranchComparison(!1)),this),wn(this.getQualifiedCommand("setShowBranchPullRequestOn"),(()=>this.setShowBranchPullRequest(!0)),this),wn(this.getQualifiedCommand("setShowBranchPullRequestOff"),(()=>this.setShowBranchPullRequest(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||te.D.changed(e,"defaultDateFormat")||te.D.changed(e,"defaultDateLocale")||te.D.changed(e,"defaultDateShortFormat")||te.D.changed(e,"defaultDateSource")||te.D.changed(e,"defaultDateStyle")||te.D.changed(e,"defaultGravatarsStyle")||te.D.changed(e,"defaultTimeFormat")||te.D.changed(e,"sortBranchesBy"))}findBranch(e,t){if(e.remote)return;const{repoPath:i}=e;return this.findNode((t=>t.branch?.ref===e.ref),{allowPaging:!0,maxDepth:4,canTraverse:e=>e instanceof BranchesViewNode||(e instanceof BranchesRepositoryNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async findCommit(e,t){const{repoPath:i}=e,r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,d.f_)(e)?{commitDate:e.committer.date}:void 0);if(0!==r.length)return this.findNode((t=>t.commit?.ref===e.ref),{allowPaging:!0,maxDepth:5,canTraverse:async t=>t instanceof BranchesViewNode||(t instanceof BranchesRepositoryNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:!!(t instanceof BranchNode&&t.repoPath===i&&r.includes(t.branch.name))&&(await t.loadMore({until:e.ref}),!0)),token:t})}revealBranch(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,f.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,r)=>{const n=await this.findBranch(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}async revealCommit(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,f.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,r)=>{const n=await this.findCommit(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof Wi.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof BranchesViewNode||e instanceof Wi.vb});return void 0!==i&&await this.reveal(i,t),i}setLayout(e){return te.D.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return te.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return te.D.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return te.D.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"branch")}async setShowBranchPullRequest(e){await te.D.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await te.D.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}}bn([(0,re.H)((()=>""))],BranchesView.prototype,"revealBranch",1),bn([(0,re.H)((()=>""))],BranchesView.prototype,"revealCommit",1),bn([(0,re.H)((()=>""))],BranchesView.prototype,"revealRepository",1);var Cn=Object.defineProperty,An=Object.getOwnPropertyDescriptor,Sn=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?An(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Cn(t,i,s),s};class CommitsRepositoryNode extends Wi.vb{async getChildren(){if(null==this.child){const e=await this.repo.getBranch();if(null==e)return this.view.message="No commits could be found.",[];let t;if(this.view.message=void 0,this.view.state.myCommitsOnly){const e=await this.view.container.git.getCurrentUser(this.repo.path);null!=e&&(t=[{name:e.name,email:e.email,username:e.username,id:e.id}])}this.child=new BranchNode(this.uri,this.view,this.splatted?this.parent??this:this,this.repo,e,!0,{expanded:!0,limitCommits:!this.splatted,showComparison:this.view.config.showBranchComparison,showCurrent:!1,showTracking:!0,authors:t})}return this.child.getChildren()}async refresh(e=!1){e?this.child=void 0:this.parent?.triggerChange(!1),await this.ensureSubscription()}async subscribe(){const e=await(this.repo?.getLastFetched())??0,t=v._j.getLastFetchedUpdateInterval(e);return 0!==e&&t>0?r.Disposable.from(await super.subscribe(),(0,he.DH)((()=>{t!==v._j.getLastFetchedUpdateInterval(e)&&this.resetSubscription(),this.splatted?this.view.triggerNodeChange(this.parent??this):this.view.triggerNodeChange(this)}),t)):super.subscribe()}changed(e){return e.changed(v.I6.Config,v.I6.Heads,v.I6.Index,v.I6.Remotes,v.I6.RemoteProviders,v.I6.Status,v.I6.Unknown,v.du.Any)}}Sn([(0,re.H)(),(0,L.fF)()],CommitsRepositoryNode.prototype,"refresh",1),Sn([(0,L.fF)()],CommitsRepositoryNode.prototype,"subscribe",1);class CommitsViewNode extends Wi.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No commits could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new CommitsRepositoryNode(h.YY.fromRepoPath(e.path),this.view,this,e,t,{showBranchAndLastFetched:!0})))}const e=te.D.get("plusFeatures.enabled")&&null==this.view.container.usage.get("graphView:shown")&&null==this.view.container.usage.get("graphWebview:shown")?new Mi.$h(this.view,this,(0,at.fA)(s.Gh.ShowGraph,"Show Commit Graph"),"Visualize commits on the Commit Graph ✨",void 0,"Visualize commits on the Commit Graph ✨",new r.ThemeIcon("gitlens-graph")):void 0;if(1===this.children.length){const[t]=this.children,i=await t.repo.getBranch();if(null!=i){const e=await t.repo.getLastFetched()??0,r=i.getTrackingStatus();this.view.description=`${r?`${r} ${s.NE.Dot} `:""}${i.name}${i.rebasing?" (Rebasing)":""}${e?` ${s.NE.Dot} Last fetched ${v._j.formatLastFetched(e)}`:""}`}return null==e?t.getChildren():[e,...await t.getChildren()]}return null==e?this.children:[e,...this.children]}getTreeItem(){return new r.TreeItem("Commits",r.TreeItemCollapsibleState.Expanded)}}class CommitsView extends ViewBase{configKey="commits";constructor(e){super(e,"commits","Commits","commitsView"),this.disposables.push(e.usage.onDidChange(this.onUsageChanged,this))}onUsageChanged(e){null!=e&&"graphView:shown"!==e.key&&"graphWebview:shown"!==e.key||this.refresh()}get canReveal(){return this.config.reveal||!te.D.get("views.repositories.showCommits")}_state={};get state(){return this._state}getRoot(){return new CommitsViewNode(this)}registerCommands(){return this.container.viewCommands,[wn(this.getQualifiedCommand("copy"),(()=>(0,at.P0)(s.Gh.ViewsCopy,this.activeSelection,this.selection)),this),wn(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("branches","status","tags"),this.refresh(!0))),this),wn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),wn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),wn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),wn(this.getQualifiedCommand("setMyCommitsOnlyOn"),(()=>this.setMyCommitsOnly(!0)),this),wn(this.getQualifiedCommand("setMyCommitsOnlyOff"),(()=>this.setMyCommitsOnly(!1)),this),wn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),wn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),wn(this.getQualifiedCommand("setShowBranchComparisonOn"),(()=>this.setShowBranchComparison(!0)),this),wn(this.getQualifiedCommand("setShowBranchComparisonOff"),(()=>this.setShowBranchComparison(!1)),this),wn(this.getQualifiedCommand("setShowBranchPullRequestOn"),(()=>this.setShowBranchPullRequest(!0)),this),wn(this.getQualifiedCommand("setShowBranchPullRequestOff"),(()=>this.setShowBranchPullRequest(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||te.D.changed(e,"defaultDateFormat")||te.D.changed(e,"defaultDateLocale")||te.D.changed(e,"defaultDateShortFormat")||te.D.changed(e,"defaultDateSource")||te.D.changed(e,"defaultDateStyle")||te.D.changed(e,"defaultGravatarsStyle")||te.D.changed(e,"defaultTimeFormat")||te.D.changed(e,"plusFeatures.enabled"))}onSelectionChanged(e){super.onSelectionChanged(e),this.notifySelections()}onVisibilityChanged(e){super.onVisibilityChanged(e),e.visible&&this.notifySelections()}notifySelections(){const e=this.selection?.[0];null!=e&&((e instanceof Ni.D||e instanceof Rr.m||e instanceof yr.R)&&this.container.events.fire("commit:selected",{commit:e.commit,interaction:"passive",preserveFocus:!0,preserveVisibility:!0},{source:this.id}),(e instanceof Rr.m||e instanceof yr.R)&&this.container.events.fire("file:selected",{uri:e.uri,preserveFocus:!0,preserveVisibility:!0},{source:this.id}))}async findCommit(e,t){const{repoPath:i}=e,r=await this.container.git.getBranch(e.repoPath);if(null==r)return;return(await this.container.git.getCommitBranches(e.repoPath,e.ref,r.name,{commitDate:(0,d.f_)(e)?e.committer.date:void 0})).length?this.findNode((t=>t.commit?.ref===e.ref),{allowPaging:!0,maxDepth:2,canTraverse:async t=>{if(t instanceof CommitsViewNode){let i=await(t.getSplattedChild?.());return i instanceof CommitsRepositoryNode&&(i=await(i.getSplattedChild?.()),i instanceof BranchNode&&await i.loadMore({until:e.ref})),!0}if(t instanceof CommitsRepositoryNode&&t.repoPath===i){const i=await(t.getSplattedChild?.());if(i instanceof BranchNode)return await i.loadMore({until:e.ref}),!0}return t instanceof BranchTrackingStatusNode&&t.repoPath===i},token:t}):void 0}async revealCommit(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,f.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,r)=>{const n=await this.findCommit(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof Wi.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof CommitsViewNode||e instanceof Wi.vb});return void 0!==i&&await this.reveal(i,t),i}setFilesLayout(e){return te.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setMyCommitsOnly(e){(0,ie.v)("gitlens:views:commits:myCommitsOnly",e),this.state.myCommitsOnly=e,this.refresh(!0)}setShowAvatars(e){return te.D.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return te.D.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"working")}async setShowBranchPullRequest(e){await te.D.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await te.D.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}}Sn([(0,re.H)((()=>""))],CommitsView.prototype,"revealCommit",1),Sn([(0,re.H)((()=>""))],CommitsView.prototype,"revealRepository",1);var Pn=Object.defineProperty,kn=Object.getOwnPropertyDescriptor,Rn=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?kn(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Pn(t,i,s),s};class ContributorsRepositoryNode extends Wi.vb{async getChildren(){return null==this.child&&(this.child=new ContributorsNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}async subscribe(){return r.Disposable.from(await super.subscribe(),(0,Ve.cL)((e=>this.child?.updateAvatar(e.email))))}changed(e){return e.changed(v.I6.Config,v.I6.Heads,v.I6.Remotes,v.I6.Unknown,v.du.Any)}}Rn([(0,L.fF)()],ContributorsRepositoryNode.prototype,"subscribe",1);class ContributorsViewNode extends Wi.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No contributors could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new ContributorsRepositoryNode(h.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.getChildren();return 0===t.length?(this.view.message="No contributors could be found.",this.view.title="Contributors",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Contributors (${t.length})`,t)}return this.view.title="Contributors",this.children}getTreeItem(){return new r.TreeItem("Contributors",r.TreeItemCollapsibleState.Expanded)}}class ContributorsView extends ViewBase{configKey="contributors";constructor(e){super(e,"contributors","Contributors","contributorsView")}get canReveal(){return this.config.reveal||!te.D.get("views.repositories.showContributors")}getRoot(){return new ContributorsViewNode(this)}registerCommands(){return this.container.viewCommands,[wn(this.getQualifiedCommand("copy"),(()=>(0,at.P0)(s.Gh.ViewsCopy,this.activeSelection,this.selection)),this),wn(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("contributors"),this.refresh(!0))),this),wn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),wn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),wn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),wn(this.getQualifiedCommand("setShowAllBranchesOn"),(()=>this.setShowAllBranches(!0)),this),wn(this.getQualifiedCommand("setShowAllBranchesOff"),(()=>this.setShowAllBranches(!1)),this),wn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),wn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),wn(this.getQualifiedCommand("setShowStatisticsOn"),(()=>this.setShowStatistics(!0)),this),wn(this.getQualifiedCommand("setShowStatisticsOff"),(()=>this.setShowStatistics(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||te.D.changed(e,"defaultDateFormat")||te.D.changed(e,"defaultDateLocale")||te.D.changed(e,"defaultDateShortFormat")||te.D.changed(e,"defaultDateSource")||te.D.changed(e,"defaultDateStyle")||te.D.changed(e,"defaultGravatarsStyle")||te.D.changed(e,"defaultTimeFormat")||te.D.changed(e,"sortContributorsBy"))}findContributor(e,t){const{repoPath:i,username:r,email:n,name:s}=e;return this.findNode((e=>e instanceof ContributorNode&&e.contributor.username===r&&e.contributor.email===n&&e.contributor.name===s),{maxDepth:2,canTraverse:e=>e instanceof ContributorsViewNode||e instanceof ContributorsRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof Wi.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof ContributorsViewNode||e instanceof Wi.vb});return void 0!==i&&await this.reveal(i,t),i}async revealContributor(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing contributor '${e.name}' in the side bar...`,cancellable:!0},(async(i,r)=>{const n=await this.findContributor(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}setFilesLayout(e){return te.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAllBranches(e){return te.D.updateEffective(`views.${this.configKey}.showAllBranches`,e)}setShowAvatars(e){return te.D.updateEffective(`views.${this.configKey}.avatars`,e)}setShowStatistics(e){return te.D.updateEffective(`views.${this.configKey}.showStatistics`,e)}}Rn([(0,re.H)((()=>""))],ContributorsView.prototype,"revealRepository",1),Rn([(0,re.H)((()=>""))],ContributorsView.prototype,"revealContributor",1);const Dn=" (pinned)";class FileHistoryView extends ViewBase{configKey="fileHistory";_followCursor=!1;_followEditor=!0;constructor(e){super(e,"fileHistory","File History","fileHistoryView"),(0,ie.v)("gitlens:views:fileHistory:cursorFollowing",this._followCursor),(0,ie.v)("gitlens:views:fileHistory:editorFollowing",this._followEditor)}get showCollapseAll(){return!1}getRoot(){return this._followCursor?new LineHistoryTrackerNode(this):new FileHistoryTrackerNode(this)}registerCommands(){return this.container.viewCommands,[wn(this.getQualifiedCommand("copy"),(()=>(0,at.P0)(s.Gh.ViewsCopy,this.activeSelection,this.selection)),this),wn(this.getQualifiedCommand("refresh"),(()=>this.refresh(!0)),this),wn(this.getQualifiedCommand("changeBase"),(()=>this.changeBase()),this),wn(this.getQualifiedCommand("setCursorFollowingOn"),(()=>this.setCursorFollowing(!0)),this),wn(this.getQualifiedCommand("setCursorFollowingOff"),(()=>this.setCursorFollowing(!1)),this),wn(this.getQualifiedCommand("setEditorFollowingOn"),(()=>this.setEditorFollowing(!0)),this),wn(this.getQualifiedCommand("setEditorFollowingOff"),(()=>this.setEditorFollowing(!1)),this),wn(this.getQualifiedCommand("setRenameFollowingOn"),(()=>this.setRenameFollowing(!0)),this),wn(this.getQualifiedCommand("setRenameFollowingOff"),(()=>this.setRenameFollowing(!1)),this),wn(this.getQualifiedCommand("setShowAllBranchesOn"),(()=>this.setShowAllBranches(!0)),this),wn(this.getQualifiedCommand("setShowAllBranchesOff"),(()=>this.setShowAllBranches(!1)),this),wn(this.getQualifiedCommand("setShowMergeCommitsOn"),(()=>this.setShowMergeCommits(!0)),this),wn(this.getQualifiedCommand("setShowMergeCommitsOff"),(()=>this.setShowMergeCommits(!1)),this),wn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),wn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||te.D.changed(e,"defaultDateFormat")||te.D.changed(e,"defaultDateLocale")||te.D.changed(e,"defaultDateShortFormat")||te.D.changed(e,"defaultDateSource")||te.D.changed(e,"defaultDateStyle")||te.D.changed(e,"defaultGravatarsStyle")||te.D.changed(e,"defaultTimeFormat")||te.D.changed(e,"advanced.fileHistoryFollowsRenames")||te.D.changed(e,"advanced.fileHistoryShowAllBranches")||te.D.changed(e,"advanced.fileHistoryShowMergeCommits"))}async showHistoryForUri(e){this.setCursorFollowing(!1);const t=this.ensureRoot(!0);return t instanceof FileHistoryTrackerNode&&(await t.showHistoryForUri(e),this.setEditorFollowing(!1)),this.show()}changeBase(){this.root?.changeBase()}setCursorFollowing(e){const t=!this._followEditor&&this.root?.hasUri?this.root.uri:void 0;this._followCursor=e,(0,ie.v)("gitlens:views:fileHistory:cursorFollowing",e),this.title=this._followCursor?"Line History":"File History";const i=this.ensureRoot(!0);null!=t&&i.setUri(t),i.setEditorFollowing(this._followEditor),i.ensureSubscription(),this.refresh(!0)}setEditorFollowing(e){const t=this.ensureRoot();t.hasUri&&(this._followEditor=e,(0,ie.v)("gitlens:views:fileHistory:editorFollowing",e),t.setEditorFollowing(e),this.description?.endsWith(Dn)?e&&(this.description=this.description.substr(0,this.description.length-9)):e||null==this.description||(this.description+=Dn),e&&(t.ensureSubscription(),this.refresh(!0)))}setRenameFollowing(e){return te.D.updateEffective("advanced.fileHistoryFollowsRenames",e)}setShowAllBranches(e){return te.D.updateEffective("advanced.fileHistoryShowAllBranches",e)}setShowMergeCommits(e){return te.D.updateEffective("advanced.fileHistoryShowMergeCommits",e)}setShowAvatars(e){return te.D.updateEffective(`views.${this.configKey}.avatars`,e)}}const _n=" (pinned)";class LineHistoryView extends ViewBase{configKey="lineHistory";constructor(e){super(e,"lineHistory","Line History","lineHistoryView"),(0,ie.v)("gitlens:views:lineHistory:editorFollowing",!0)}get showCollapseAll(){return!1}getRoot(){return new LineHistoryTrackerNode(this)}registerCommands(){return this.container.viewCommands,[wn(this.getQualifiedCommand("copy"),(()=>(0,at.P0)(s.Gh.ViewsCopy,this.activeSelection,this.selection)),this),wn(this.getQualifiedCommand("refresh"),(()=>this.refresh(!0)),this),wn(this.getQualifiedCommand("changeBase"),(()=>this.changeBase()),this),wn(this.getQualifiedCommand("setEditorFollowingOn"),(()=>this.setEditorFollowing(!0)),this),wn(this.getQualifiedCommand("setEditorFollowingOff"),(()=>this.setEditorFollowing(!1)),this),wn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),wn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||te.D.changed(e,"defaultDateFormat")||te.D.changed(e,"defaultDateLocale")||te.D.changed(e,"defaultDateShortFormat")||te.D.changed(e,"defaultDateSource")||te.D.changed(e,"defaultDateStyle")||te.D.changed(e,"defaultGravatarsStyle")||te.D.changed(e,"defaultTimeFormat"))}changeBase(){this.root?.changeBase()}setEditorFollowing(e){const t=this.ensureRoot();t.hasUri&&((0,ie.v)("gitlens:views:lineHistory:editorFollowing",e),this.root?.setEditorFollowing(e),this.description?.endsWith(_n)?e&&(this.description=this.description.substr(0,this.description.length-9)):e||null==this.description||(this.description+=_n),e&&(t.ensureSubscription(),this.refresh(!0)))}setShowAvatars(e){return te.D.updateEffective(`views.${this.configKey}.avatars`,e)}}var Tn=Object.defineProperty,Fn=Object.getOwnPropertyDescriptor,$n=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Fn(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Tn(t,i,s),s};class RemotesRepositoryNode extends Wi.vb{async getChildren(){return null==this.child&&(this.child=new RemotesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(v.I6.Config,v.I6.Remotes,v.I6.RemoteProviders,v.I6.Unknown,v.du.Any)}}class RemotesViewNode extends Wi.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No remotes could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new RemotesRepositoryNode(h.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.repo.getRemotes();return 0===t.length?(this.view.message="No remotes could be found.",this.view.title="Remotes",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Remotes (${t.length})`,e.getChildren())}return this.view.title="Remotes",this.children}getTreeItem(){return new r.TreeItem("Remotes",r.TreeItemCollapsibleState.Expanded)}}class RemotesView extends ViewBase{configKey="remotes";constructor(e){super(e,"remotes","Remotes","remotesView")}get canReveal(){return this.config.reveal||!te.D.get("views.repositories.showRemotes")}getRoot(){return new RemotesViewNode(this)}registerCommands(){return this.container.viewCommands,[wn(this.getQualifiedCommand("copy"),(()=>(0,at.P0)(s.Gh.ViewsCopy,this.activeSelection,this.selection)),this),wn(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("branches","remotes"),this.refresh(!0))),this),wn(this.getQualifiedCommand("setLayoutToList"),(()=>this.setLayout("list")),this),wn(this.getQualifiedCommand("setLayoutToTree"),(()=>this.setLayout("tree")),this),wn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),wn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),wn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),wn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),wn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),wn(this.getQualifiedCommand("setShowBranchPullRequestOn"),(()=>this.setShowBranchPullRequest(!0)),this),wn(this.getQualifiedCommand("setShowBranchPullRequestOff"),(()=>this.setShowBranchPullRequest(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||te.D.changed(e,"defaultDateFormat")||te.D.changed(e,"defaultDateLocale")||te.D.changed(e,"defaultDateShortFormat")||te.D.changed(e,"defaultDateSource")||te.D.changed(e,"defaultDateStyle")||te.D.changed(e,"defaultGravatarsStyle")||te.D.changed(e,"defaultTimeFormat")||te.D.changed(e,"integrations.enabled")||te.D.changed(e,"sortBranchesBy"))}findBranch(e,t){if(!e.remote)return;const{repoPath:i}=e;return this.findNode((t=>t.branch?.ref===e.ref),{allowPaging:!0,maxDepth:5,canTraverse:t=>t instanceof RemotesViewNode||(t instanceof RemotesRepositoryNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:t instanceof RemoteNode&&(t.repoPath===i&&t.remote.name===(0,u.Lo)(e.name))),token:t})}async findCommit(e,t){const{repoPath:i}=e,r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,d.f_)(e)?{commitDate:e.committer.date,remotes:!0}:{remotes:!0});if(0===r.length)return;const n=r.map((e=>e.split("/",1)[0]));return this.findNode((t=>t.commit?.ref===e.ref),{allowPaging:!0,maxDepth:6,canTraverse:e=>e instanceof RemotesViewNode||(e instanceof RemotesRepositoryNode||e instanceof BranchOrTagFolderNode?e.repoPath===i:e instanceof RemoteNode?e.repoPath===i&&n.includes(e.remote.name):e instanceof BranchNode?e.repoPath===i&&r.includes(e.branch.name):(e instanceof RepositoryNode||e instanceof RemotesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i),token:t})}findRemote(e,t){const{repoPath:i}=e;return this.findNode((t=>t.remote?.name===e.name),{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof RemotesViewNode||e instanceof RemotesRepositoryNode&&e.repoPath===i,token:t})}revealBranch(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,f.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,r)=>{const n=await this.findBranch(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}async revealCommit(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,f.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,r)=>{const n=await this.findCommit(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}revealRemote(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing remote '${e.name}' in the side bar...`,cancellable:!0},(async(i,r)=>{const n=await this.findRemote(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof Wi.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof RemotesViewNode||e instanceof Wi.vb});return void 0!==i&&await this.reveal(i,t),i}setLayout(e){return te.D.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return te.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return te.D.updateEffective(`views.${this.configKey}.avatars`,e)}async setShowBranchPullRequest(e){await te.D.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await te.D.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}}$n([(0,re.H)((()=>""))],RemotesView.prototype,"revealBranch",1),$n([(0,re.H)((()=>""))],RemotesView.prototype,"revealCommit",1),$n([(0,re.H)((()=>""))],RemotesView.prototype,"revealRemote",1),$n([(0,re.H)((()=>""))],RemotesView.prototype,"revealRepository",1);var On=Object.defineProperty,In=Object.getOwnPropertyDescriptor,En=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?In(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&On(t,i,s),s};class RepositoriesNode extends Wi.CF{_children;constructor(e){super(h.Wj,e)}dispose(){super.dispose(),this.resetChildren()}resetChildren(){if(null!=this._children){for(const e of this._children)"dispose"in e&&e.dispose();this._children=void 0}}getChildren(){if(null==this._children){const e=this.view.container.git.openRepositories;if(0===e.length)return[new Mi.AE(this.view,this,"No repositories could be found.")];this._children=e.map((e=>new RepositoryNode(h.YY.fromRepoPath(e.path),this.view,this,e)))}return this._children}getTreeItem(){const e="workspaces"===this.view.type,t=e&&null!=this.view.container.workspaces.currentWorkspaceId,i=t&&null!=this.view.container.workspaces.currentWorkspace,n=new r.TreeItem(e?"Current Window":"Repositories",e?r.TreeItemCollapsibleState.Collapsed:r.TreeItemCollapsibleState.Expanded);e&&(n.description=r.workspace.name??r.workspace.workspaceFolders?.[0]?.name??"");let s=Wi.Td.Repositories;return e&&(s+="+workspaces"),t&&(s+="+linked"),i&&(s+="+current",n.resourceUri=r.Uri.parse("gitlens-view://workspaces/workspace/current")),n.contextValue=s,n}async refresh(e=!1){if(null==this._children)return;if(e)return this.resetChildren(),await this.unsubscribe(),void this.ensureSubscription();const t=this.view.container.git.openRepositories;if(0===t.length&&(null==this._children||0===this._children.length))return;if(0===t.length)return void(this._children=[new Mi.AE(this.view,this,"No repositories could be found.")]);const i=[];for(const e of t){const t=e.id,r=this._children.find((e=>e.repo.id===t));null!=r?(i.push(r),r.refresh()):i.push(new RepositoryNode(h.YY.fromRepoPath(e.path),this.view,this,e))}for(const e of this._children)i.includes(e)||e.dispose();this._children=i,this.ensureSubscription()}subscribe(){const e=[this.view.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this)];return this.view.config.autoReveal&&e.push(r.window.onDidChangeActiveTextEditor((0,he.Ds)(this.onActiveEditorChanged,500),this)),r.Disposable.from(...e)}etag(){return(0,he.NX)(this.view.container.git.etag,this.view.container.subscription.etag)}onActiveEditorChanged(e){if(null!=e&&null!=this._children&&1!==this._children.length)try{const t=e.document.uri,i=this._children.find((e=>e instanceof RepositoryNode&&e.repo.containsUri(t)));if(null==i)return;let r=0===this.view.selection.length?void 0:this.view.selection[0];for(;null!=r;){if(r===i)return;r=r.getParent()}this.view.reveal(i,{expand:!0})}catch(e){C.Yd.error(e)}}onRepositoriesChanged(e){this.triggerChange(!0)}}En([(0,L.fF)()],RepositoriesNode.prototype,"resetChildren",1),En([(0,re.H)(),(0,L.fF)()],RepositoriesNode.prototype,"refresh",1),En([(0,L.fF)()],RepositoriesNode.prototype,"subscribe",1),En([(0,L.fF)({args:!1})],RepositoriesNode.prototype,"onActiveEditorChanged",1),En([(0,L.fF)()],RepositoriesNode.prototype,"onRepositoriesChanged",1);var xn=Object.defineProperty,Bn=Object.getOwnPropertyDescriptor,Wn=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Bn(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&xn(t,i,s),s};class RepositoriesView extends ViewBase{configKey="repositories";constructor(e){super(e,"repositories","Repositories","repositoriesView")}_onDidChangeAutoRefresh=new r.EventEmitter;get onDidChangeAutoRefresh(){return this._onDidChangeAutoRefresh.event}get canSelectMany(){return!1}getRoot(){return new RepositoriesNode(this)}registerCommands(){return this.container.viewCommands,[wn(this.getQualifiedCommand("copy"),(()=>(0,at.P0)(s.Gh.ViewsCopy,this.activeSelection,this.selection)),this),wn(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("branches","contributors","remotes","stashes","status","tags"),this.refresh(!0))),this),wn(this.getQualifiedCommand("setBranchesLayoutToList"),(()=>this.setBranchesLayout("list")),this),wn(this.getQualifiedCommand("setBranchesLayoutToTree"),(()=>this.setBranchesLayout("tree")),this),wn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),wn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),wn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),wn(this.getQualifiedCommand("setAutoRefreshToOn"),(()=>this.setAutoRefresh(te.D.get("views.repositories.autoRefresh"),!0)),this),wn(this.getQualifiedCommand("setAutoRefreshToOff"),(()=>this.setAutoRefresh(te.D.get("views.repositories.autoRefresh"),!1)),this),wn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),wn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),wn(this.getQualifiedCommand("setShowBranchComparisonOn"),(()=>this.setShowBranchComparison(!0)),this),wn(this.getQualifiedCommand("setShowBranchComparisonOff"),(()=>this.setShowBranchComparison(!1)),this),wn(this.getQualifiedCommand("setBranchesShowBranchComparisonOn"),(()=>this.setBranchShowBranchComparison(!0)),this),wn(this.getQualifiedCommand("setBranchesShowBranchComparisonOff"),(()=>this.setBranchShowBranchComparison(!1)),this),wn(this.getQualifiedCommand("setShowBranchesOn"),(()=>this.toggleSection("showBranches",!0)),this),wn(this.getQualifiedCommand("setShowBranchesOff"),(()=>this.toggleSection("showBranches",!1)),this),wn(this.getQualifiedCommand("setShowCommitsOn"),(()=>this.toggleSection("showCommits",!0)),this),wn(this.getQualifiedCommand("setShowCommitsOff"),(()=>this.toggleSection("showCommits",!1)),this),wn(this.getQualifiedCommand("setShowContributorsOn"),(()=>this.toggleSection("showContributors",!0)),this),wn(this.getQualifiedCommand("setShowContributorsOff"),(()=>this.toggleSection("showContributors",!1)),this),wn(this.getQualifiedCommand("setShowRemotesOn"),(()=>this.toggleSection("showRemotes",!0)),this),wn(this.getQualifiedCommand("setShowRemotesOff"),(()=>this.toggleSection("showRemotes",!1)),this),wn(this.getQualifiedCommand("setShowStashesOn"),(()=>this.toggleSection("showStashes",!0)),this),wn(this.getQualifiedCommand("setShowStashesOff"),(()=>this.toggleSection("showStashes",!1)),this),wn(this.getQualifiedCommand("setShowTagsOn"),(()=>this.toggleSection("showTags",!0)),this),wn(this.getQualifiedCommand("setShowTagsOff"),(()=>this.toggleSection("showTags",!1)),this),wn(this.getQualifiedCommand("setShowWorktreesOn"),(()=>this.toggleSection("showWorktrees",!0)),this),wn(this.getQualifiedCommand("setShowWorktreesOff"),(()=>this.toggleSection("showWorktrees",!1)),this),wn(this.getQualifiedCommand("setShowUpstreamStatusOn"),(()=>this.toggleSection("showUpstreamStatus",!0)),this),wn(this.getQualifiedCommand("setShowUpstreamStatusOff"),(()=>this.toggleSection("showUpstreamStatus",!1)),this),wn(this.getQualifiedCommand("setShowSectionOff"),(e=>this.toggleSectionByNode(e,!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||te.D.changed(e,"defaultDateFormat")||te.D.changed(e,"defaultDateLocale")||te.D.changed(e,"defaultDateShortFormat")||te.D.changed(e,"defaultDateSource")||te.D.changed(e,"defaultDateStyle")||te.D.changed(e,"defaultGravatarsStyle")||te.D.changed(e,"defaultTimeFormat")||te.D.changed(e,"sortBranchesBy")||te.D.changed(e,"sortContributorsBy")||te.D.changed(e,"sortTagsBy"))}onConfigurationChanged(e){te.D.changed(e,`views.${this.configKey}.autoRefresh`)&&this.setAutoRefresh(te.D.get("views.repositories.autoRefresh")),super.onConfigurationChanged(e)}get autoRefresh(){return this.config.autoRefresh&&this.container.storage.getWorkspace("views:repositories:autoRefresh",!0)}findBranch(e,t){const{repoPath:i}=e;return e.remote?this.findNode((t=>t.branch?.ref===e.ref),{allowPaging:!0,maxDepth:6,canTraverse:t=>t instanceof RepositoriesNode||(t instanceof RemoteNode?t.repoPath===i&&(e.remote&&t.remote.name===(0,u.Lo)(e.name)):(t instanceof RepositoryNode||t instanceof BranchesNode||t instanceof RemotesNode||t instanceof BranchOrTagFolderNode)&&t.repoPath===i),token:t}):this.findNode((t=>t.branch?.ref===e.ref),{allowPaging:!0,maxDepth:5,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof BranchesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async findCommit(e,t){const{repoPath:i}=e;let r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,d.f_)(e)?{commitDate:e.committer.date}:void 0);if(0!==r.length)return this.findNode((t=>t.commit?.ref===e.ref),{allowPaging:!0,maxDepth:6,canTraverse:async t=>t instanceof RepositoriesNode||(t instanceof RepositoryNode||t instanceof BranchesNode||t instanceof BranchOrTagFolderNode?t.repoPath===i:!!(t instanceof BranchNode&&t.repoPath===i&&r.includes(t.branch.name))&&(await t.loadMore({until:e.ref}),!0)),token:t});if(r=await this.container.git.getCommitBranches(e.repoPath,e.ref,void 0,(0,d.f_)(e)?{commitDate:e.committer.date,remotes:!0}:{remotes:!0}),0===r.length)return;const n=r.map((e=>e.split("/",1)[0]));return this.findNode((t=>t.commit?.ref===e.ref),{allowPaging:!0,maxDepth:8,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RemoteNode?e.repoPath===i&&n.includes(e.remote.name):e instanceof BranchNode?e.repoPath===i&&r.includes(e.branch.name):(e instanceof RepositoryNode||e instanceof RemotesNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i),token:t})}findContributor(e,t){const{repoPath:i,username:r,email:n,name:s}=e;return this.findNode((e=>e instanceof ContributorNode&&e.contributor.username===r&&e.contributor.email===n&&e.contributor.name===s),{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof ContributorsNode)&&e.repoPath===i,token:t})}findRemote(e,t){const{repoPath:i}=e;return this.findNode((t=>t.remote?.name===e.name),{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof RemotesNode)&&e.repoPath===i,token:t})}findStash(e,t){const{repoPath:i}=e;return this.findNode((t=>t.commit?.ref===e.ref),{maxDepth:3,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof StashesNode)&&e.repoPath===i,token:t})}findTag(e,t){const{repoPath:i}=e;return this.findNode((t=>t.tag?.ref===e.ref),{allowPaging:!0,maxDepth:5,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof TagsNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}findWorktree(e,t){const{repoPath:i,uri:r}=e,n=r.toString();return this.findNode((t=>t instanceof WorktreeNode&&e.uri.toString()===n),{maxDepth:2,canTraverse:e=>e instanceof RepositoriesNode||(e instanceof RepositoryNode||e instanceof WorktreesNode)&&e.repoPath===i,token:t})}revealBranch(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,f.Wh)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},(async(i,r)=>{const n=await this.findBranch(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}async revealBranches(e,t){const i=await this.findNode((t=>t instanceof BranchesNode&&t.repoPath===e),{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async revealCommit(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,f.Wh)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},(async(i,r)=>{const n=await this.findCommit(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}async revealContributor(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing contributor '${e.name} in the Repositories view...`,cancellable:!0},(async(i,r)=>{const n=await this.findContributor(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}revealRemote(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing remote '${e.name}' in the side bar...`,cancellable:!0},(async(i,r)=>{const n=await this.findRemote(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof RepositoryNode&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof RepositoriesNode});return void 0!==i&&await this.reveal(i,t),i}async revealStash(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,f.Wh)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},(async(i,r)=>{const n=await this.findStash(e,r);return void 0!==n&&await this.reveal(n,t),n}))}async revealStashes(e,t){const i=await this.findNode((t=>t instanceof StashesNode&&t.repoPath===e),{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}revealTag(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,f.Wh)(e,{icon:!1,quoted:!0})} in the Repositories view...`,cancellable:!0},(async(i,r)=>{const n=await this.findTag(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}async revealTags(e,t){const i=await this.findNode((t=>t instanceof TagsNode&&t.repoPath===e),{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}revealWorktree(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing worktree '${e.name}' in the side bar...`,cancellable:!0},(async(i,r)=>{const n=await this.findWorktree(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}async revealWorktrees(e,t){const i=await this.findNode((t=>t instanceof WorktreesNode&&t.repoPath===e),{maxDepth:2,canTraverse:t=>t instanceof RepositoriesNode||t instanceof RepositoryNode&&t.repoPath===e});return void 0!==i&&await this.reveal(i,t),i}async setAutoRefresh(e,t){e&&(void 0===t?t=this.container.storage.getWorkspace("views:repositories:autoRefresh",!0):await this.container.storage.storeWorkspace("views:repositories:autoRefresh",t)),(0,ie.v)("gitlens:views:repositories:autoRefresh",e&&t),this._onDidChangeAutoRefresh.fire()}setBranchesLayout(e){return te.D.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return te.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return te.D.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return te.D.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"working")}setBranchShowBranchComparison(e){return te.D.updateEffective(`views.${this.configKey}.branches.showBranchComparison`,!!e&&"branch")}toggleSection(e,t){return te.D.updateEffective(`views.${this.configKey}.${e}`,t)}toggleSectionByNode(e,t){return e instanceof BranchesNode?te.D.updateEffective(`views.${this.configKey}.showBranches`,t):e instanceof BranchNode?te.D.updateEffective(`views.${this.configKey}.showCommits`,t):e instanceof BranchTrackingStatusNode?te.D.updateEffective(`views.${this.configKey}.showUpstreamStatus`,t):e instanceof CompareBranchNode?this.setShowBranchComparison(t):e instanceof ContributorsNode?te.D.updateEffective(`views.${this.configKey}.showContributors`,t):e instanceof ReflogNode?te.D.updateEffective(`views.${this.configKey}.showIncomingActivity`,t):e instanceof RemotesNode?te.D.updateEffective(`views.${this.configKey}.showRemotes`,t):e instanceof StashesNode?te.D.updateEffective(`views.${this.configKey}.showStashes`,t):e instanceof TagsNode?te.D.updateEffective(`views.${this.configKey}.showTags`,t):e instanceof WorktreesNode?te.D.updateEffective(`views.${this.configKey}.showWorktrees`,t):Promise.resolve()}}Wn([(0,re.H)((()=>""))],RepositoriesView.prototype,"revealBranch",1),Wn([(0,re.H)((()=>""))],RepositoriesView.prototype,"revealBranches",1),Wn([(0,re.H)((()=>""))],RepositoriesView.prototype,"revealCommit",1),Wn([(0,re.H)((()=>""))],RepositoriesView.prototype,"revealContributor",1),Wn([(0,re.H)((()=>""))],RepositoriesView.prototype,"revealRemote",1),Wn([(0,re.H)((()=>""))],RepositoriesView.prototype,"revealRepository",1),Wn([(0,re.H)((()=>""))],RepositoriesView.prototype,"revealStash",1),Wn([(0,re.H)((()=>""))],RepositoriesView.prototype,"revealStashes",1),Wn([(0,re.H)((()=>""))],RepositoriesView.prototype,"revealTag",1),Wn([(0,re.H)((()=>""))],RepositoriesView.prototype,"revealTags",1),Wn([(0,re.H)((()=>""))],RepositoriesView.prototype,"revealWorktree",1),Wn([(0,re.H)((()=>""))],RepositoriesView.prototype,"revealWorktrees",1);class ComparePickerNode extends Wi.Re{constructor(e,t,i){super(h.Wj,e,t),this.selectedRef=i}order=Date.now();getChildren(){return[]}getTreeItem(){const e=this.selectedRef,t=e?.repoPath;let i,n;if(void 0!==t&&this.view.container.git.repositoryCount>1){const e=this.view.container.git.getRepository(t);i=e?.formattedName??t}return null==e?(n=new r.TreeItem("Compare <branch, tag, or ref> with <branch, tag, or ref>",r.TreeItemCollapsibleState.None),n.contextValue=Wi.Td.ComparePicker,n.description=i,n.tooltip=`Click to select or enter a reference for compare${s.NE.Ellipsis}`,n.command={title:`Compare${s.NE.Ellipsis}`,command:this.view.getQualifiedCommand("selectForCompare")}):(n=new r.TreeItem(`Compare ${e.label} with <branch, tag, or ref>`,r.TreeItemCollapsibleState.None),n.contextValue=Wi.Td.ComparePickerWithRef,n.description=i,n.tooltip=`Click to compare ${e.label} with${s.NE.Ellipsis}`,n.command={title:`Compare ${e.label} with${s.NE.Ellipsis}`,command:this.view.getQualifiedCommand("compareWithSelected")}),n}}var Nn=i(4655),Mn=Object.defineProperty,Ln=Object.getOwnPropertyDescriptor,Un=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Ln(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Mn(t,i,s),s};class SearchAndCompareViewNode extends Wi.Re{splatted=!0;comparePicker;constructor(e){super(h.Wj,e)}_children;get children(){if(null==this._children){this._children=[];const e=this.view.getStoredNodes();0!==e.length&&this._children.push(...e)}return this._children}getChildren(){const e=this.children;return 0===e.length?[]:e.sort(((e,t)=>t.order-e.order))}getTreeItem(){this.splatted=!1;const e=new r.TreeItem("SearchAndCompare",r.TreeItemCollapsibleState.Expanded);return e.contextValue=Wi.Td.SearchAndCompare,e}addOrReplace(e){const t=this.children;t.includes(e)||(t.push(e),this.view.triggerNodeChange())}async clear(){0!==this.children.length&&(this.removeComparePicker(!0),this._children.length=0,await this.view.clearStorage(),this.view.triggerNodeChange())}dismiss(e){if(e===this.comparePicker)return void this.removeComparePicker();(e instanceof Qi.fc||e instanceof Nn.V)&&e.dismiss();const t=this.children;if(0===t.length)return;const i=t.indexOf(e);-1!==i&&(t.splice(i,1),this.view.triggerNodeChange())}async refresh(e=!1){const t=this.children;if(0===t.length)return;const i=[...(0,ot.DZ)(t,(t=>{const i=t.refresh?.(e);return(0,ae.tI)(i)?i:void 0}))];await Promise.allSettled(i)}async compareWithSelected(e,t){const i=this.comparePicker?.selectedRef;if(null!=i){if(null==e)e=i.repoPath;else if(e!==i.repoPath)return void this.selectForCompare(e,t);if(null==t){const r=await(0,qi.V)(e,`Compare ${this.getRefName(i.ref)} with`,"Choose a reference to compare with",{allowEnteringRefs:!0,picked:"string"==typeof i.ref?i.ref:i.ref.ref,include:qi.H.BranchesAndTags|qi.H.HEAD,sort:{branches:{current:!0}}});if(null==r)return void(null!=this.comparePicker&&(await this.view.show(),await this.view.reveal(this.comparePicker,{focus:!0,select:!0})));t=r.ref}this.removeComparePicker(),await this.view.compare(e,i.ref,t)}}async selectForCompare(e,t,i){if(null==e&&(e=(await(0,ei.vJ)("Compare"))?.path),null==e)return;this.removeComparePicker(!0);let r,n=i?.prompt??!1;if(null==t){const i=await(0,qi.V)(e,"Compare","Choose a reference to compare",{allowEnteringRefs:{ranges:!0},include:qi.H.BranchesAndTags|qi.H.HEAD|qi.H.WorkingTree,sort:{branches:{current:!0},tags:{}}});if(null==i)return void await this.triggerChange();if(t=i.ref,(0,f.yk)(t)){const e=(0,f.t6)(t);null!=e&&(t=e.ref1||"HEAD",r=e.ref2||"HEAD")}n=!0}this.comparePicker=new ComparePickerNode(this.view,this,{label:this.getRefName(t),repoPath:e,ref:t}),this.children.unshift(this.comparePicker),(0,ie.v)("gitlens:views:canCompare",!0),await this.triggerChange(),await this.view.reveal(this.comparePicker,{focus:!1,select:!0}),n&&await this.compareWithSelected(e,r)}getRefName(e){return"string"==typeof e?(0,f.zL)(e,{strings:{working:"Working Tree"}}):e.label??(0,f.zL)(e.ref)}removeComparePicker(e=!1){if((0,ie.v)("gitlens:views:canCompare",!1),null!=this.comparePicker){const t=this.children,i=t.indexOf(this.comparePicker);-1!==i&&(t.splice(i,1),e||this.triggerChange()),this.comparePicker=void 0}}}Un([(0,L.cM)()],SearchAndCompareViewNode.prototype,"clear",1),Un([(0,L.cM)({args:{0:e=>e.toString()}})],SearchAndCompareViewNode.prototype,"dismiss",1),Un([(0,re.H)(),(0,L.fF)()],SearchAndCompareViewNode.prototype,"refresh",1);class SearchAndCompareView extends ViewBase{configKey="searchAndCompare";constructor(e){super(e,"searchAndCompare","Search & Compare","searchAndCompareView")}getRoot(){return new SearchAndCompareViewNode(this)}registerCommands(){return this.container.viewCommands,[wn(this.getQualifiedCommand("clear"),(()=>{this.clear()}),this),wn(this.getQualifiedCommand("copy"),(()=>(0,at.P0)(s.Gh.ViewsCopy,this.activeSelection,this.selection)),this),wn(this.getQualifiedCommand("refresh"),(()=>this.refresh(!0)),this),wn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),wn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),wn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),wn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),wn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),wn(this.getQualifiedCommand("swapComparison"),this.swapComparison,this),wn(this.getQualifiedCommand("selectForCompare"),(()=>this.selectForCompare())),wn(this.getQualifiedCommand("compareWithSelected"),this.compareWithSelected,this),wn(this.getQualifiedCommand("setFilesFilterOnLeft"),(e=>this.setFilesFilter(e,Yi.W.Left)),this),wn(this.getQualifiedCommand("setFilesFilterOnRight"),(e=>this.setFilesFilter(e,Yi.W.Right)),this),wn(this.getQualifiedCommand("setFilesFilterOff"),(e=>this.setFilesFilter(e,void 0)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||te.D.changed(e,"defaultDateFormat")||te.D.changed(e,"defaultDateLocale")||te.D.changed(e,"defaultDateShortFormat")||te.D.changed(e,"defaultDateSource")||te.D.changed(e,"defaultDateStyle")||te.D.changed(e,"defaultGravatarsStyle")||te.D.changed(e,"defaultTimeFormat"))}clear(){return this.root?.clear()}dismissNode(e){null!=this.root&&(e instanceof ComparePickerNode||e instanceof Qi.fc||e instanceof Nn.V)&&this.root.dismiss(e)}compare(e,t,i){return this.addResults(new Qi.fc(this,this.ensureRoot(),e,"string"==typeof t?{ref:t}:t,"string"==typeof i?{ref:i}:i))}compareWithSelected(e,t){this.ensureRoot().compareWithSelected(e,t)}selectForCompare(e,t,i){this.ensureRoot().selectForCompare(e,t,i)}async search(e,t,{label:i,reveal:r},n,s){this.visible||await this.show();const o={label:`Search results ${"string"==typeof i?i:i.label}`,queryLabel:i};null==s?await this.addResults(new Nn.V(this,this.root,e,t,o,n),r):await s.edit({pattern:t,labels:o,log:n})}getStoredNodes(){const e=this.container.storage.getWorkspace("views:searchAndCompare:pinned");if(null==e)return[];const t=this.ensureRoot();return Object.entries(e).sort((([,e],[,t])=>(t.timestamp??0)-(e.timestamp??0))).map((([,e])=>"comparison"===e.type?((0,Qi.k7)(this,e.checkedFiles),new Qi.fc(this,t,e.path,{label:e.ref1.label,ref:e.ref1.ref??e.ref1.name??e.ref1.sha},{label:e.ref2.label,ref:e.ref2.ref??e.ref2.name??e.ref2.sha},e.timestamp)):new Nn.V(this,t,e.path,(0,ee.uP)(e.search),e.labels,void 0,e.timestamp)))}clearStorage(){return this.container.storage.deleteWorkspace("views:searchAndCompare:pinned")}async updateStorage(e,t,i=!1){let r=this.container.storage.getWorkspace("views:searchAndCompare:pinned");r=(0,Gt.iC)(r,e,t),await this.container.storage.storeWorkspace("views:searchAndCompare:pinned",r),i||this.triggerNodeChange(this.ensureRoot())}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof Wi.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof SearchAndCompareViewNode||e instanceof Wi.vb});return void 0!==i&&await this.reveal(i,t),i}async addResults(e,t={expand:!0,focus:!0,select:!0}){this.visible||await this.show();this.ensureRoot().addOrReplace(e),queueMicrotask((()=>this.reveal(e,t)))}setFilesLayout(e){return te.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return te.D.updateEffective(`views.${this.configKey}.avatars`,e)}setFilesFilter(e,t){e instanceof Yi.V&&(e.filter=t)}swapComparison(e){if(e instanceof Qi.fc)return e.swap()}}Un([(0,re.H)((()=>""))],SearchAndCompareView.prototype,"revealRepository",1);var Gn=Object.defineProperty,Hn=Object.getOwnPropertyDescriptor,Vn=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Hn(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Gn(t,i,s),s};class StashesRepositoryNode extends Wi.vb{async getChildren(){return null==this.child&&(this.child=new StashesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(v.I6.Stash,v.I6.Unknown,v.du.Any)}}class StashesViewNode extends Wi.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No stashes could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new StashesRepositoryNode(h.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.repo.getStash();return null==t||0===t.commits.size?(this.view.message="No stashes could be found.",this.view.title="Stashes",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Stashes (${t.commits.size})`,e.getChildren())}return this.view.title="Stashes",this.children}getTreeItem(){return new r.TreeItem("Stashes",r.TreeItemCollapsibleState.Expanded)}}class StashesView extends ViewBase{configKey="stashes";constructor(e){super(e,"stashes","Stashes","stashesView")}get canReveal(){return this.config.reveal||!te.D.get("views.repositories.showStashes")}getRoot(){return new StashesViewNode(this)}registerCommands(){return this.container.viewCommands,[wn(this.getQualifiedCommand("copy"),(()=>(0,at.P0)(s.Gh.ViewsCopy,this.activeSelection,this.selection)),this),wn(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("stashes"),this.refresh(!0))),this),wn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),wn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),wn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||te.D.changed(e,"defaultDateFormat")||te.D.changed(e,"defaultDateLocale")||te.D.changed(e,"defaultDateShortFormat")||te.D.changed(e,"defaultDateSource")||te.D.changed(e,"defaultDateStyle")||te.D.changed(e,"defaultGravatarsStyle")||te.D.changed(e,"defaultTimeFormat"))}onSelectionChanged(e){super.onSelectionChanged(e),this.notifySelections()}onVisibilityChanged(e){super.onVisibilityChanged(e),e.visible&&this.notifySelections()}notifySelections(){const e=this.selection?.[0];null!=e&&((e instanceof zr.i||e instanceof pn.y)&&this.container.events.fire("commit:selected",{commit:e.commit,interaction:"passive",preserveFocus:!0,preserveVisibility:!0},{source:this.id}),e instanceof pn.y&&this.container.events.fire("file:selected",{uri:e.uri,preserveFocus:!0,preserveVisibility:!0},{source:this.id}))}findStash(e,t){const{repoPath:i}=e;return this.findNode((t=>t.commit?.ref===e.ref),{maxDepth:2,canTraverse:e=>e instanceof StashesViewNode||e instanceof StashesRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof Wi.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof StashesViewNode||e instanceof Wi.vb});return void 0!==i&&await this.reveal(i,t),i}async revealStash(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,f.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,r)=>{const n=await this.findStash(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}setFilesLayout(e){return te.D.updateEffective(`views.${this.configKey}.files.layout`,e)}}Vn([(0,re.H)((()=>""))],StashesView.prototype,"revealRepository",1),Vn([(0,re.H)((()=>""))],StashesView.prototype,"revealStash",1);var qn=Object.defineProperty,Qn=Object.getOwnPropertyDescriptor,jn=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Qn(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&qn(t,i,s),s};class TagsRepositoryNode extends Wi.vb{async getChildren(){return null==this.child&&(this.child=new TagsNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(v.I6.Tags,v.I6.Unknown,v.du.Any)}}class TagsViewNode extends Wi.FZ{async getChildren(){if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No tags could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new TagsRepositoryNode(h.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.repo.getTags();return 0===t.values.length?(this.view.message="No tags could be found.",this.view.title="Tags",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Tags (${t.values.length})`,e.getChildren())}return this.view.title="Tags",this.children}getTreeItem(){return new r.TreeItem("Tags",r.TreeItemCollapsibleState.Expanded)}}class TagsView extends ViewBase{configKey="tags";constructor(e){super(e,"tags","Tags","tagsView")}get canReveal(){return this.config.reveal||!te.D.get("views.repositories.showTags")}getRoot(){return new TagsViewNode(this)}registerCommands(){return this.container.viewCommands,[wn(this.getQualifiedCommand("copy"),(()=>(0,at.P0)(s.Gh.ViewsCopy,this.activeSelection,this.selection)),this),wn(this.getQualifiedCommand("refresh"),(()=>(this.container.git.resetCaches("tags"),this.refresh(!0))),this),wn(this.getQualifiedCommand("setLayoutToList"),(()=>this.setLayout("list")),this),wn(this.getQualifiedCommand("setLayoutToTree"),(()=>this.setLayout("tree")),this),wn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),wn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),wn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),wn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),wn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||te.D.changed(e,"defaultDateFormat")||te.D.changed(e,"defaultDateLocale")||te.D.changed(e,"defaultDateShortFormat")||te.D.changed(e,"defaultDateSource")||te.D.changed(e,"defaultDateStyle")||te.D.changed(e,"defaultGravatarsStyle")||te.D.changed(e,"defaultTimeFormat")||te.D.changed(e,"sortTagsBy"))}findTag(e,t){const{repoPath:i}=e;return this.findNode((t=>t.tag?.ref===e.ref),{allowPaging:!0,maxDepth:2,canTraverse:e=>e instanceof TagsViewNode||(e instanceof TagsRepositoryNode||e instanceof BranchOrTagFolderNode)&&e.repoPath===i,token:t})}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof Wi.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof TagsViewNode||e instanceof Wi.vb});return void 0!==i&&await this.reveal(i,t),i}revealTag(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing ${(0,f.Wh)(e,{icon:!1,quoted:!0})} in the side bar...`,cancellable:!0},(async(i,r)=>{const n=await this.findTag(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}setLayout(e){return te.D.updateEffective(`views.${this.configKey}.branches.layout`,e)}setFilesLayout(e){return te.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return te.D.updateEffective(`views.${this.configKey}.avatars`,e)}}jn([(0,re.H)((()=>""))],TagsView.prototype,"revealRepository",1),jn([(0,re.H)((()=>""))],TagsView.prototype,"revealTag",1);var Yn=i(4398);class ViewFileDecorationProvider{_onDidChange=new r.EventEmitter;get onDidChange(){return this._onDidChange.event}disposable;constructor(){this.disposable=r.Disposable.from(r.window.registerFileDecorationProvider({provideFileDecoration:(e,t)=>{if("gitlens-view"===e.scheme)switch(e.authority){case"branch":return this.provideBranchCurrentDecoration(e,t);case"remote":return this.provideRemoteDefaultDecoration(e,t);case"status":return this.provideStatusDecoration(e,t);case"workspaces":return this.provideWorkspaceDecoration(e,t);default:return}}}),r.window.registerFileDecorationProvider(this))}dispose(){this.disposable.dispose()}provideWorkspaceDecoration(e,t){const[,i,n]=e.path.split("/");if("repository"===i){if("open"===n)return{badge:"●",color:new r.ThemeColor("gitlens.decorations.workspaceRepoOpenForegroundColor"),tooltip:""};if("missing"===n)return{badge:"?",color:new r.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor"),tooltip:""}}if("workspace"===i&&"current"===n)return{badge:"●",color:new r.ThemeColor("gitlens.decorations.workspaceCurrentForegroundColor"),tooltip:""}}provideFileDecoration(e,t){if(e.scheme===s.sN.Git){const t=(0,Yn.h)(e);null!=t?.decoration&&(e=r.Uri.parse(t?.decoration))}if("gitlens-view"===e.scheme)switch(e.authority){case"branch":return this.provideBranchStatusDecoration(e,t);case"commit-file":return this.provideCommitFileStatusDecoration(e,t)}}provideCommitFileStatusDecoration(e,t){const[,,i]=e.path.split("/");switch(i){case"!":return{badge:"I",color:new r.ThemeColor("gitlens.decorations.ignoredForegroundColor"),tooltip:"Ignored"};case"?":return{badge:"U",color:new r.ThemeColor("gitlens.decorations.untrackedForegroundColor"),tooltip:"Untracked"};case"A":return{badge:"A",color:new r.ThemeColor("gitlens.decorations.addedForegroundColor"),tooltip:"Added"};case"C":return{badge:"C",color:new r.ThemeColor("gitlens.decorations.copiedForegroundColor"),tooltip:"Copied"};case"D":return{badge:"D",color:new r.ThemeColor("gitlens.decorations.deletedForegroundColor"),tooltip:"Deleted"};case"M":return{badge:"M",tooltip:"Modified"};case"R":return{badge:"R",color:new r.ThemeColor("gitlens.decorations.renamedForegroundColor"),tooltip:"Renamed"};default:return}}provideBranchStatusDecoration(e,t){const[,,i]=e.path.split("/");switch(i){case"ahead":return{badge:"▲",color:new r.ThemeColor("gitlens.decorations.branchAheadForegroundColor"),tooltip:"Ahead"};case"behind":return{badge:"▼",color:new r.ThemeColor("gitlens.decorations.branchBehindForegroundColor"),tooltip:"Behind"};case"diverged":return{badge:"▼▲",color:new r.ThemeColor("gitlens.decorations.branchDivergedForegroundColor"),tooltip:"Diverged"};case"missingUpstream":return{badge:"!",color:new r.ThemeColor("gitlens.decorations.branchMissingUpstreamForegroundColor"),tooltip:"Missing Upstream"};case"upToDate":return{badge:"",color:new r.ThemeColor("gitlens.decorations.branchUpToDateForegroundColor"),tooltip:"Up to Date"};case"unpublished":return{badge:"▲+",color:new r.ThemeColor("gitlens.decorations.branchUnpublishedForegroundColor"),tooltip:"Unpublished"};default:return}}provideBranchCurrentDecoration(e,t){const[,,i,n]=e.path.split("/");if(!n)return;let o;switch(i){case"ahead":o=new r.ThemeColor("gitlens.decorations.branchAheadForegroundColor");break;case"behind":o=new r.ThemeColor("gitlens.decorations.branchBehindForegroundColor");break;case"diverged":o=new r.ThemeColor("gitlens.decorations.branchDivergedForegroundColor");break;case"upToDate":o=new r.ThemeColor("gitlens.decorations.branchUpToDateForegroundColor");break;case"unpublished":o=new r.ThemeColor("gitlens.decorations.branchUnpublishedForegroundColor")}return{badge:s.NE.Check,color:o,tooltip:"Current Branch"}}provideRemoteDefaultDecoration(e,t){const[,i]=e.path.split("/");if(i)return{badge:s.NE.Check,tooltip:"Default Remote"}}provideStatusDecoration(e,t){const[,i,n]=e.path.split("/");if("rebasing"===i)return n?{badge:"!",color:new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingConflictForegroundColor")}:{color:new r.ThemeColor("gitlens.decorations.statusMergingOrRebasingForegroundColor")}}}class WorkspaceMissingRepositoryNode extends Wi.Re{constructor(e,t,i,r){super(h.Wj,e,t),this.workspace=i,this.wsRepositoryDescriptor=r,this.updateContext({wsRepositoryDescriptor:r}),this._uniqueId=(0,Wi.tO)("missing-workspace-repository",this.context)}get id(){return this._uniqueId}toClipboard(){return this.name}get name(){return this.wsRepositoryDescriptor.name}get workspaceId(){return this.wsRepositoryDescriptor.workspaceId}getChildren(){return[]}getTreeItem(){const e=new r.TreeItem(this.name,r.TreeItemCollapsibleState.None);return e.id=this.id,e.description="missing",e.tooltip=new r.MarkdownString(`${this.name}\n\nRepository could not be found`),e.contextValue=Wi.Td.WorkspaceMissingRepository,e.iconPath=new r.ThemeIcon("question",new r.ThemeColor("gitlens.decorations.workspaceRepoMissingForegroundColor")),e.resourceUri=r.Uri.parse("gitlens-view://workspaces/repository/missing"),e}}var zn=Object.defineProperty,Kn=Object.getOwnPropertyDescriptor,Jn=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Kn(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&zn(t,i,s),s};class WorkspaceNode extends Wi.CF{constructor(e,t,i,r){super(e,t,i),this.parent=i,this.workspace=r,this.updateContext({workspace:r}),this._uniqueId=(0,Wi.tO)("workspace",this.context)}dispose(){super.dispose(),this.resetChildren()}resetChildren(){if(null!=this._children){for(const e of this._children)"dispose"in e&&e.dispose();this._children=void 0}}get id(){return this._uniqueId}toClipboard(){return this.workspace.name}_children;async getChildren(){if(null==this._children){this._children=[];try{const e=await this.workspace.getRepositoryDescriptors();if(null==e||0===e.length)return this._children.push(new Mi.$h(this.view,this,(0,at.fA)("gitlens.views.workspaces.addRepos","Add Repositories...",this),"No repositories")),this._children;const t=await this.workspace.getRepositoriesByName({force:!0});for(const i of e){const e=t.get(i.name)?.repository;e?this._children.push(new RepositoryNode(h.YY.fromRepoPath(e.path),this.view,this,e,this.getNewContext({wsRepositoryDescriptor:i}))):this._children.push(new WorkspaceMissingRepositoryNode(this.view,this,this.workspace,i))}}catch(e){return[new Mi.AE(this.view,this,"Failed to load repositories")]}}return this._children}async getTreeItem(){const e=new r.TreeItem(this.workspace.name,r.TreeItemCollapsibleState.Collapsed),t="cloud"===this.workspace.type;let i=`${Wi.Td.Workspace}`;e.resourceUri=void 0;const n=[];return i+=t?"+cloud":"+local",this.workspace.current&&(i+="+current",n.push("current"),e.resourceUri=r.Uri.parse("gitlens-view://workspaces/workspace/current")),null!=this.workspace.localPath&&(i+="+hasPath"),0===(await this.workspace.getRepositoryDescriptors())?.length&&(i+="+empty"),e.id=this.id,e.contextValue=i,e.iconPath=new r.ThemeIcon("cloud"==this.workspace.type?"cloud":"folder"),e.tooltip=`${this.workspace.name}\n${t?"Cloud Workspace "+(this.workspace.shared?"(Shared)":""):"Local Workspace"}${t&&null!=this.workspace.provider?`\nProvider: ${this.workspace.provider}`:""}`,t&&null!=this.workspace.organizationId&&n.push("shared"),e.description=n.join(", "),e}refresh(e=!1){null!=this._children&&e&&this.resetChildren()}etag(){return this.view.container.git.etag}subscribe(){return r.Disposable.from(this.view.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this))}onRepositoriesChanged(e){this.triggerChange(!0)}}Jn([(0,re.H)(),(0,L.fF)()],WorkspaceNode.prototype,"refresh",1),Jn([(0,L.fF)()],WorkspaceNode.prototype,"subscribe",1);var Xn=Object.defineProperty,Zn=Object.getOwnPropertyDescriptor;class WorkspacesViewNode extends Wi.Re{_children;async getChildren(){if(null==this._children){const e=[],{cloudWorkspaces:t,cloudWorkspaceInfo:i,localWorkspaces:r,localWorkspaceInfo:n}=await this.view.container.workspaces.getWorkspaces();if(t.length||r.length){e.push(new RepositoriesNode(this.view));for(const i of t)e.push(new WorkspaceNode(this.uri,this.view,this,i));null!=i&&e.push(new Mi.AE(this.view,this,i));for(const t of r)e.push(new WorkspaceNode(this.uri,this.view,this,t));0===t.length&&null==i&&e.push(new Mi.AE(this.view,this,"No cloud workspaces found.")),null!=n&&e.push(new Mi.AE(this.view,this,n))}this._children=e}return this._children}getTreeItem(){return new r.TreeItem("Workspaces",r.TreeItemCollapsibleState.Expanded)}refresh(){if(null!=this._children){if(this._children.length)for(const e of this._children)"dispose"in e&&e.dispose();this._children=void 0}}}((e,t,i,r)=>{for(var n,s=r>1?void 0:r?Zn(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);r&&s&&Xn(t,i,s)})([(0,re.H)(),(0,L.fF)()],WorkspacesViewNode.prototype,"refresh",1);class WorkspacesView extends ViewBase{configKey="repositories";_disposable;constructor(e){super(e,"workspaces","Workspaces","workspaceView"),this.description="PREVIEW  ☁️",this.disposables.push(e.workspaces.onDidResetWorkspaces((()=>{this.refresh(!0)})))}dispose(){this._disposable?.dispose(),super.dispose()}get canSelectMany(){return!1}getRoot(){return new WorkspacesViewNode(h.Wj,this)}async show(e){if(await(0,Vt.C)())return super.show(e)}async findWorkspaceNode(e,t){return this.findNode((t=>t.workspace?.id===e),{allowPaging:!1,maxDepth:2,canTraverse:e=>e instanceof WorkspacesViewNode,token:t})}async revealWorkspaceNode(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing workspace ${e} in the side bar...`,cancellable:!0},(async(i,r)=>{const n=await this.findWorkspaceNode(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}registerCommands(){return this.container.viewCommands,[wn(this.getQualifiedCommand("info"),(()=>r.env.openExternal(r.Uri.parse("https://help.gitkraken.com/gitlens/side-bar/#workspaces-☁%ef%b8%8f"))),this),wn(this.getQualifiedCommand("copy"),(()=>(0,at.P0)(s.Gh.ViewsCopy,this.activeSelection,this.selection)),this),wn(this.getQualifiedCommand("refresh"),(()=>{this.container.workspaces.resetWorkspaces()}),this),wn(this.getQualifiedCommand("addRepos"),(async e=>{await this.container.workspaces.addCloudWorkspaceRepos(e.workspace.id),e.getParent()?.triggerChange(!0)})),wn(this.getQualifiedCommand("addReposFromLinked"),(async e=>{await this.container.workspaces.addMissingCurrentWorkspaceRepos({force:!0}),e.getParent()?.triggerChange(!0)})),wn(this.getQualifiedCommand("convert"),(async e=>{const t=[];for(const i of e.getChildren())i instanceof RepositoryNode&&t.push(i.repo);0!==t.length&&(await this.container.workspaces.createCloudWorkspace({repos:t}),this.ensureRoot().triggerChange(!0))}),this),wn(this.getQualifiedCommand("create"),(async()=>{await this.container.workspaces.createCloudWorkspace(),this.ensureRoot().triggerChange(!0)}),this),wn(this.getQualifiedCommand("createLocal"),(async e=>{await this.container.workspaces.saveAsCodeWorkspaceFile(e.workspace.id),this.ensureRoot().triggerChange(!0)}),this),wn(this.getQualifiedCommand("openLocal"),(async e=>{await this.container.workspaces.openCodeWorkspaceFile(e.workspace.id,{location:"currentWindow"}),this.ensureRoot().triggerChange(!0)}),this),wn(this.getQualifiedCommand("openLocalNewWindow"),(async e=>{await this.container.workspaces.openCodeWorkspaceFile(e.workspace.id,{location:"newWindow"})}),this),wn(this.getQualifiedCommand("changeAutoAddSetting"),(async()=>{await this.container.workspaces.chooseCodeWorkspaceAutoAddSetting({current:!0})}),this),wn(this.getQualifiedCommand("delete"),(async e=>{await this.container.workspaces.deleteCloudWorkspace(e.workspace.id),e.getParent()?.triggerChange(!0)}),this),wn(this.getQualifiedCommand("locateAllRepos"),(async e=>{"cloud"===e.workspace.type&&(await r.window.withProgress({location:r.ProgressLocation.Notification,title:`Locating Repositories for '${e.workspace.name}'...`,cancellable:!0},((t,i)=>this.container.workspaces.locateAllCloudWorkspaceRepos(e.workspace.id,i))),e.triggerChange(!0))}),this),wn(this.getQualifiedCommand("repo.locate"),(async e=>{const t=e.wsRepositoryDescriptor;null!=t&&null!=e.workspace?.id&&(await this.container.workspaces.locateWorkspaceRepo(e.workspace.id,t),e.getParent()?.triggerChange(!0))}),this),wn(this.getQualifiedCommand("repo.openInNewWindow"),(e=>{const t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,G.ic)(e.repo.uri,{location:"newWindow"})}),this),wn(this.getQualifiedCommand("repo.open"),(e=>{const t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,G.ic)(e.repo.uri,{location:"currentWindow"})}),this),wn(this.getQualifiedCommand("repo.addToWindow"),(e=>{const t=e.getParent();null!=t&&t instanceof WorkspaceNode&&(0,G.ic)(e.repo.uri,{location:"addToWorkspace"})}),this),wn(this.getQualifiedCommand("repo.remove"),(async e=>{const t=e.wsRepositoryDescriptor;null!=t?.id&&null!=e.workspace?.id&&(await this.container.workspaces.removeCloudWorkspaceRepo(e.workspace.id,t),e.getParent()?.getParent()?.triggerChange(!0))}))]}}var es=Object.defineProperty,ts=Object.getOwnPropertyDescriptor,is=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?ts(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&es(t,i,s),s};class WorktreesRepositoryNode extends Wi.vb{getChildren(){return null==this.child&&(this.child=new WorktreesNode(this.uri,this.view,this,this.repo)),this.child.getChildren()}changed(e){return e.changed(v.I6.Config,v.I6.Worktrees,v.I6.Unknown,v.du.Any)}}class WorktreesViewNode extends Wi.FZ{async getChildren(){if(!1===(await this.view.container.git.access(c.x.Worktrees)).allowed)return[];if(null==this.children){const e=this.view.container.git.openRepositories;if(0===e.length)return this.view.message="No worktrees could be found.",[];this.view.message=void 0;const t=1===e.length;this.children=e.map((e=>new WorktreesRepositoryNode(h.YY.fromRepoPath(e.path),this.view,this,e,t)))}if(1===this.children.length){const[e]=this.children,t=await e.getChildren();return t.length<=1?(this.view.message=void 0,this.view.title="Worktrees",e.ensureSubscription(),[]):(this.view.message=void 0,this.view.title=`Worktrees (${t.length})`,t)}return this.view.title="Worktrees",this.children}getTreeItem(){return new r.TreeItem("Worktrees",r.TreeItemCollapsibleState.Expanded)}}class WorktreesView extends ViewBase{configKey="worktrees";constructor(e){super(e,"worktrees","Worktrees","workspaceView"),this.disposables.push(r.window.registerFileDecorationProvider({provideFileDecoration:(e,t)=>{if("gitlens-view"!==e.scheme||"worktree"!==e.authority)return;const[,i]=e.path.split("/");switch(i){case"changes":return{badge:"●",color:new r.ThemeColor("gitlens.decorations.worktreeHasUncommittedChangesForegroundColor"),tooltip:"Has Uncommitted Changes"};case"missing":return{badge:s.NE.Warning,color:new r.ThemeColor("gitlens.decorations.worktreeMissingForegroundColor"),tooltip:""};default:return}}})),this.description="✨"}get canReveal(){return this.config.reveal||!te.D.get("views.repositories.showWorktrees")}async show(e){if(await(0,Vt.C)())return super.show(e)}getRoot(){return new WorktreesViewNode(this)}registerCommands(){return this.container.viewCommands,[wn(this.getQualifiedCommand("copy"),(()=>(0,at.P0)(s.Gh.ViewsCopy,this.activeSelection,this.selection)),this),wn(this.getQualifiedCommand("refresh"),(async()=>this.refresh(!0)),this),wn(this.getQualifiedCommand("setFilesLayoutToAuto"),(()=>this.setFilesLayout("auto")),this),wn(this.getQualifiedCommand("setFilesLayoutToList"),(()=>this.setFilesLayout("list")),this),wn(this.getQualifiedCommand("setFilesLayoutToTree"),(()=>this.setFilesLayout("tree")),this),wn(this.getQualifiedCommand("setShowAvatarsOn"),(()=>this.setShowAvatars(!0)),this),wn(this.getQualifiedCommand("setShowAvatarsOff"),(()=>this.setShowAvatars(!1)),this),wn(this.getQualifiedCommand("setShowBranchComparisonOn"),(()=>this.setShowBranchComparison(!0)),this),wn(this.getQualifiedCommand("setShowBranchComparisonOff"),(()=>this.setShowBranchComparison(!1)),this),wn(this.getQualifiedCommand("setShowBranchPullRequestOn"),(()=>this.setShowBranchPullRequest(!0)),this),wn(this.getQualifiedCommand("setShowBranchPullRequestOff"),(()=>this.setShowBranchPullRequest(!1)),this)]}filterConfigurationChanged(e){return!!(super.filterConfigurationChanged(e)||te.D.changed(e,"defaultDateFormat")||te.D.changed(e,"defaultDateLocale")||te.D.changed(e,"defaultDateShortFormat")||te.D.changed(e,"defaultDateSource")||te.D.changed(e,"defaultDateStyle")||te.D.changed(e,"defaultGravatarsStyle")||te.D.changed(e,"defaultTimeFormat"))}findWorktree(e,t){const{repoPath:i,uri:r}=e,n=r.toString();return this.findNode((t=>t instanceof WorktreeNode&&e.uri.toString()===n),{maxDepth:2,canTraverse:e=>e instanceof WorktreesViewNode||e instanceof WorktreesRepositoryNode&&e.repoPath===i,token:t})}async revealRepository(e,t){const i=await this.findNode((t=>t instanceof Wi.vb&&t.repoPath===e),{maxDepth:1,canTraverse:e=>e instanceof WorktreesViewNode||e instanceof Wi.vb});return void 0!==i&&await this.reveal(i,t),i}revealWorktree(e,t){return r.window.withProgress({location:r.ProgressLocation.Notification,title:`Revealing worktree '${e.name}' in the side bar...`,cancellable:!0},(async(i,r)=>{const n=await this.findWorktree(e,r);if(null!=n)return await this.ensureRevealNode(n,t),n}))}setFilesLayout(e){return te.D.updateEffective(`views.${this.configKey}.files.layout`,e)}setShowAvatars(e){return te.D.updateEffective(`views.${this.configKey}.avatars`,e)}setShowBranchComparison(e){return te.D.updateEffective(`views.${this.configKey}.showBranchComparison`,!!e&&"branch")}async setShowBranchPullRequest(e){await te.D.updateEffective(`views.${this.configKey}.pullRequests.showForBranches`,e),await te.D.updateEffective(`views.${this.configKey}.pullRequests.enabled`,e)}}is([(0,re.H)((()=>""))],WorktreesView.prototype,"revealRepository",1),is([(0,re.H)((()=>""))],WorktreesView.prototype,"revealWorktree",1);class RequestType{constructor(e){this.name=e}}const rs=new RequestType("git"),ns=new RequestType("git/logStreamTo"),ss=new RequestType("repositories/inFolder");var os=Object.defineProperty,as=Object.getOwnPropertyDescriptor,cs=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?as(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&os(t,i,s),s};const ls=()=>!0,hs=new Map([["blame",ls],["branch",e=>"--contains"===e[1]],["cat-file",ls],["check-mailmap",ls],["check-ref-format",ls],["config",e=>"--get"===e[1]||"--get-regex"===e[1]],["diff",ls],["difftool",ls],["for-each-ref",ls],["log",ls],["ls-files",ls],["ls-tree",ls],["merge-base",ls],["remote",e=>"-v"===e[1]||"get-url"===e[1]],["rev-list",ls],["rev-parse",ls],["show",ls],["show-ref",ls],["stash",e=>"list"===e[1]],["status",ls],["symbolic-ref",ls],["tag",e=>"-l"===e[1]],["worktree",e=>"list"===e[1]]]),us=/^[/|\\]/,ds=class _VslsHostService{constructor(e,t,i){this._api=e,this._service=t,this.container=i,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this._disposable=r.Disposable.from(r.workspace.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged,this)),this.onRequest(rs,this.onGitCommandRequest.bind(this)),this.onRequest(ns,this.onGitLogStreamToCommandRequest.bind(this)),this.onRequest(ss,this.onGetRepositoriesForUriRequest.bind(this)),this.onWorkspaceFoldersChanged()}static ServiceId="proxy";static async share(e,t){const i=await e.shareService(this.ServiceId);if(null==i)throw new Error("Failed to share host service");return new _VslsHostService(e,i,t)}_disposable;_localPathsRegex;_localToSharedPaths=new Map;_sharedPathsRegex;_sharedToLocalPaths=new Map;dispose(){this._disposable.dispose(),this._api.unshareService(_VslsHostService.ServiceId)}onRequest(e,t){this._service.onRequest(e.name,(function(e,i){let r;for(const t of e)if("object"==typeof t&&"__type"in t){r=t;break}return t(r??e[0],i)}))}onAvailabilityChanged(e){}onWorkspaceFoldersChanged(e){if(null==r.workspace.workspaceFolders||0===r.workspace.workspaceFolders.length)return;const t=(0,se.UH)();let i,n;this._localToSharedPaths.clear(),this._sharedToLocalPaths.clear();for(const e of r.workspace.workspaceFolders)i=(0,oe.AH)(e.uri.fsPath),n=(0,oe.AH)(this.convertLocalUriToShared(e.uri).toString()),C.Yd.debug(t,`shared='${n}' ↔ local='${i}'`),this._localToSharedPaths.set(i,n),this._sharedToLocalPaths.set(n,i);let s=(0,ne.v_)(this._sharedToLocalPaths.values(),"|");s=s.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._localPathsRegex=new RegExp(`(${s})`,"gi");let o=(0,ne.v_)(this._localToSharedPaths.values(),"|");o=o.replace(/(\/|\\)/g,"[\\\\/|\\\\]"),this._sharedPathsRegex=new RegExp(`^(${o})`,"i")}async onGitCommandRequest(e,t){const i=hs.get(e.args[0]);if(null==i||!i(e.args))throw new Error(`Git ${e.args[0]} command is not allowed`);const{options:r,args:n}=e,[s,o]=this.convertGitCommandCwd(r.cwd);r.cwd=s;let a=await function(e,...t){return Promise.resolve("")}(r,...this.convertGitCommandArgs(n,o));return"string"==typeof a?(null!=this._localPathsRegex&&a.length>0&&(a=a.replace(this._localPathsRegex,((e,t)=>{const i=this._localToSharedPaths.get((0,oe.AH)(t));return null!=i?i:t}))),{data:a}):{data:a.toString("binary"),isBuffer:!0}}async onGitLogStreamToCommandRequest(e,t){const{options:i,args:r}=e,[n,s]=this.convertGitCommandCwd(e.repoPath);let[o,a]=await function(e,t,i,r,...n){return Promise.resolve([[""],0])}(n,e.sha,e.limit,i,...this.convertGitCommandArgs(r,s));return null!=this._localPathsRegex&&o.length>0&&(o=o.map((e=>e.replace(this._localPathsRegex,((e,t)=>{const i=this._localToSharedPaths.get((0,oe.AH)(t));return null!=i?i:t}))))),{data:o,count:a}}async onGetRepositoriesForUriRequest(e,t){const i=[],n=this.convertSharedUriToLocal(r.Uri.parse(e.folderUri,!0)),s=this.container.git.getRepository(n);if(null!=s){const e=this.convertLocalUriToShared(s.uri);i.push({folderUri:e.toString(),root:s.root,closed:s.closed})}return{repositories:i}}convertLocalUriToShared(e){const t=(0,se.UH)();let i=this._api.convertLocalUriToShared(e);C.Yd.debug(t,`LiveShare.convertLocalUriToShared(${e.toString(!0)}) returned ${i.toString(!0)}`);const n=e.path;let s=i.path;if(i.authority.length>0&&(s=`/${i.authority}${s}`),new RegExp(`${n}$`,"i").test(s))if(s.length===n.length){const t=r.workspace.getWorkspaceFolder(e);i=i.with({authority:"",path:`/~${t.index}`})}else i=i.with({authority:"",path:s.substr(0,s.length-n.length)});else if(!s.startsWith("/~")){const t=r.workspace.getWorkspaceFolder(e);i=i.with({authority:"",path:`/~${t.index}${s}`})}return i}convertGitCommandCwd(e){let t=!1;if(null!=e&&e.length>0&&null!=this._sharedToLocalPaths)if(this._sharedPathsRegex?.test(e))e=(0,oe.AH)(e).replace(this._sharedPathsRegex,((e,i)=>{t||(t="/~0"===i);const r=this._sharedToLocalPaths.get(i);return null!=r?r:i}));else if(us.test(e)){const i=this._sharedToLocalPaths.get("vsls:/~0");null!=i&&(t=!0,e=(0,oe.AH)(this.container.git.getAbsoluteUri(e,i).fsPath))}return[e,t]}convertGitCommandArgs(e,t){let i=!1,r=-1;for(const n of e)r++,"--"!==n?i&&"string"==typeof n&&(t&&us.test(n[0])&&e.splice(r,1,n.substr(1)),this._sharedPathsRegex?.test(n)&&e.splice(r,1,(0,oe.AH)(n).replace(this._sharedPathsRegex,((e,t)=>{const i=this._sharedToLocalPaths.get(t);return null!=i?i:t})))):i=!0;return e}convertSharedUriToLocal(e){(0,oe.tD)(e.path)&&(e=e.with({path:`${e.path}/`}));const t=this._api.convertSharedUriToLocal(e);let i=t.path;const r=e.path;return i.endsWith(r)&&(i=i.substr(0,i.length-r.length)),47===i.charCodeAt(i.length-1)&&(i=i.slice(0,-1)),t.with({path:i})}};cs([(0,L.cM)()],ds.prototype,"onAvailabilityChanged",1),cs([(0,L.fF)()],ds.prototype,"onWorkspaceFoldersChanged",1),cs([(0,L.cM)()],ds.prototype,"onGitCommandRequest",1),cs([(0,L.cM)()],ds.prototype,"onGitLogStreamToCommandRequest",1),cs([(0,L.cM)()],ds.prototype,"onGetRepositoriesForUriRequest",1),cs([(0,L.fF)({exit:!0})],ds.prototype,"convertLocalUriToShared",1),cs([(0,L.cM)()],ds,"share",1);let ps=ds;var ms=Object.defineProperty,gs=Object.getOwnPropertyDescriptor,fs=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?gs(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&ms(t,i,s),s};const ws=class _VslsGuestService{constructor(e,t,i){this._api=e,this._service=t,this.container=i,t.onDidChangeIsServiceAvailable(this.onAvailabilityChanged.bind(this)),this.onAvailabilityChanged(t.isServiceAvailable)}static async connect(e,t){const i=(0,se.UH)();try{const i=await e.getSharedService(ps.ServiceId);if(null==i)throw new Error("Failed to connect to host service");return new _VslsGuestService(e,i,t)}catch(e){return void C.Yd.error(e,i)}}dispose(){}onAvailabilityChanged(e){e?this.container.git.setEnabledContext(!0):(this.container.git.setEnabledContext(!1),r.window.showWarningMessage("GitLens features will be unavailable. Unable to connect to the host GitLens service. The host may have disabled GitLens guest access or may not have GitLens installed."))}async git(e,...t){const i=await this.sendRequest(rs,{__type:"gitlens",options:e,args:t});return i.isBuffer?Buffer.from(i.data,"binary"):i.data}async gitLogStreamTo(e,t,i,r,...n){const s=await this.sendRequest(ns,{__type:"gitlens",repoPath:e,sha:t,limit:i,options:r,args:n});return[s.data,s.count]}async getRepositoriesForUri(e){return(await this.sendRequest(ss,{__type:"gitlens",folderUri:e.toString()})).repositories}sendRequest(e,t,i){return this._service.request(e.name,[t],i)}};fs([(0,L.cM)()],ws.prototype,"onAvailabilityChanged",1),fs([(0,L.cM)()],ws.prototype,"git",1),fs([(0,L.cM)()],ws.prototype,"gitLogStreamTo",1),fs([(0,L.cM)()],ws.prototype,"getRepositoriesForUri",1),fs([(0,L.fF)()],ws.prototype,"sendRequest",1),fs([(0,L.cM)()],ws,"connect",1);let vs=ws;var ys=Object.defineProperty,bs=Object.getOwnPropertyDescriptor,Cs=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?bs(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&ys(t,i,s),s};function As(e){switch(e){case"available":return{status:"online",statusText:"Available"};case"away":return{status:"away",statusText:"Away"};case"busy":return{status:"busy",statusText:"Busy"};case"doNotDisturb":return{status:"dnd",statusText:"DND"};default:return{status:"offline",statusText:"Offline"}}}class VslsController{constructor(e){this.container=e,this._ready=(0,ae.PQ)(),this._disposable=r.Disposable.from((0,le.IH)(e.onReady)(this.onReady,this))}_api;_disposable;_guest;_host;_ready;dispose(){this._ready.fulfill(),this._disposable.dispose(),this._host?.dispose(),this._guest?.dispose()}onReady(){this.initialize()}async initialize(){r.workspace.workspaceFolders?.some((e=>e.uri.scheme===s.sN.Vsls))&&this.setReadonly(!0);try{this._api=this.getLiveShareApi();const e=await this._api;if(null==e)return(0,ie.v)("gitlens:vsls",!1),void this._ready.fulfill();(0,ie.v)("gitlens:vsls",!0),this._disposable=r.Disposable.from(this._disposable,e.onDidChangeSession((t=>this.onLiveShareSessionChanged(e,t)),this)),this.onLiveShareSessionChanged(e,{session:e.session})}catch(e){C.Yd.error(e)}}async onLiveShareSessionChanged(e,t){switch(this._host?.dispose(),this._host=void 0,this._guest?.dispose(),this._guest=void 0,t.session.role){case 1:this.setReadonly(!1),(0,ie.v)("gitlens:vsls","host"),te.D.get("liveshare.allowGuestAccess")&&(this._host=await ps.share(e,this.container)),this._ready.fulfill();break;case 2:this.setReadonly(!0),(0,ie.v)("gitlens:vsls","guest"),this._guest=await vs.connect(e,this.container),this._ready.fulfill();break;default:this.setReadonly(!1),(0,ie.v)("gitlens:vsls",!0),this._ready.pending||(this._ready=(0,ae.PQ)())}}async getLiveShareApi(){try{const e=r.extensions.getExtension("ms-vsliveshare.vsliveshare");if(null!=e){const t=e.isActive?e.exports:await e.activate();return await t.getApi("1.0.4753")??void 0}}catch(e){C.Yd.error(e)}}_readonly=!1;get readonly(){return this._readonly}setReadonly(e){this._readonly=e,(0,ie.v)("gitlens:readonly",!!e||void 0)}async guest(){return null!=this._guest||await this._ready.promise,this._guest}async getContact(e){if(null==e)return;const t=await this._api;if(null==t)return;return(await t.getContacts([e])).contacts[e]}async getContacts(e){const t=await this._api;if(null==t)return;const i=await t.getContacts(e);return Object.values(i.contacts)}async getContactPresence(e){const t=await this.getContact(e);if(null!=t)return As(t.status)}async getContactsPresence(e){const t=await this.getContacts(e);if(null!=t)return new Map(Object.values(t).map((e=>[e.email,As(e.status)])))}maybeGetPresence(e){return this.getContactPresence(e)}async invite(e){if(null==e)return;const t=await this.getContact(e);return null!=t?t.invite():void 0}async startSession(){const e=await this._api;if(null!=e)return e.share()}}Cs([(0,L.fF)()],VslsController.prototype,"getContact",1),Cs([(0,L.fF)({args:{0:e=>e.length}})],VslsController.prototype,"getContacts",1),Cs([(0,L.fF)()],VslsController.prototype,"getContactPresence",1),Cs([(0,L.fF)({args:{0:e=>e.length}})],VslsController.prototype,"getContactsPresence",1),Cs([(0,L.fF)(),Nr(250)],VslsController.prototype,"maybeGetPresence",1);var Ss=i(1676),Ps=i(7925),ks=i(5798),Rs=i(6260);const Ds=new ks.ke("rebase/abort"),_s=new ks.ke("rebase/disable"),Ts=new ks.ke("rebase/search"),Fs=new ks.ke("rebase/start"),$s=new ks.ke("rebase/switch"),Os=new ks.ke("rebase/reorder"),Is=new ks.ke("rebase/change/entry"),Es=new ks.ke("rebase/move/entry"),xs=new ks.ke("rebase/selection/update"),Bs=new ks.jH("rebase/didChange");var Ws=Object.defineProperty,Ns=Object.getOwnPropertyDescriptor,Ms=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Ns(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&Ws(t,i,s),s};const Ls=2**30,Us=new TextDecoder("utf8");let Gs=0;let Hs=0;const Vs=/^\s?#\s?Rebase\s([0-9a-f]+)(?:..([0-9a-f]+))?\sonto\s([0-9a-f]+)\s.*$/im,qs=/^\s?(p|pick|r|reword|e|edit|s|squash|f|fixup|d|drop)\s([0-9a-f]+?)\s(.*)$/gm,Qs=new Map([["p","pick"],["pick","pick"],["r","reword"],["reword","reword"],["e","edit"],["edit","edit"],["s","squash"],["squash","squash"],["f","fixup"],["fixup","fixup"],["d","drop"],["drop","drop"]]);class RebaseEditorProvider{constructor(e){this.container=e,this._disposable=r.Disposable.from(r.window.registerCustomEditorProvider("gitlens.rebase",this,{supportsMultipleEditorsPerDocument:!1,webviewOptions:{enableFindWidget:!0,retainContextWhenHidden:!0}})),this.ascending="asc"===te.D.get("rebaseEditor.ordering")}_disposable;ascending=!1;dispose(){this._disposable.dispose()}get contextKeyPrefix(){return"gitlens:webview:rebase"}get enabled(){const e=te.D.inspectAny("workbench.editorAssociations")?.globalValue;if(null==e||0===e.length)return!0;if(Array.isArray(e)){const t=e.find((e=>"git-rebase-todo"===e.filenamePattern));return null==t||"gitlens.rebase"===t.viewType}const t=e["git-rebase-todo"];return null==t||"gitlens.rebase"===t}_disableAfterNextUse=!1;async enableForNextUse(){this.enabled||(await this.setEnabled(!0),this._disableAfterNextUse=!0)}async setEnabled(e){this._disableAfterNextUse=!1;const t=te.D.inspectAny("workbench.editorAssociations");let i=t?.globalValue;if(Array.isArray(i)&&(i=i.reduce(((e,t)=>(e[t.filenamePattern]=t.viewType,e)),Object.create(null))),null==i){if(e)return;i={"git-rebase-todo":"default"}}else i["git-rebase-todo"]=e?"gitlens.rebase":"default";await te.D.updateAny("workbench.editorAssociations",i,r.ConfigurationTarget.Global)}async resolveCustomTextEditor(e,t,i){this.container.usage.track("rebaseEditor:shown");const n=(0,oe.AH)(r.Uri.joinPath(e.uri,"..","..","..").fsPath),s=this.container.git.getRepository(n),o=[],a={dispose:()=>{r.Disposable.from(...o).dispose()},id:(Hs===Ls?Hs=1:Hs++,Hs),subscriptions:o,document:e,panel:t,repoPath:s?.path??n,firstSelection:!0};o.push(t.onDidDispose((()=>{(0,Rs.qW)(this.contextKeyPrefix),r.Disposable.from(...o).dispose()})),t.onDidChangeViewState((e=>this.onViewStateChanged(a,e))),t.webview.onDidReceiveMessage((e=>this.onMessageReceived(a,e))),r.workspace.onDidChangeTextDocument((t=>{0!==t.contentChanges.length&&t.document.uri.toString()===e.uri.toString()&&this.updateState(a,!0)})),r.workspace.onDidSaveTextDocument((t=>{t.uri.toString()===e.uri.toString()&&this.updateState(a,!0)}))),null!=s&&o.push(s.onDidChange((e=>{e.changed(v.I6.Rebase,v.du.Any)&&this.updateState(a)}))),t.webview.options={enableCommandUris:!0,enableScripts:!0},t.webview.html=await this.getHtml(a),this._disableAfterNextUse&&(this._disableAfterNextUse=!1,this.setEnabled(!1))}onViewFocusChanged(e){(0,Rs.Db)(this.contextKeyPrefix,e.focused,e.focused,e.inputFocused)}onViewStateChanged(e,t){const{active:i,visible:r}=t.webviewPanel;r?(0,Rs.Db)(this.contextKeyPrefix,i):(0,Rs.qW)(this.contextKeyPrefix),e.pendingChange&&this.updateState(e)}async parseState(e){if(void 0===e.branchName){const t=await this.container.git.getBranch(e.repoPath);e.branchName=t?.name??null}const t=await async function(e,t,i){const r=t.document.getText(),n=js(r);let[,,,s]=Vs.exec(r)??["","",""];null!=t.authors&&null!=t.commits||await async function(e,t,i,r){t.commits=[],t.authors=new Map;const n=await e.git.richSearchCommits(t.repoPath,{query:`${i?`#:${i} `:""}${(0,ne.v_)((0,ne.UI)(r,(e=>`#:${e.sha}`))," ")}`},{limit:0});if(null!=n)for(const e of n.commits.values())if(t.commits.push(e),t.authors.has(e.author.name)||t.authors.set(e.author.name,{author:e.author.name,avatarUrl:(await e.getAvatarUri()).toString(!0),email:e.author.email}),!t.authors.has(e.committer.name)){const i=await e.committer.getAvatarUri(e);t.authors.set(e.committer.name,{author:e.committer.name,avatarUrl:i.toString(!0),email:e.committer.email})}}(e,t,s,n);const a=te.D.get("defaultDateFormat"),c=Ss.C.getMarkdownCommandArgs("${commit}",t.repoPath),l=s?t.commits?.find((e=>e.sha.startsWith(s))):void 0;let h;for(const e of n)h=t.commits?.find((t=>t.sha.startsWith(e.sha))),null!=h&&(h.sha===l?.sha&&(s=""),e.commit={sha:h.sha,author:h.author.name,committer:h.committer.name,date:h.formatDate(a),dateFromNow:h.formatDateFromNow(),message:(0,o.X)(h.message??h.summary)});return{webviewId:"gitlens.rebase",timestamp:Date.now(),branch:t.branchName??"",onto:s?{sha:s,commit:null!=l?{sha:l.sha,author:l.author.name,committer:l.committer.name,date:l.formatDate(a),dateFromNow:l.formatDateFromNow(),message:(0,o.X)(l.message||"root")}:void 0}:void 0,entries:n,authors:null!=t.authors?Object.fromEntries(t.authors):{},commands:{commit:c},ascending:i}}(this.container,e,this.ascending);return t}async postMessage(e,t){try{const i=await e.panel.webview.postMessage(t);return e.pendingChange=!i,i}catch(t){return C.Yd.error(t),e.pendingChange=!0,!1}}onMessageReceived(e,t){switch(t.method){case ks.W2.method:(0,ks.mq)(ks.W2,t,(e=>{this.onViewFocusChanged(e)}));break;case Ds.method:(0,ks.mq)(Ds,t,(()=>this.abort(e)));break;case _s.method:(0,ks.mq)(_s,t,(()=>this.disable(e)));break;case Ts.method:(0,ks.mq)(Ts,t,(()=>(0,at.dO)("editor.action.webvieweditor.showFind")));break;case Fs.method:(0,ks.mq)(Fs,t,(()=>this.rebase(e)));break;case $s.method:(0,ks.mq)($s,t,(()=>this.switchToText(e)));break;case Os.method:(0,ks.mq)(Os,t,(t=>this.swapOrdering(t,e)));break;case Is.method:(0,ks.mq)(Is,t,(t=>this.onEntryChanged(e,t)));break;case Es.method:(0,ks.mq)(Es,t,(t=>this.onEntryMoved(e,t)));break;case xs.method:(0,ks.mq)(xs,t,(t=>this.onSelectionChanged(e,t)))}}async onEntryChanged(e,t){const i=js(e.document),n=i.find((e=>e.sha===t.sha));if(null==n)return;const s=e.document.positionAt(n.index),o=e.document.validateRange(new r.Range(new r.Position(s.line,0),new r.Position(s.line,Ls)));let a=t.action;const c=new r.WorkspaceEdit,l=[...i];l.splice(i.indexOf(n),1,{...n,action:t.action});let h=!1;for(const e of l)"squash"===e.action||"fixup"===e.action?h=!0:h&&"drop"!==e.action&&(h=!1);if(h){const t=l[l.length-1];if(n.sha===t.sha)a="pick";else{const i=e.document.positionAt(t.index),n=e.document.validateRange(new r.Range(new r.Position(i.line,0),new r.Position(i.line,Ls)));c.replace(e.document.uri,n,`pick ${t.sha} ${t.message}`)}}c.replace(e.document.uri,o,`${a} ${n.sha} ${n.message}`),await r.workspace.applyEdit(c)}async onEntryMoved(e,t){const i=js(e.document),n=i.find((e=>e.sha===t.sha));if(null==n)return;const s=i.findIndex((e=>e.sha===t.sha));let o;if(t.relative){if(-1===t.to&&0===s||1===t.to&&s===i.length-1)return;o=s+t.to}else{if(s===t.to)return;o=t.to}const a=i[o];let c=e.document.positionAt(a.index).line;o<s&&c++;const l=e.document.positionAt(n.index),h=e.document.validateRange(new r.Range(new r.Position(l.line,0),new r.Position(l.line+1,0))),u=[...i];u.splice(s,1),u.splice(o,0,n);let d=!1;for(const e of u)"squash"===e.action||"fixup"===e.action?d=!0:d&&"drop"!==e.action&&(d=!1);const p=new r.WorkspaceEdit;let m=n.action;if(d){const t=u[u.length-1];if(n.sha===t.sha)m="pick";else{const i=e.document.positionAt(t.index),n=e.document.validateRange(new r.Range(new r.Position(i.line,0),new r.Position(i.line,Ls)));p.replace(e.document.uri,n,`pick ${t.sha} ${t.message}`)}}p.delete(e.document.uri,h),p.insert(e.document.uri,new r.Position(c,0),`${m} ${n.sha} ${n.message}\n`),await r.workspace.applyEdit(p)}onSelectionChanged(e,t){null==e.fireSelectionChangedDebounced&&(e.fireSelectionChangedDebounced=(0,he.Ds)(this.fireSelectionChanged.bind(this),250)),e.fireSelectionChangedDebounced(e,t.sha)}fireSelectionChanged(e,t){if(null==t)return;const i=te.D.get("rebaseEditor.showDetailsView");t=e.commits?.find((e=>e.sha.startsWith(t)))?.sha??t,this.container.events.fire("commit:selected",{commit:(0,f.xB)(t,e.repoPath,{refType:"revision"}),interaction:"passive",preserveFocus:!0,preserveVisibility:e.firstSelection?!1===i:"selection"!==i},{source:"gitlens.rebase"}),e.firstSelection=!1}updateState(e,t=!1){if(t)return e.notifyDidChangeStateDebounced?.cancel(),void this.notifyDidChangeState(e);null==e.notifyDidChangeStateDebounced&&(e.notifyDidChangeStateDebounced=(0,he.Ds)(this.notifyDidChangeState.bind(this),250)),e.notifyDidChangeStateDebounced(e)}async notifyDidChangeState(e){if(!e.panel.visible)return void(e.pendingChange=!0);const t=await this.parseState(e);this.postMessage(e,{id:(Gs===Ls?Gs=1:Gs++,`host:${Gs}`),method:Bs.method,params:{state:t}})}async abort(e){e.dispose();const t=new r.WorkspaceEdit;t.replace(e.document.uri,new r.Range(0,0,e.document.lineCount,0),""),await r.workspace.applyEdit(t),await e.document.save(),e.panel.dispose()}async disable(e){await this.abort(e),await this.setEnabled(!1)}async rebase(e){e.dispose(),await e.document.save(),e.panel.dispose()}swapOrdering(e,t){this.ascending=e.ascending??!1,te.D.updateEffective("rebaseEditor.ordering",this.ascending?"asc":"desc"),this.updateState(t,!0)}switchToText(e){(0,Ps.QP)(),(0,at.dO)("vscode.open",e.document.uri,{override:!1,preview:!1})}async getHtml(e){const t=r.Uri.joinPath(this.container.context.extensionUri,"dist","webviews"),i=r.Uri.joinPath(t,"rebase.html"),[n,s]=await Promise.all([r.workspace.fs.readFile(i),this.parseState(e)]);return(0,Rs.Q5)(Us.decode(n),"gitlens.rebase",e.panel.webview.cspSource,(0,St.Vu)(),e.panel.webview.asWebviewUri(this.container.context.extensionUri).toString(),e.panel.webview.asWebviewUri(t).toString(),"editor",s)}}function js(e){const t="string"==typeof e?e:e.getText(),i=[];let r,n,s,o;for(;;){if(r=qs.exec(t),null==r)break;[,n,s,o]=r,i.push({index:r.index,action:Qs.get(n)??"pick",sha:` ${s}`.substr(1),message:null==o||0===o.length?"":` ${o}`.substr(1)})}return i.reverse()}Ms([(0,L.fF)({args:{0:e=>e.uri.toString(!0)}})],RebaseEditorProvider.prototype,"resolveCustomTextEditor",1),Ms([(0,L.fF)({args:{0:e=>`focused=${e.focused}, inputFocused=${e.inputFocused}`}})],RebaseEditorProvider.prototype,"onViewFocusChanged",1),Ms([(0,L.fF)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`,1:e=>`active=${e.webviewPanel.active}, visible=${e.webviewPanel.visible}`}})],RebaseEditorProvider.prototype,"onViewStateChanged",1),Ms([(0,L.fF)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`}})],RebaseEditorProvider.prototype,"updateState",1),Ms([(0,L.fF)({args:{0:e=>`${e.id}:${e.document.uri.toString(!0)}`}})],RebaseEditorProvider.prototype,"notifyDidChangeState",1),Ms([(0,L.cM)({args:!1})],RebaseEditorProvider.prototype,"abort",1),Ms([(0,L.cM)({args:!1})],RebaseEditorProvider.prototype,"disable",1),Ms([(0,L.cM)({args:!1})],RebaseEditorProvider.prototype,"rebase",1),Ms([(0,L.cM)({args:!1})],RebaseEditorProvider.prototype,"swapOrdering",1),Ms([(0,L.cM)({args:!1})],RebaseEditorProvider.prototype,"switchToText",1);var Ys=i(620);var zs=Object.defineProperty,Ks=Object.getOwnPropertyDescriptor,Js=(e,t,i,r)=>{for(var n,s=r>1?void 0:r?Ks(t,i):t,o=e.length-1;o>=0;o--)(n=e[o])&&(s=(r?n(t,i,s):n(s))||s);return r&&s&&zs(t,i,s),s};const Xs=class _Container{static#e;static#t=new Proxy({},{get:function(e,t){if(null!=_Container.#e)return _Container.#e[t];if("config"===t)return te.D.getAll();throw new Error("Container is not initialized")}});static create(e,t,i,r,n){if(null!=_Container.#e)throw new Error("Container is already initialized");return _Container.#e=new _Container(e,t,i,r,n),_Container.#e}static get instance(){return _Container.#e??_Container.#t}_onReady=new r.EventEmitter;get onReady(){return this._onReady.event}BranchDateFormatting={dateFormat:void 0,dateStyle:void 0,reset:()=>{this.BranchDateFormatting.dateFormat=te.D.get("defaultDateFormat"),this.BranchDateFormatting.dateStyle=te.D.get("defaultDateStyle")}};CommitDateFormatting={dateFormat:null,dateSource:"authored",dateStyle:"relative",reset:()=>{this.CommitDateFormatting.dateFormat=te.D.get("defaultDateFormat"),this.CommitDateFormatting.dateSource=te.D.get("defaultDateSource"),this.CommitDateFormatting.dateStyle=te.D.get("defaultDateStyle")}};CommitShaFormatting={length:7,reset:()=>{this.CommitShaFormatting.length=Math.max(5,te.D.get("advanced.abbreviatedShaLength"))}};PullRequestDateFormatting={dateFormat:null,dateStyle:"relative",reset:()=>{this.PullRequestDateFormatting.dateFormat=te.D.get("defaultDateFormat"),this.PullRequestDateFormatting.dateStyle=te.D.get("defaultDateStyle")}};TagDateFormatting={dateFormat:null,dateStyle:"relative",reset:()=>{this.TagDateFormatting.dateFormat=te.D.get("defaultDateFormat"),this.TagDateFormatting.dateStyle=te.D.get("defaultDateStyle")}};_connection;_disposables;_terminalLinks;_webviews;constructor(e,t,n,o,a){this._context=e,this._prerelease=n,this._version=o,this.ensureModeApplied(),this._disposables=[this._storage=t,this._telemetry=new TelemetryService(this),this._usage=new UsageTracker(this,t),te.D.onDidChangeAny(this.onAnyConfigurationChanged,this)],this._disposables.push(this._connection=new ServerConnection(this)),this._disposables.push(this._accountAuthentication=new AccountAuthenticationProvider(this,this._connection)),this._disposables.push(this._subscription=new SubscriptionService(this,this._connection,a)),this._disposables.push(this._git=new GitProviderService(this)),this._disposables.push(new GitFileSystemProvider(this)),this._disposables.push(this._uri=new UriService(this)),this._disposables.push(this._deepLinks=new DeepLinkService(this)),this._disposables.push(this._actionRunners=new He.AR(this)),this._disposables.push(this._tracker=new GitDocumentTracker(this)),this._disposables.push(this._lineTracker=new GitLineTracker(this)),this._disposables.push(this._keyboard=new Keyboard),this._disposables.push(this._vsls=new VslsController(this)),this._disposables.push(this._eventBus=new EventBus),this._disposables.push(this._fileAnnotationController=new Ie.f(this)),this._disposables.push(this._lineAnnotationController=new LineAnnotationController(this)),this._disposables.push(this._lineHoverController=new LineHoverController(this)),this._disposables.push(this._statusBarController=new StatusBarController(this)),this._disposables.push(this._codeLensController=new GitCodeLensController(this)),this._disposables.push(this._webviews=new Ys.V(this)),this._disposables.push(this._webviews.registerWebviewPanel(s.Gh.ShowTimelinePage,{id:"gitlens.timeline",fileName:"timeline.html",iconPath:"images/gitlens-icon.png",title:"Visual File History",contextKeyPrefix:"gitlens:webview:timeline",trackingFeature:"timelineWebview",plusFeature:!0,column:r.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!1}},(async(e,t)=>{const{TimelineWebviewProvider:r}=await Promise.resolve().then(i.bind(i,9042));return new r(e,t)}))),this._disposables.push(this._timelineView=function(e){return e.registerWebviewView({id:"gitlens.views.timeline",fileName:"timeline.html",title:"Visual File History",contextKeyPrefix:"gitlens:webviewView:timeline",trackingFeature:"timelineView",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!1}},(async(e,t)=>{const{TimelineWebviewProvider:r}=await Promise.resolve().then(i.bind(i,9042));return new r(e,t)}))}(this._webviews)),this._disposables.push(this._graphPanel=function(e){return e.registerWebviewPanel(s.Gh.ShowGraphPage,{id:"gitlens.graph",fileName:"graph.html",iconPath:"images/gitlens-icon.png",title:"Commit Graph",contextKeyPrefix:"gitlens:webview:graph",trackingFeature:"graphWebview",plusFeature:!0,column:r.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!0,enableFindWidget:!1}},(async(e,t)=>{const{GraphWebviewProvider:r}=await Promise.resolve().then(i.bind(i,1302));return new r(e,t)}))}(this._webviews)),this._disposables.push(Xt(this,this._graphPanel)),this._disposables.push(this._graphView=function(e){return e.registerWebviewView({id:"gitlens.views.graph",fileName:"graph.html",title:"Commit Graph",contextKeyPrefix:"gitlens:webviewView:graph",trackingFeature:"graphView",plusFeature:!0,webviewHostOptions:{retainContextWhenHidden:!0}},(async(e,t)=>{const{GraphWebviewProvider:r}=await Promise.resolve().then(i.bind(i,1302));return new r(e,t)}))}(this._webviews)),this._disposables.push(new GraphStatusBarController(this));const c=function(e){return e.registerWebviewPanel(s.Gh.ShowSettingsPage,{id:"gitlens.settings",fileName:"settings.html",iconPath:"images/gitlens-icon.png",title:"GitLens Settings",contextKeyPrefix:"gitlens:webview:settings",trackingFeature:"settingsWebview",plusFeature:!1,column:r.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!0}},(async(e,t)=>{const{SettingsWebviewProvider:r}=await Promise.resolve().then(i.bind(i,5596));return new r(e,t)}))}(this._webviews);var l;this._disposables.push(c),this._disposables.push(function(e){return r.Disposable.from(...[s.Gh.ShowSettingsPageAndJumpToBranchesView,s.Gh.ShowSettingsPageAndJumpToCommitsView,s.Gh.ShowSettingsPageAndJumpToContributorsView,s.Gh.ShowSettingsPageAndJumpToFileHistoryView,s.Gh.ShowSettingsPageAndJumpToLineHistoryView,s.Gh.ShowSettingsPageAndJumpToRemotesView,s.Gh.ShowSettingsPageAndJumpToRepositoriesView,s.Gh.ShowSettingsPageAndJumpToSearchAndCompareView,s.Gh.ShowSettingsPageAndJumpToStashesView,s.Gh.ShowSettingsPageAndJumpToTagsView,s.Gh.ShowSettingsPageAndJumpToWorkTreesView,s.Gh.ShowSettingsPageAndJumpToViews,s.Gh.ShowSettingsPageAndJumpToCommitGraph,s.Gh.ShowSettingsPageAndJumpToAutolinks].map((t=>{let i;const r=/.*?#(.*)/.exec(t);return null!=r&&([,i]=r),(0,at.xR)(t,((...t)=>{e.show(void 0,i,...t)}))})))}(c)),this._disposables.push(function(e){return e.registerWebviewPanel(s.Gh.ShowWelcomePage,{id:"gitlens.welcome",fileName:"welcome.html",iconPath:"images/gitlens-icon.png",title:"Welcome to GitLens",contextKeyPrefix:"gitlens:webview:welcome",trackingFeature:"welcomeWebview",plusFeature:!1,column:r.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!1,enableFindWidget:!0}},(async(e,t)=>{const{WelcomeWebviewProvider:r}=await Promise.resolve().then(i.bind(i,7338));return new r(e,t)}))}(this._webviews)),this._disposables.push(this._rebaseEditor=new RebaseEditorProvider(this)),this._disposables.push(function(e){return e.registerWebviewPanel(s.Gh.ShowFocusPage,{id:"gitlens.focus",fileName:"focus.html",iconPath:"images/gitlens-icon.png",title:"Focus View",contextKeyPrefix:"gitlens:webview:focus",trackingFeature:"focusWebview",plusFeature:!0,column:r.ViewColumn.Active,webviewHostOptions:{retainContextWhenHidden:!0,enableFindWidget:!0}},(async(e,t)=>{const{FocusWebviewProvider:r}=await Promise.resolve().then(i.bind(i,1629));return new r(e,t)}))}(this._webviews)),this._disposables.push(new ViewFileDecorationProvider),this._disposables.push(this._repositoriesView=new RepositoriesView(this)),this._disposables.push(this._commitDetailsView=function(e){return e.registerWebviewView({id:"gitlens.views.commitDetails",fileName:"commitDetails.html",title:"Commit Details",contextKeyPrefix:"gitlens:webviewView:commitDetails",trackingFeature:"commitDetailsView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},(async(e,t)=>{const{CommitDetailsWebviewProvider:r}=await Promise.resolve().then(i.bind(i,9206));return new r(e,t,{attachedTo:"default"})}))}(this._webviews)),this._disposables.push(this._graphDetailsView=function(e){return e.registerWebviewView({id:"gitlens.views.graphDetails",fileName:"commitDetails.html",title:"Commit Graph Details",contextKeyPrefix:"gitlens:webviewView:graphDetails",trackingFeature:"graphDetailsView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},(async(e,t)=>{const{CommitDetailsWebviewProvider:r}=await Promise.resolve().then(i.bind(i,9206));return new r(e,t,{attachedTo:"graph"})}))}(this._webviews)),this._disposables.push(this._commitsView=new CommitsView(this)),this._disposables.push(this._fileHistoryView=new FileHistoryView(this)),this._disposables.push(this._lineHistoryView=new LineHistoryView(this)),this._disposables.push(this._branchesView=new BranchesView(this)),this._disposables.push(this._remotesView=new RemotesView(this)),this._disposables.push(this._stashesView=new StashesView(this)),this._disposables.push(this._tagsView=new TagsView(this)),this._disposables.push(this._worktreesView=new WorktreesView(this)),this._disposables.push(this._contributorsView=new ContributorsView(this)),this._disposables.push(this._searchAndCompareView=new SearchAndCompareView(this)),this._disposables.push(this._workspacesView=new WorkspacesView(this)),this._disposables.push(this._homeView=function(e){return e.registerWebviewView({id:"gitlens.views.home",fileName:"home.html",title:"Home",contextKeyPrefix:"gitlens:webviewView:home",trackingFeature:"homeView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},(async(e,t)=>{const{HomeWebviewProvider:r}=await Promise.resolve().then(i.bind(i,2384));return new r(e,t)}))}(this._webviews)),this._disposables.push(this._accountView=function(e){return e.registerWebviewView({id:"gitlens.views.account",fileName:"account.html",title:"GitKraken Account",contextKeyPrefix:"gitlens:webviewView:account",trackingFeature:"accountView",plusFeature:!1,webviewHostOptions:{retainContextWhenHidden:!1}},(async(e,t)=>{const{AccountWebviewProvider:r}=await Promise.resolve().then(i.bind(i,420));return new r(e,t)}))}(this._webviews)),te.D.get("terminalLinks.enabled")&&this._disposables.push(this._terminalLinks=new GitTerminalLinkProvider(this)),this._disposables.push(te.D.onDidChange((e=>{te.D.changed(e,"terminalLinks.enabled")&&(this._terminalLinks?.dispose(),te.D.get("terminalLinks.enabled")&&this._disposables.push(this._terminalLinks=new GitTerminalLinkProvider(this)))}))),e.subscriptions.push({dispose:()=>this._disposables.reverse().forEach((e=>{e.dispose()}))}),l=this,null!=li()&&setTimeout((()=>l.workspaces.addMissingCurrentWorkspaceRepos()),1e4)}deactivate(){this._deactivating=!0}_deactivating=!1;get deactivating(){return this._deactivating}_ready=!1;async ready(){if(this._ready)throw new Error("Container is already ready");this._ready=!0,await this.registerGitProviders(),queueMicrotask((()=>this._onReady.fire()))}async registerGitProviders(){const e=await async function(e){return[new GitHubGitProvider(e)]}(this);for(const t of e)this._disposables.push(this._git.register(t.descriptor.id,t));this._git.registrationComplete()}onAnyConfigurationChanged(e){te.D.changedAny(e,s.m1)&&(this._mode=void 0,te.D.changed(e,"outputLevel")&&(C.Yd.logLevel=(0,je.oE)(te.D.get("outputLevel"))),te.D.changed(e,"defaultGravatarsStyle")&&(0,Ve.Wr)(te.D.get("defaultGravatarsStyle")),te.D.changed(e,"mode")&&this.ensureModeApplied())}_accountAuthentication;get accountAuthentication(){return this._accountAuthentication}_actionRunners;get actionRunners(){return this._actionRunners}_ai;get ai(){return null==this._ai&&this._disposables.push(this._ai=new AIProviderService(this)),this._ai}_autolinks;get autolinks(){return null==this._autolinks&&this._disposables.push(this._autolinks=new Oe.P(this)),this._autolinks}_branchesView;get branchesView(){return this._branchesView}_cache;get cache(){return null==this._cache&&this._disposables.push(this._cache=new CacheProvider(this)),this._cache}_codeLensController;get codeLens(){return this._codeLensController}_commitsView;get commitsView(){return this._commitsView}_commitDetailsView;get commitDetailsView(){return this._commitDetailsView}_context;get context(){return this._context}_contributorsView;get contributorsView(){return this._contributorsView}get debugging(){return this._context.extensionMode===r.ExtensionMode.Development}get env(){if(this.prereleaseOrDebugging){const e=te.D.getAny("gitkraken.env");if("dev"===e)return"dev";if("staging"===e)return"staging"}return"production"}_eventBus;get events(){return this._eventBus}_fileAnnotationController;get fileAnnotations(){return this._fileAnnotationController}_fileHistoryView;get fileHistoryView(){return this._fileHistoryView}_git;get git(){return this._git}_uri;get uri(){return this._uri}_deepLinks;get deepLinks(){return this._deepLinks}_focus;get focus(){return null==this._focus&&this._disposables.push(this._focus=new FocusService(this,new ServerConnection(this))),this._focus}_github;get github(){return null==this._github&&(this._github=this._loadGitHubApi()),this._github}async _loadGitHubApi(){try{const e=new((await Promise.resolve().then(i.bind(i,7467))).GitHubApi)(this);return this._disposables.push(e),e}catch(e){return void C.Yd.error(e)}}_gitlab;get gitlab(){return null==this._gitlab&&(this._gitlab=this._loadGitLabApi()),this._gitlab}async _loadGitLabApi(){try{const e=new((await Promise.resolve().then(i.bind(i,2142))).GitLabApi)(this);return this._disposables.push(e),e}catch(e){return void C.Yd.error(e)}}_graphDetailsView;get graphDetailsView(){return this._graphDetailsView}_graphPanel;_graphView;get graphView(){return this._graphView}_homeView;get homeView(){return this._homeView}_accountView;get accountView(){return this._accountView}get id(){return this._context.extension.id}_integrationAuthentication;get integrationAuthentication(){return null==this._integrationAuthentication&&this._disposables.push(this._integrationAuthentication=new IntegrationAuthenticationService(this),new M.z4(this),new GitLabAuthenticationProvider(this)),this._integrationAuthentication}_keyboard;get keyboard(){return this._keyboard}_lineAnnotationController;get lineAnnotations(){return this._lineAnnotationController}_lineHistoryView;get lineHistoryView(){return this._lineHistoryView}_lineHoverController;get lineHovers(){return this._lineHoverController}_lineTracker;get lineTracker(){return this._lineTracker}_prerelease;get prerelease(){return this._prerelease}get prereleaseOrDebugging(){return this._prerelease||this.debugging}_rebaseEditor;get rebaseEditor(){return this._rebaseEditor}_remotesView;get remotesView(){return this._remotesView}_repositoriesView;get repositoriesView(){return this._repositoriesView}_repositoryPathMapping;get repositoryPathMapping(){return null==this._repositoryPathMapping&&this._disposables.push(this._repositoryPathMapping=new RepositoryWebPathMappingProvider(this)),this._repositoryPathMapping}_richRemoteProviders;get richRemoteProviders(){return null==this._richRemoteProviders&&(this._richRemoteProviders=new RichRemoteProviderService(this)),this._richRemoteProviders}_searchAndCompareView;get searchAndCompareView(){return this._searchAndCompareView}_stashesView;get stashesView(){return this._stashesView}_statusBarController;get statusBar(){return this._statusBarController}_storage;get storage(){return this._storage}_subscription;get subscription(){return this._subscription}_tagsView;get tagsView(){return this._tagsView}_telemetry;get telemetry(){return this._telemetry}_timelineView;get timelineView(){return this._timelineView}_tracker;get tracker(){return this._tracker}_usage;get usage(){return this._usage}_version;get version(){return this._version}_viewCommands;get viewCommands(){return null==this._viewCommands&&(this._viewCommands=new ViewCommands(this)),this._viewCommands}_vsls;get vsls(){return this._vsls}_workspaces;get workspaces(){return null==this._workspaces&&this._disposables.push(this._workspaces=new WorkspacesService(this,this._connection)),this._workspaces}_workspacesView;get workspacesView(){return this._workspacesView}_worktreesView;get worktreesView(){return this._worktreesView}_mode;get mode(){return null==this._mode&&(this._mode=te.D.get("modes")?.[te.D.get("mode.active")]),this._mode}ensureModeApplied(){const e=this.mode;if(null!=e){if(null!=e.annotations){let t;switch(e.annotations){case"blame":t=s.Gh.ToggleFileBlame;break;case"changes":t=s.Gh.ToggleFileChanges;break;case"heatmap":t=s.Gh.ToggleFileHeatmap}if(null!=t){const i={type:e.annotations,on:!0};setTimeout(at.P0,50,t,i)}}te.D.applyOverrides({get:(t,i)=>{if(null!=e.annotations){if(te.D.matches(`${e.annotations}.toggleMode`,t,i))return i="window";if(te.D.matches(e.annotations,t,i))return i.toggleMode="window",i}for(const r of["codeLens","currentLine","hovers","statusBar"])if(null!=e[r]){if(te.D.matches(`${r}.enabled`,t,i))return i=e[r];if(te.D.matches(r,t,i))return i.enabled=e[r],i}return i},getAll:t=>(null!=e.annotations&&(t[e.annotations].toggleMode="window"),null!=e.codeLens&&(t.codeLens.enabled=e.codeLens),null!=e.currentLine&&(t.currentLine.enabled=e.currentLine),null!=e.hovers&&(t.hovers.enabled=e.hovers),null!=e.statusBar&&(t.statusBar.enabled=e.statusBar),t),onDidChange:e=>{if(!te.D.changed(e,["mode","modes"]))return e;const t=e.affectsConfiguration;return{...e,affectsConfiguration:(e,i)=>!!/^gitlens\.(?:modes?|blame|changes|heatmap|codeLens|currentLine|hovers|statusBar)\b/.test(e)||t(e,i)}}})}else te.D.clearOverrides()}};Js([(0,L.cM)()],Xs.prototype,"registerGitProviders",1),Js([(0,Et.H)()],Xs.prototype,"debugging",1),Js([(0,Et.H)()],Xs.prototype,"env",1),Js([(0,Et.H)()],Xs.prototype,"id",1),Js([(0,Et.H)()],Xs.prototype,"prereleaseOrDebugging",1);let Zs=Xs;function eo(e){return e instanceof Zs}},3148:(e,t,i)=>{i.d(t,{X:()=>a});const r="";var n=i(3620);const s=/:([-+_a-z0-9]+):/g;let o;function a(e){return null==o&&(o=JSON.parse((0,n.QC)(r))),e.replace(s,((e,t)=>o[t]||e))}},3317:(e,t,i)=>{i.d(t,{U:()=>s});const{fromCharCode:r}=String,n=new TextEncoder;function s(e){let t="string"==typeof e?n.encode(e):e,i="";for(let e=0,{length:n}=t;e<n;e++)i+=r(t[e]);return globalThis.btoa(i)}},4290:(e,t,i)=>{i.d(t,{Vu:()=>l,FB:()=>h,Vj:()=>u});var r=i(3317);function n(e,t){let[i,r,n,s]=e;i+=(r&n|~r&s)+t[0]-680876936|0,i=(i<<7|i>>>25)+r|0,s+=(i&r|~i&n)+t[1]-389564586|0,s=(s<<12|s>>>20)+i|0,n+=(s&i|~s&r)+t[2]+606105819|0,n=(n<<17|n>>>15)+s|0,r+=(n&s|~n&i)+t[3]-1044525330|0,r=(r<<22|r>>>10)+n|0,i+=(r&n|~r&s)+t[4]-176418897|0,i=(i<<7|i>>>25)+r|0,s+=(i&r|~i&n)+t[5]+1200080426|0,s=(s<<12|s>>>20)+i|0,n+=(s&i|~s&r)+t[6]-1473231341|0,n=(n<<17|n>>>15)+s|0,r+=(n&s|~n&i)+t[7]-45705983|0,r=(r<<22|r>>>10)+n|0,i+=(r&n|~r&s)+t[8]+1770035416|0,i=(i<<7|i>>>25)+r|0,s+=(i&r|~i&n)+t[9]-1958414417|0,s=(s<<12|s>>>20)+i|0,n+=(s&i|~s&r)+t[10]-42063|0,n=(n<<17|n>>>15)+s|0,r+=(n&s|~n&i)+t[11]-1990404162|0,r=(r<<22|r>>>10)+n|0,i+=(r&n|~r&s)+t[12]+1804603682|0,i=(i<<7|i>>>25)+r|0,s+=(i&r|~i&n)+t[13]-40341101|0,s=(s<<12|s>>>20)+i|0,n+=(s&i|~s&r)+t[14]-1502002290|0,n=(n<<17|n>>>15)+s|0,r+=(n&s|~n&i)+t[15]+1236535329|0,r=(r<<22|r>>>10)+n|0,i+=(r&s|n&~s)+t[1]-165796510|0,i=(i<<5|i>>>27)+r|0,s+=(i&n|r&~n)+t[6]-1069501632|0,s=(s<<9|s>>>23)+i|0,n+=(s&r|i&~r)+t[11]+643717713|0,n=(n<<14|n>>>18)+s|0,r+=(n&i|s&~i)+t[0]-373897302|0,r=(r<<20|r>>>12)+n|0,i+=(r&s|n&~s)+t[5]-701558691|0,i=(i<<5|i>>>27)+r|0,s+=(i&n|r&~n)+t[10]+38016083|0,s=(s<<9|s>>>23)+i|0,n+=(s&r|i&~r)+t[15]-660478335|0,n=(n<<14|n>>>18)+s|0,r+=(n&i|s&~i)+t[4]-405537848|0,r=(r<<20|r>>>12)+n|0,i+=(r&s|n&~s)+t[9]+568446438|0,i=(i<<5|i>>>27)+r|0,s+=(i&n|r&~n)+t[14]-1019803690|0,s=(s<<9|s>>>23)+i|0,n+=(s&r|i&~r)+t[3]-187363961|0,n=(n<<14|n>>>18)+s|0,r+=(n&i|s&~i)+t[8]+1163531501|0,r=(r<<20|r>>>12)+n|0,i+=(r&s|n&~s)+t[13]-1444681467|0,i=(i<<5|i>>>27)+r|0,s+=(i&n|r&~n)+t[2]-51403784|0,s=(s<<9|s>>>23)+i|0,n+=(s&r|i&~r)+t[7]+1735328473|0,n=(n<<14|n>>>18)+s|0,r+=(n&i|s&~i)+t[12]-1926607734|0,r=(r<<20|r>>>12)+n|0,i+=(r^n^s)+t[5]-378558|0,i=(i<<4|i>>>28)+r|0,s+=(i^r^n)+t[8]-2022574463|0,s=(s<<11|s>>>21)+i|0,n+=(s^i^r)+t[11]+1839030562|0,n=(n<<16|n>>>16)+s|0,r+=(n^s^i)+t[14]-35309556|0,r=(r<<23|r>>>9)+n|0,i+=(r^n^s)+t[1]-1530992060|0,i=(i<<4|i>>>28)+r|0,s+=(i^r^n)+t[4]+1272893353|0,s=(s<<11|s>>>21)+i|0,n+=(s^i^r)+t[7]-155497632|0,n=(n<<16|n>>>16)+s|0,r+=(n^s^i)+t[10]-1094730640|0,r=(r<<23|r>>>9)+n|0,i+=(r^n^s)+t[13]+681279174|0,i=(i<<4|i>>>28)+r|0,s+=(i^r^n)+t[0]-358537222|0,s=(s<<11|s>>>21)+i|0,n+=(s^i^r)+t[3]-722521979|0,n=(n<<16|n>>>16)+s|0,r+=(n^s^i)+t[6]+76029189|0,r=(r<<23|r>>>9)+n|0,i+=(r^n^s)+t[9]-640364487|0,i=(i<<4|i>>>28)+r|0,s+=(i^r^n)+t[12]-421815835|0,s=(s<<11|s>>>21)+i|0,n+=(s^i^r)+t[15]+530742520|0,n=(n<<16|n>>>16)+s|0,r+=(n^s^i)+t[2]-995338651|0,r=(r<<23|r>>>9)+n|0,i+=(n^(r|~s))+t[0]-198630844|0,i=(i<<6|i>>>26)+r|0,s+=(r^(i|~n))+t[7]+1126891415|0,s=(s<<10|s>>>22)+i|0,n+=(i^(s|~r))+t[14]-1416354905|0,n=(n<<15|n>>>17)+s|0,r+=(s^(n|~i))+t[5]-57434055|0,r=(r<<21|r>>>11)+n|0,i+=(n^(r|~s))+t[12]+1700485571|0,i=(i<<6|i>>>26)+r|0,s+=(r^(i|~n))+t[3]-1894986606|0,s=(s<<10|s>>>22)+i|0,n+=(i^(s|~r))+t[10]-1051523|0,n=(n<<15|n>>>17)+s|0,r+=(s^(n|~i))+t[1]-2054922799|0,r=(r<<21|r>>>11)+n|0,i+=(n^(r|~s))+t[8]+1873313359|0,i=(i<<6|i>>>26)+r|0,s+=(r^(i|~n))+t[15]-30611744|0,s=(s<<10|s>>>22)+i|0,n+=(i^(s|~r))+t[6]-1560198380|0,n=(n<<15|n>>>17)+s|0,r+=(s^(n|~i))+t[13]+1309151649|0,r=(r<<21|r>>>11)+n|0,i+=(n^(r|~s))+t[4]-145523070|0,i=(i<<6|i>>>26)+r|0,s+=(r^(i|~n))+t[11]-1120210379|0,s=(s<<10|s>>>22)+i|0,n+=(i^(s|~r))+t[2]+718787259|0,n=(n<<15|n>>>17)+s|0,r+=(s^(n|~i))+t[9]-343485551|0,r=(r<<21|r>>>11)+n|0,e[0]=i+e[0]|0,e[1]=r+e[1]|0,e[2]=n+e[2]|0,e[3]=s+e[3]|0}function s(e){const t=[];for(let i=0;i<64;i+=4)t[i>>2]=e.charCodeAt(i)+(e.charCodeAt(i+1)<<8)+(e.charCodeAt(i+2)<<16)+(e.charCodeAt(i+3)<<24);return t}const o=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];function a(e){let t="";for(let i=0;i<4;i+=1)t+=o[e>>8*i+4&15]+o[e>>8*i&15];return t}function c(e,t="hex"){const i=(r=function(e){const t=e.length;let i,r=[1732584193,-271733879,-1732584194,271733878];for(i=64;i<=t;i+=64)n(r,s(e.substring(i-64,i)));let o=(e=e.substring(i-64)).length,a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(i=0;i<o;i+=1)a[i>>2]|=e.charCodeAt(i)<<(i%4<<3);if(a[i>>2]|=128<<(i%4<<3),i>55)for(n(r,a),i=0;i<16;i+=1)a[i]=0;const c=(8*t).toString(16).match(/(.*?)(.{0,8})$/),l=parseInt(c[2],16),h=parseInt(c[1],16)||0;return a[14]=l,a[15]=h,n(r,a),r}(e),r.map(a).join(""));var r;return"hex"===t?i:btoa(function(e){const t=[],i=e.length;for(let r=0;r<i-1;r+=2)t.push(parseInt(e.substr(r,2),16));return String.fromCharCode.apply(String,t)}(i))}function l(){return(0,r.U)(globalThis.crypto.getRandomValues(new Uint8Array(16)))}function h(e,t="hex"){return c(e,t)}function u(){return globalThis.crypto.randomUUID()}},9827:(e,t,i)=>{i.d(t,{Nx:()=>n,a_:()=>s,he:()=>r});const r=globalThis.fetch;function n(e){}async function s(e,t){return t()}},185:(e,t,i)=>{i.d(t,{d:()=>a,e:()=>o});const r=new TextDecoder,n=new TextEncoder,s=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];function o(e){const t=n.encode(e),i=new Array(t.length);for(let e=0;e<t.length;++e)i[e]=s[t[e]];return i.join("")}function a(e){const t=e.match(/(\w{2})/g);if(null===t)return"";const i=new Uint8Array(t.map((e=>parseInt(e,16))));return r.decode(i)}},9376:(e,t,i)=>{function r(e){const t=.001*performance.now();let i=Math.floor(t),r=Math.floor(t%1*1e9);return void